//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:28.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.paddock
{
	public class PaddockContentInformations : PaddockInformations, IDofusType
	{
		public new const int NetworkId = 183;
		public new int ProtocolId { get { return NetworkId; } }

		public double PaddockId { get; set; }

		public short WorldX { get; set; }

		public short WorldY { get; set; }

		public double MapId { get; set; }

		public CustomVar<short> SubAreaId { get; set; }

		public bool Abandonned { get; set; }

		public MountInformationsForPaddock[] MountsInformations { get; set; }


		public PaddockContentInformations() { }


		public PaddockContentInformations InitPaddockContentInformations(double _paddockid, short _worldx, short _worldy, double _mapid, CustomVar<short> _subareaid, bool _abandonned, MountInformationsForPaddock[] _mountsinformations)
		{

			this.PaddockId = _paddockid;
			this.WorldX = _worldx;
			this.WorldY = _worldy;
			this.MapId = _mapid;
			this.SubAreaId = _subareaid;
			this.Abandonned = _abandonned;
			this.MountsInformations = _mountsinformations;

			return this;
		}

		public new byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(base.Serialize());
			writer.Write(this.PaddockId);
			writer.Write(this.WorldX);
			writer.Write(this.WorldY);
			writer.Write(this.MapId);
			writer.Write(this.SubAreaId);
			writer.Write(this.Abandonned);
			writer.Write((short)(this.MountsInformations.Length));
			foreach(var obj in MountsInformations)
			{
				writer.Write(obj.Serialize());
			}

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.PaddockId = reader.Read<double>();
			this.WorldX = reader.Read<short>();
			this.WorldY = reader.Read<short>();
			this.MapId = reader.Read<double>();
			this.SubAreaId = reader.Read<CustomVar<short>>();
			this.Abandonned = reader.Read<bool>();
			int MountsInformations_length = reader.Read<short>();
			this.MountsInformations = new MountInformationsForPaddock[MountsInformations_length];
			for(int i = 0; i < MountsInformations_length; i++)
			{
				this.MountsInformations[i] = new MountInformationsForPaddock();
				this.MountsInformations[i].Deserialize(reader);
			}

		}


	}
}
