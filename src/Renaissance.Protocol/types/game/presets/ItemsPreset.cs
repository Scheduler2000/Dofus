//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:59.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.look;

namespace Renaissance.Protocol.types.game.presets
{
	public class ItemsPreset : Preset, IDofusType
	{
		public new const int NetworkId = 517;
		public new int ProtocolId { get { return NetworkId; } }

		public ItemForPreset[] Items { get; set; }

		public bool MountEquipped { get; set; }

		public EntityLook Look { get; set; }


		public ItemsPreset() { }


		public ItemsPreset InitItemsPreset(ItemForPreset[] _items, bool _mountequipped, EntityLook _look)
		{

			this.Items = _items;
			this.MountEquipped = _mountequipped;
			this.Look = _look;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Items.Length));
			var memory1 = new Memory<byte>[Items.Length];
			for(int i = 0; i < Items.Length; i++)
			{
				memory1[i] = this.Items[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf(MountEquipped);
			var serialized1 = this.Look.Serialize();
			size += serialized1.Length;
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData((short)(this.Items.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData(this.MountEquipped);
			writer.WriteDatas(serialized1);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			int Items_length = reader.Read<short>();
			this.Items = new ItemForPreset[Items_length];
			for(int i = 0; i < Items_length; i++)
			{
				this.Items[i] = new ItemForPreset();
				this.Items[i].Deserialize(reader);
			}
			this.MountEquipped = reader.Read<bool>();
			this.Look = new EntityLook();
			this.Look.Deserialize(reader);

		}


	}
}
