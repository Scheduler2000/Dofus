//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:28.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.character;
using    Renaissance.Protocol.types.game.character.status;

namespace Renaissance.Protocol.types.game.guild
{
	public class GuildMember : CharacterMinimalInformations, IDofusType
	{
		public new const int NetworkId = 88;
		public new int ProtocolId { get { return NetworkId; } }

		public byte Breed { get; set; }

		public WrappedBool Sex { get; set; }

		public CustomVar<short> Rank { get; set; }

		public CustomVar<long> GivenExperience { get; set; }

		public byte ExperienceGivenPercent { get; set; }

		public CustomVar<int> Rights { get; set; }

		public byte Connected { get; set; }

		public byte AlignmentSide { get; set; }

		public short HoursSinceLastConnection { get; set; }

		public CustomVar<short> MoodSmileyId { get; set; }

		public int AccountId { get; set; }

		public int AchievementPoints { get; set; }

		public PlayerStatus Status { get; set; }

		public WrappedBool HavenBagShared { get; set; }


		public GuildMember() { }


		public GuildMember InitGuildMember(byte _breed, WrappedBool _sex, CustomVar<short> _rank, CustomVar<long> _givenexperience, byte _experiencegivenpercent, CustomVar<int> _rights, byte _connected, byte _alignmentside, short _hourssincelastconnection, CustomVar<short> _moodsmileyid, int _accountid, int _achievementpoints, PlayerStatus _status, WrappedBool _havenbagshared)
		{

			this.Breed = _breed;
			this.Sex = _sex;
			this.Rank = _rank;
			this.GivenExperience = _givenexperience;
			this.ExperienceGivenPercent = _experiencegivenpercent;
			this.Rights = _rights;
			this.Connected = _connected;
			this.AlignmentSide = _alignmentside;
			this.HoursSinceLastConnection = _hourssincelastconnection;
			this.MoodSmileyId = _moodsmileyid;
			this.AccountId = _accountid;
			this.AchievementPoints = _achievementpoints;
			this.Status = _status;
			this.HavenBagShared = _havenbagshared;

			return this;
		}

		public new byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(base.Serialize());
			byte box = 0;
			box = writer.SetFlag(box,0,this.Sex);
			box = writer.SetFlag(box,1,this.HavenBagShared);
			writer.Write(box);
			writer.Write(this.Breed);
			writer.Write(this.Rank);
			writer.Write(this.GivenExperience);
			writer.Write(this.ExperienceGivenPercent);
			writer.Write(this.Rights);
			writer.Write(this.Connected);
			writer.Write(this.AlignmentSide);
			writer.Write(this.HoursSinceLastConnection);
			writer.Write(this.MoodSmileyId);
			writer.Write(this.AccountId);
			writer.Write(this.AchievementPoints);
			writer.Write((short)(Status.ProtocolId));
			writer.Write(this.Status.Serialize());

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			byte box = reader.Read<byte>();
			this.Sex = reader.ReadFlag(box,0);
			this.HavenBagShared = reader.ReadFlag(box,1);
			this.Breed = reader.Read<byte>();
			this.Rank = reader.Read<CustomVar<short>>();
			this.GivenExperience = reader.Read<CustomVar<long>>();
			this.ExperienceGivenPercent = reader.Read<byte>();
			this.Rights = reader.Read<CustomVar<int>>();
			this.Connected = reader.Read<byte>();
			this.AlignmentSide = reader.Read<byte>();
			this.HoursSinceLastConnection = reader.Read<short>();
			this.MoodSmileyId = reader.Read<CustomVar<short>>();
			this.AccountId = reader.Read<int>();
			this.AchievementPoints = reader.Read<int>();
reader.Skip(2); // skip read short
			this.Status = new PlayerStatus();
			this.Status.Deserialize(reader);

		}


	}
}
