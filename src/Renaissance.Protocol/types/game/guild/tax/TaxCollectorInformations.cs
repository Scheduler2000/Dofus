//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:01.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.look;

namespace Renaissance.Protocol.types.game.guild.tax
{
	public class TaxCollectorInformations : IDofusType
	{
		public  const int NetworkId = 167;
		public  int ProtocolId { get { return NetworkId; } }

		public double UniqueId { get; set; }

		public CustomVar<short> FirtNameId { get; set; }

		public CustomVar<short> LastNameId { get; set; }

		public AdditionalTaxCollectorInformations AdditionalInfos { get; set; }

		public short WorldX { get; set; }

		public short WorldY { get; set; }

		public CustomVar<short> SubAreaId { get; set; }

		public byte State { get; set; }

		public EntityLook Look { get; set; }

		public TaxCollectorComplementaryInformations[] Complements { get; set; }


		public TaxCollectorInformations() { }


		public TaxCollectorInformations InitTaxCollectorInformations(double _uniqueid, CustomVar<short> _firtnameid, CustomVar<short> _lastnameid, AdditionalTaxCollectorInformations _additionalinfos, short _worldx, short _worldy, CustomVar<short> _subareaid, byte _state, EntityLook _look, TaxCollectorComplementaryInformations[] _complements)
		{

			this.UniqueId = _uniqueid;
			this.FirtNameId = _firtnameid;
			this.LastNameId = _lastnameid;
			this.AdditionalInfos = _additionalinfos;
			this.WorldX = _worldx;
			this.WorldY = _worldy;
			this.SubAreaId = _subareaid;
			this.State = _state;
			this.Look = _look;
			this.Complements = _complements;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(UniqueId);
			size += DofusBinaryFactory.Sizing.SizeOf(FirtNameId);
			size += DofusBinaryFactory.Sizing.SizeOf(LastNameId);
			var serialized1 = this.AdditionalInfos.Serialize();
			size += serialized1.Length;
			size += DofusBinaryFactory.Sizing.SizeOf(WorldX);
			size += DofusBinaryFactory.Sizing.SizeOf(WorldY);
			size += DofusBinaryFactory.Sizing.SizeOf(SubAreaId);
			size += DofusBinaryFactory.Sizing.SizeOf(State);
			var serialized2 = this.Look.Serialize();
			size += serialized2.Length;
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Complements.Length));
			var memory1 = new Memory<byte>[Complements.Length];
			for(int i = 0; i < Complements.Length; i++)
			{
				size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Complements[i].ProtocolId));
				memory1[i] = this.Complements[i].Serialize();
				size += memory1[i].Length;
			}


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.UniqueId);
			writer.WriteData(this.FirtNameId);
			writer.WriteData(this.LastNameId);
			writer.WriteDatas(serialized1);
			writer.WriteData(this.WorldX);
			writer.WriteData(this.WorldY);
			writer.WriteData(this.SubAreaId);
			writer.WriteData(this.State);
			writer.WriteDatas(serialized2);
			writer.WriteData((short)(this.Complements.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteData((short)(Complements[i].ProtocolId));
				writer.WriteDatas(memory1[i]);
			}

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.UniqueId = reader.Read<double>();
			this.FirtNameId = reader.Read<CustomVar<short>>();
			this.LastNameId = reader.Read<CustomVar<short>>();
			this.AdditionalInfos = new AdditionalTaxCollectorInformations();
			this.AdditionalInfos.Deserialize(reader);
			this.WorldX = reader.Read<short>();
			this.WorldY = reader.Read<short>();
			this.SubAreaId = reader.Read<CustomVar<short>>();
			this.State = reader.Read<byte>();
			this.Look = new EntityLook();
			this.Look.Deserialize(reader);
			int Complements_length = reader.Read<short>();
			this.Complements = new TaxCollectorComplementaryInformations[Complements_length];
			for(int i = 0; i < Complements_length; i++)
			{
			reader.Skip(2); // skip protocolManager.GetInstance(short)
				this.Complements[i] = new TaxCollectorComplementaryInformations();
				this.Complements[i].Deserialize(reader);
			}

		}


	}
}
