//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:31.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.look;

namespace Renaissance.Protocol.types.game.guild.tax
{
	public class TaxCollectorInformations : IDofusType
	{
		public  const int NetworkId = 167;
		public  int ProtocolId { get { return NetworkId; } }

		public double UniqueId { get; set; }

		public CustomVar<short> FirtNameId { get; set; }

		public CustomVar<short> LastNameId { get; set; }

		public AdditionalTaxCollectorInformations AdditionalInfos { get; set; }

		public short WorldX { get; set; }

		public short WorldY { get; set; }

		public CustomVar<short> SubAreaId { get; set; }

		public byte State { get; set; }

		public EntityLook Look { get; set; }

		public TaxCollectorComplementaryInformations[] Complements { get; set; }


		public TaxCollectorInformations() { }


		public TaxCollectorInformations InitTaxCollectorInformations(double _uniqueid, CustomVar<short> _firtnameid, CustomVar<short> _lastnameid, AdditionalTaxCollectorInformations _additionalinfos, short _worldx, short _worldy, CustomVar<short> _subareaid, byte _state, EntityLook _look, TaxCollectorComplementaryInformations[] _complements)
		{

			this.UniqueId = _uniqueid;
			this.FirtNameId = _firtnameid;
			this.LastNameId = _lastnameid;
			this.AdditionalInfos = _additionalinfos;
			this.WorldX = _worldx;
			this.WorldY = _worldy;
			this.SubAreaId = _subareaid;
			this.State = _state;
			this.Look = _look;
			this.Complements = _complements;

			return this;
		}

		public  byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(this.UniqueId);
			writer.Write(this.FirtNameId);
			writer.Write(this.LastNameId);
			writer.Write(this.AdditionalInfos.Serialize());
			writer.Write(this.WorldX);
			writer.Write(this.WorldY);
			writer.Write(this.SubAreaId);
			writer.Write(this.State);
			writer.Write(this.Look.Serialize());
			writer.Write((short)(this.Complements.Length));
			foreach(var obj in Complements)
			{
				writer.Write((short)(obj.ProtocolId));
				writer.Write(obj.Serialize());
			}

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.UniqueId = reader.Read<double>();
			this.FirtNameId = reader.Read<CustomVar<short>>();
			this.LastNameId = reader.Read<CustomVar<short>>();
			this.AdditionalInfos = new AdditionalTaxCollectorInformations();
			this.AdditionalInfos.Deserialize(reader);
			this.WorldX = reader.Read<short>();
			this.WorldY = reader.Read<short>();
			this.SubAreaId = reader.Read<CustomVar<short>>();
			this.State = reader.Read<byte>();
			this.Look = new EntityLook();
			this.Look.Deserialize(reader);
			int Complements_length = reader.Read<short>();
			this.Complements = new TaxCollectorComplementaryInformations[Complements_length];
			for(int i = 0; i < Complements_length; i++)
			{
reader.Skip(2); // skip read short for protocolManager.GetInstance(short)
				this.Complements[i] = new TaxCollectorComplementaryInformations();
				this.Complements[i].Deserialize(reader);
			}

		}


	}
}
