//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:58.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.character.status;
using    Renaissance.Protocol.types.game.context.roleplay;

namespace Renaissance.Protocol.types.game.friend
{
	public class FriendOnlineInformations : FriendInformations, IDofusType
	{
		public new const int NetworkId = 92;
		public new int ProtocolId { get { return NetworkId; } }

		public CustomVar<long> PlayerId { get; set; }

		public string PlayerName { get; set; }

		public CustomVar<short> Level { get; set; }

		public byte AlignmentSide { get; set; }

		public byte Breed { get; set; }

		public WrappedBool Sex { get; set; }

		public GuildInformations GuildInfo { get; set; }

		public CustomVar<short> MoodSmileyId { get; set; }

		public PlayerStatus Status { get; set; }

		public WrappedBool HavenBagShared { get; set; }


		public FriendOnlineInformations() { }


		public FriendOnlineInformations InitFriendOnlineInformations(byte _playerstate, CustomVar<short> _lastconnection, int _achievementpoints, CustomVar<short> _leagueid, int _ladderposition, int _accountid, string _accountname, CustomVar<long> _playerid, string _playername, CustomVar<short> _level, byte _alignmentside, byte _breed, WrappedBool _sex, GuildInformations _guildinfo, CustomVar<short> _moodsmileyid, PlayerStatus _status, WrappedBool _havenbagshared)
		{

			base.PlayerState = _playerstate;
			base.LastConnection = _lastconnection;
			base.AchievementPoints = _achievementpoints;
			base.LeagueId = _leagueid;
			base.LadderPosition = _ladderposition;
			base.AccountId = _accountid;
			base.AccountName = _accountname;
			this.PlayerId = _playerid;
			this.PlayerName = _playername;
			this.Level = _level;
			this.AlignmentSide = _alignmentside;
			this.Breed = _breed;
			this.Sex = _sex;
			this.GuildInfo = _guildinfo;
			this.MoodSmileyId = _moodsmileyid;
			this.Status = _status;
			this.HavenBagShared = _havenbagshared;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(PlayerId);
			size += DofusBinaryFactory.Sizing.SizeOf(PlayerName);
			size += DofusBinaryFactory.Sizing.SizeOf(Level);
			size += DofusBinaryFactory.Sizing.SizeOf(AlignmentSide);
			size += DofusBinaryFactory.Sizing.SizeOf(Breed);
			size++;
			var serialized1 = this.GuildInfo.Serialize();
			size += serialized1.Length;
			size += DofusBinaryFactory.Sizing.SizeOf(MoodSmileyId);
			size += 2;
			var serialized2 = this.Status.Serialize();
			size += serialized2.Length;
			size++;
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			byte box = 0;
			box = writer.SetFlag(box,0,this.Sex);
			box = writer.SetFlag(box,1,this.HavenBagShared);
			writer.WriteData(box);
			writer.WriteData(this.PlayerId);
			writer.WriteData(this.PlayerName);
			writer.WriteData(this.Level);
			writer.WriteData(this.AlignmentSide);
			writer.WriteData(this.Breed);
			writer.WriteDatas(serialized1);
			writer.WriteData(this.MoodSmileyId);
			writer.WriteData((short)(Status.ProtocolId));
			writer.WriteDatas(serialized2);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			byte box = reader.Read<byte>();
			this.Sex = reader.ReadFlag(box,0);
			this.HavenBagShared = reader.ReadFlag(box,1);
			this.PlayerId = reader.Read<CustomVar<long>>();
			this.PlayerName = reader.Read<string>();
			this.Level = reader.Read<CustomVar<short>>();
			this.AlignmentSide = reader.Read<byte>();
			this.Breed = reader.Read<byte>();
			this.GuildInfo = new GuildInformations();
			this.GuildInfo.Deserialize(reader);
			this.MoodSmileyId = reader.Read<CustomVar<short>>();
			reader.Skip(2); // skip protocolManager.GetInstance(short)
			this.Status = new PlayerStatus();
			this.Status.Deserialize(reader);

		}


	}
}
