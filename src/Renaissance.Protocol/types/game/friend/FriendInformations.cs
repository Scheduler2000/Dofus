//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:58.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.friend
{
	public class FriendInformations : AbstractContactInformations, IDofusType
	{
		public new const int NetworkId = 78;
		public new int ProtocolId { get { return NetworkId; } }

		public byte PlayerState { get; set; }

		public CustomVar<short> LastConnection { get; set; }

		public int AchievementPoints { get; set; }

		public CustomVar<short> LeagueId { get; set; }

		public int LadderPosition { get; set; }


		public FriendInformations() { }


		public FriendInformations InitFriendInformations(int _accountid, string _accountname, byte _playerstate, CustomVar<short> _lastconnection, int _achievementpoints, CustomVar<short> _leagueid, int _ladderposition)
		{

			base.AccountId = _accountid;
			base.AccountName = _accountname;
			this.PlayerState = _playerstate;
			this.LastConnection = _lastconnection;
			this.AchievementPoints = _achievementpoints;
			this.LeagueId = _leagueid;
			this.LadderPosition = _ladderposition;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(PlayerState);
			size += DofusBinaryFactory.Sizing.SizeOf(LastConnection);
			size += DofusBinaryFactory.Sizing.SizeOf(AchievementPoints);
			size += DofusBinaryFactory.Sizing.SizeOf(LeagueId);
			size += DofusBinaryFactory.Sizing.SizeOf(LadderPosition);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.PlayerState);
			writer.WriteData(this.LastConnection);
			writer.WriteData(this.AchievementPoints);
			writer.WriteData(this.LeagueId);
			writer.WriteData(this.LadderPosition);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.PlayerState = reader.Read<byte>();
			this.LastConnection = reader.Read<CustomVar<short>>();
			this.AchievementPoints = reader.Read<int>();
			this.LeagueId = reader.Read<CustomVar<short>>();
			this.LadderPosition = reader.Read<int>();

		}


	}
}
