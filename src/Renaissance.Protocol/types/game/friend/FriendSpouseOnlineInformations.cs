//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:58.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.roleplay;
using    Renaissance.Protocol.types.game.look;

namespace Renaissance.Protocol.types.game.friend
{
	public class FriendSpouseOnlineInformations : FriendSpouseInformations, IDofusType
	{
		public new const int NetworkId = 93;
		public new int ProtocolId { get { return NetworkId; } }

		public double MapId { get; set; }

		public CustomVar<short> SubAreaId { get; set; }

		public WrappedBool InFight { get; set; }

		public WrappedBool FollowSpouse { get; set; }


		public FriendSpouseOnlineInformations() { }


		public FriendSpouseOnlineInformations InitFriendSpouseOnlineInformations(int _spouseaccountid, CustomVar<long> _spouseid, string _spousename, CustomVar<short> _spouselevel, byte _breed, byte _sex, EntityLook _spouseentitylook, GuildInformations _guildinfo, byte _alignmentside, double _mapid, CustomVar<short> _subareaid, WrappedBool _infight, WrappedBool _followspouse)
		{

			base.SpouseAccountId = _spouseaccountid;
			base.SpouseId = _spouseid;
			base.SpouseName = _spousename;
			base.SpouseLevel = _spouselevel;
			base.Breed = _breed;
			base.Sex = _sex;
			base.SpouseEntityLook = _spouseentitylook;
			base.GuildInfo = _guildinfo;
			base.AlignmentSide = _alignmentside;
			this.MapId = _mapid;
			this.SubAreaId = _subareaid;
			this.InFight = _infight;
			this.FollowSpouse = _followspouse;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(MapId);
			size += DofusBinaryFactory.Sizing.SizeOf(SubAreaId);
			size++;
			size++;
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			byte box = 0;
			box = writer.SetFlag(box,0,this.InFight);
			box = writer.SetFlag(box,1,this.FollowSpouse);
			writer.WriteData(box);
			writer.WriteData(this.MapId);
			writer.WriteData(this.SubAreaId);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			byte box = reader.Read<byte>();
			this.InFight = reader.ReadFlag(box,0);
			this.FollowSpouse = reader.ReadFlag(box,1);
			this.MapId = reader.Read<double>();
			this.SubAreaId = reader.Read<CustomVar<short>>();

		}


	}
}
