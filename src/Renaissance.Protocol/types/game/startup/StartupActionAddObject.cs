//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:29.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.data.items;

namespace Renaissance.Protocol.types.game.startup
{
	public class StartupActionAddObject : IDofusType
	{
		public  const int NetworkId = 52;
		public  int ProtocolId { get { return NetworkId; } }

		public int Uid { get; set; }

		public string Title { get; set; }

		public string Text { get; set; }

		public string DescUrl { get; set; }

		public string PictureUrl { get; set; }

		public ObjectItemInformationWithQuantity[] Items { get; set; }


		public StartupActionAddObject() { }


		public StartupActionAddObject InitStartupActionAddObject(int _uid, string _title, string _text, string _descurl, string _pictureurl, ObjectItemInformationWithQuantity[] _items)
		{

			this.Uid = _uid;
			this.Title = _title;
			this.Text = _text;
			this.DescUrl = _descurl;
			this.PictureUrl = _pictureurl;
			this.Items = _items;

			return this;
		}

		public  byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(this.Uid);
			writer.Write(this.Title);
			writer.Write(this.Text);
			writer.Write(this.DescUrl);
			writer.Write(this.PictureUrl);
			writer.Write((short)(this.Items.Length));
			foreach(var obj in Items)
			{
				writer.Write(obj.Serialize());
			}

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.Uid = reader.Read<int>();
			this.Title = reader.Read<string>();
			this.Text = reader.Read<string>();
			this.DescUrl = reader.Read<string>();
			this.PictureUrl = reader.Read<string>();
			int Items_length = reader.Read<short>();
			this.Items = new ObjectItemInformationWithQuantity[Items_length];
			for(int i = 0; i < Items_length; i++)
			{
				this.Items[i] = new ObjectItemInformationWithQuantity();
				this.Items[i].Deserialize(reader);
			}

		}


	}
}
