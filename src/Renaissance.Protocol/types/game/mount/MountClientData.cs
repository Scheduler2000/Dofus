//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:28.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.data.items.effects;

namespace Renaissance.Protocol.types.game.mount
{
	public class MountClientData : IDofusType
	{
		public  const int NetworkId = 178;
		public  int ProtocolId { get { return NetworkId; } }

		public double Id { get; set; }

		public CustomVar<int> Model { get; set; }

		public int[] Ancestor { get; set; }

		public int[] Behaviors { get; set; }

		public string Name { get; set; }

		public WrappedBool Sex { get; set; }

		public int OwnerId { get; set; }

		public CustomVar<long> Experience { get; set; }

		public CustomVar<long> ExperienceForLevel { get; set; }

		public double ExperienceForNextLevel { get; set; }

		public byte Level { get; set; }

		public WrappedBool IsRideable { get; set; }

		public CustomVar<int> MaxPods { get; set; }

		public WrappedBool IsWild { get; set; }

		public CustomVar<int> Stamina { get; set; }

		public CustomVar<int> StaminaMax { get; set; }

		public CustomVar<int> Maturity { get; set; }

		public CustomVar<int> MaturityForAdult { get; set; }

		public CustomVar<int> Energy { get; set; }

		public CustomVar<int> EnergyMax { get; set; }

		public int Serenity { get; set; }

		public int AggressivityMax { get; set; }

		public CustomVar<int> SerenityMax { get; set; }

		public CustomVar<int> Love { get; set; }

		public CustomVar<int> LoveMax { get; set; }

		public int FecondationTime { get; set; }

		public WrappedBool IsFecondationReady { get; set; }

		public int BoostLimiter { get; set; }

		public double BoostMax { get; set; }

		public int ReproductionCount { get; set; }

		public CustomVar<int> ReproductionCountMax { get; set; }

		public CustomVar<short> HarnessGID { get; set; }

		public WrappedBool UseHarnessColors { get; set; }

		public ObjectEffectInteger[] EffectList { get; set; }


		public MountClientData() { }


		public MountClientData InitMountClientData(double _id, CustomVar<int> _model, int[] _ancestor, int[] _behaviors, string _name, WrappedBool _sex, int _ownerid, CustomVar<long> _experience, CustomVar<long> _experienceforlevel, double _experiencefornextlevel, byte _level, WrappedBool _isrideable, CustomVar<int> _maxpods, WrappedBool _iswild, CustomVar<int> _stamina, CustomVar<int> _staminamax, CustomVar<int> _maturity, CustomVar<int> _maturityforadult, CustomVar<int> _energy, CustomVar<int> _energymax, int _serenity, int _aggressivitymax, CustomVar<int> _serenitymax, CustomVar<int> _love, CustomVar<int> _lovemax, int _fecondationtime, WrappedBool _isfecondationready, int _boostlimiter, double _boostmax, int _reproductioncount, CustomVar<int> _reproductioncountmax, CustomVar<short> _harnessgid, WrappedBool _useharnesscolors, ObjectEffectInteger[] _effectlist)
		{

			this.Id = _id;
			this.Model = _model;
			this.Ancestor = _ancestor;
			this.Behaviors = _behaviors;
			this.Name = _name;
			this.Sex = _sex;
			this.OwnerId = _ownerid;
			this.Experience = _experience;
			this.ExperienceForLevel = _experienceforlevel;
			this.ExperienceForNextLevel = _experiencefornextlevel;
			this.Level = _level;
			this.IsRideable = _isrideable;
			this.MaxPods = _maxpods;
			this.IsWild = _iswild;
			this.Stamina = _stamina;
			this.StaminaMax = _staminamax;
			this.Maturity = _maturity;
			this.MaturityForAdult = _maturityforadult;
			this.Energy = _energy;
			this.EnergyMax = _energymax;
			this.Serenity = _serenity;
			this.AggressivityMax = _aggressivitymax;
			this.SerenityMax = _serenitymax;
			this.Love = _love;
			this.LoveMax = _lovemax;
			this.FecondationTime = _fecondationtime;
			this.IsFecondationReady = _isfecondationready;
			this.BoostLimiter = _boostlimiter;
			this.BoostMax = _boostmax;
			this.ReproductionCount = _reproductioncount;
			this.ReproductionCountMax = _reproductioncountmax;
			this.HarnessGID = _harnessgid;
			this.UseHarnessColors = _useharnesscolors;
			this.EffectList = _effectlist;

			return this;
		}

		public  byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			byte box = 0;
			box = writer.SetFlag(box,0,this.Sex);
			box = writer.SetFlag(box,1,this.IsRideable);
			box = writer.SetFlag(box,2,this.IsWild);
			box = writer.SetFlag(box,3,this.IsFecondationReady);
			box = writer.SetFlag(box,4,this.UseHarnessColors);
			writer.Write(box);
			writer.Write(this.Id);
			writer.Write(this.Model);
			writer.Write((short)(this.Ancestor.Length));
			foreach(var item in Ancestor)
				writer.Write(item);
			writer.Write((short)(this.Behaviors.Length));
			foreach(var item in Behaviors)
				writer.Write(item);
			writer.Write(this.Name);
			writer.Write(this.OwnerId);
			writer.Write(this.Experience);
			writer.Write(this.ExperienceForLevel);
			writer.Write(this.ExperienceForNextLevel);
			writer.Write(this.Level);
			writer.Write(this.MaxPods);
			writer.Write(this.Stamina);
			writer.Write(this.StaminaMax);
			writer.Write(this.Maturity);
			writer.Write(this.MaturityForAdult);
			writer.Write(this.Energy);
			writer.Write(this.EnergyMax);
			writer.Write(this.Serenity);
			writer.Write(this.AggressivityMax);
			writer.Write(this.SerenityMax);
			writer.Write(this.Love);
			writer.Write(this.LoveMax);
			writer.Write(this.FecondationTime);
			writer.Write(this.BoostLimiter);
			writer.Write(this.BoostMax);
			writer.Write(this.ReproductionCount);
			writer.Write(this.ReproductionCountMax);
			writer.Write(this.HarnessGID);
			writer.Write((short)(this.EffectList.Length));
			foreach(var obj in EffectList)
			{
				writer.Write(obj.Serialize());
			}

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			byte box = reader.Read<byte>();
			this.Sex = reader.ReadFlag(box,0);
			this.IsRideable = reader.ReadFlag(box,1);
			this.IsWild = reader.ReadFlag(box,2);
			this.IsFecondationReady = reader.ReadFlag(box,3);
			this.UseHarnessColors = reader.ReadFlag(box,4);
			this.Id = reader.Read<double>();
			this.Model = reader.Read<CustomVar<int>>();
			int Ancestor_length = reader.Read<short>();
			this.Ancestor = new int[Ancestor_length];
			for(int i = 0; i < Ancestor_length; i++)
				this.Ancestor[i] = reader.Read<int>();
			int Behaviors_length = reader.Read<short>();
			this.Behaviors = new int[Behaviors_length];
			for(int i = 0; i < Behaviors_length; i++)
				this.Behaviors[i] = reader.Read<int>();
			this.Name = reader.Read<string>();
			this.OwnerId = reader.Read<int>();
			this.Experience = reader.Read<CustomVar<long>>();
			this.ExperienceForLevel = reader.Read<CustomVar<long>>();
			this.ExperienceForNextLevel = reader.Read<double>();
			this.Level = reader.Read<byte>();
			this.MaxPods = reader.Read<CustomVar<int>>();
			this.Stamina = reader.Read<CustomVar<int>>();
			this.StaminaMax = reader.Read<CustomVar<int>>();
			this.Maturity = reader.Read<CustomVar<int>>();
			this.MaturityForAdult = reader.Read<CustomVar<int>>();
			this.Energy = reader.Read<CustomVar<int>>();
			this.EnergyMax = reader.Read<CustomVar<int>>();
			this.Serenity = reader.Read<int>();
			this.AggressivityMax = reader.Read<int>();
			this.SerenityMax = reader.Read<CustomVar<int>>();
			this.Love = reader.Read<CustomVar<int>>();
			this.LoveMax = reader.Read<CustomVar<int>>();
			this.FecondationTime = reader.Read<int>();
			this.BoostLimiter = reader.Read<int>();
			this.BoostMax = reader.Read<double>();
			this.ReproductionCount = reader.Read<int>();
			this.ReproductionCountMax = reader.Read<CustomVar<int>>();
			this.HarnessGID = reader.Read<CustomVar<short>>();
			int EffectList_length = reader.Read<short>();
			this.EffectList = new ObjectEffectInteger[EffectList_length];
			for(int i = 0; i < EffectList_length; i++)
			{
				this.EffectList[i] = new ObjectEffectInteger();
				this.EffectList[i].Deserialize(reader);
			}

		}


	}
}
