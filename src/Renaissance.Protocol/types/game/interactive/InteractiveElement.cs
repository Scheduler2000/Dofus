//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:58.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.interactive
{
	public class InteractiveElement : IDofusType
	{
		public  const int NetworkId = 80;
		public  int ProtocolId { get { return NetworkId; } }

		public int ElementId { get; set; }

		public int ElementTypeId { get; set; }

		public InteractiveElementSkill[] EnabledSkills { get; set; }

		public InteractiveElementSkill[] DisabledSkills { get; set; }

		public bool OnCurrentMap { get; set; }


		public InteractiveElement() { }


		public InteractiveElement InitInteractiveElement(int _elementid, int _elementtypeid, InteractiveElementSkill[] _enabledskills, InteractiveElementSkill[] _disabledskills, bool _oncurrentmap)
		{

			this.ElementId = _elementid;
			this.ElementTypeId = _elementtypeid;
			this.EnabledSkills = _enabledskills;
			this.DisabledSkills = _disabledskills;
			this.OnCurrentMap = _oncurrentmap;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(ElementId);
			size += DofusBinaryFactory.Sizing.SizeOf(ElementTypeId);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.EnabledSkills.Length));
			var memory1 = new Memory<byte>[EnabledSkills.Length];
			for(int i = 0; i < EnabledSkills.Length; i++)
			{
				size += DofusBinaryFactory.Sizing.SizeOf((short)(this.EnabledSkills[i].ProtocolId));
				memory1[i] = this.EnabledSkills[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.DisabledSkills.Length));
			var memory2 = new Memory<byte>[DisabledSkills.Length];
			for(int i = 0; i < DisabledSkills.Length; i++)
			{
				size += DofusBinaryFactory.Sizing.SizeOf((short)(this.DisabledSkills[i].ProtocolId));
				memory2[i] = this.DisabledSkills[i].Serialize();
				size += memory2[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf(OnCurrentMap);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.ElementId);
			writer.WriteData(this.ElementTypeId);
			writer.WriteData((short)(this.EnabledSkills.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteData((short)(EnabledSkills[i].ProtocolId));
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData((short)(this.DisabledSkills.Length));
			for(int i = 0; i < memory2.Length; i++)
			{
				writer.WriteData((short)(DisabledSkills[i].ProtocolId));
				writer.WriteDatas(memory2[i]);
			}
			writer.WriteData(this.OnCurrentMap);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.ElementId = reader.Read<int>();
			this.ElementTypeId = reader.Read<int>();
			int EnabledSkills_length = reader.Read<short>();
			this.EnabledSkills = new InteractiveElementSkill[EnabledSkills_length];
			for(int i = 0; i < EnabledSkills_length; i++)
			{
			reader.Skip(2); // skip protocolManager.GetInstance(short)
				this.EnabledSkills[i] = new InteractiveElementSkill();
				this.EnabledSkills[i].Deserialize(reader);
			}
			int DisabledSkills_length = reader.Read<short>();
			this.DisabledSkills = new InteractiveElementSkill[DisabledSkills_length];
			for(int i = 0; i < DisabledSkills_length; i++)
			{
			reader.Skip(2); // skip protocolManager.GetInstance(short)
				this.DisabledSkills[i] = new InteractiveElementSkill();
				this.DisabledSkills[i].Deserialize(reader);
			}
			this.OnCurrentMap = reader.Read<bool>();

		}


	}
}
