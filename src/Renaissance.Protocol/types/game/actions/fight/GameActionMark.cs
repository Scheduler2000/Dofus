//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:59.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.actions.fight
{
	public class GameActionMark : IDofusType
	{
		public  const int NetworkId = 351;
		public  int ProtocolId { get { return NetworkId; } }

		public double MarkAuthorId { get; set; }

		public byte MarkTeamId { get; set; }

		public int MarkSpellId { get; set; }

		public short MarkSpellLevel { get; set; }

		public short MarkId { get; set; }

		public byte MarkType { get; set; }

		public short MarkimpactCell { get; set; }

		public GameActionMarkedCell[] Cells { get; set; }

		public bool Active { get; set; }


		public GameActionMark() { }


		public GameActionMark InitGameActionMark(double _markauthorid, byte _markteamid, int _markspellid, short _markspelllevel, short _markid, byte _marktype, short _markimpactcell, GameActionMarkedCell[] _cells, bool _active)
		{

			this.MarkAuthorId = _markauthorid;
			this.MarkTeamId = _markteamid;
			this.MarkSpellId = _markspellid;
			this.MarkSpellLevel = _markspelllevel;
			this.MarkId = _markid;
			this.MarkType = _marktype;
			this.MarkimpactCell = _markimpactcell;
			this.Cells = _cells;
			this.Active = _active;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(MarkAuthorId);
			size += DofusBinaryFactory.Sizing.SizeOf(MarkTeamId);
			size += DofusBinaryFactory.Sizing.SizeOf(MarkSpellId);
			size += DofusBinaryFactory.Sizing.SizeOf(MarkSpellLevel);
			size += DofusBinaryFactory.Sizing.SizeOf(MarkId);
			size += DofusBinaryFactory.Sizing.SizeOf(MarkType);
			size += DofusBinaryFactory.Sizing.SizeOf(MarkimpactCell);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Cells.Length));
			var memory1 = new Memory<byte>[Cells.Length];
			for(int i = 0; i < Cells.Length; i++)
			{
				memory1[i] = this.Cells[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf(Active);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.MarkAuthorId);
			writer.WriteData(this.MarkTeamId);
			writer.WriteData(this.MarkSpellId);
			writer.WriteData(this.MarkSpellLevel);
			writer.WriteData(this.MarkId);
			writer.WriteData(this.MarkType);
			writer.WriteData(this.MarkimpactCell);
			writer.WriteData((short)(this.Cells.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData(this.Active);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.MarkAuthorId = reader.Read<double>();
			this.MarkTeamId = reader.Read<byte>();
			this.MarkSpellId = reader.Read<int>();
			this.MarkSpellLevel = reader.Read<short>();
			this.MarkId = reader.Read<short>();
			this.MarkType = reader.Read<byte>();
			this.MarkimpactCell = reader.Read<short>();
			int Cells_length = reader.Read<short>();
			this.Cells = new GameActionMarkedCell[Cells_length];
			for(int i = 0; i < Cells_length; i++)
			{
				this.Cells[i] = new GameActionMarkedCell();
				this.Cells[i].Deserialize(reader);
			}
			this.Active = reader.Read<bool>();

		}


	}
}
