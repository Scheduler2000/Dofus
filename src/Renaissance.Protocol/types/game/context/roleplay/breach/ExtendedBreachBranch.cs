//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:01.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.roleplay;

namespace Renaissance.Protocol.types.game.context.roleplay.breach
{
	public class ExtendedBreachBranch : BreachBranch, IDofusType
	{
		public new const int NetworkId = 560;
		public new int ProtocolId { get { return NetworkId; } }

		public MonsterInGroupLightInformations[] Monsters { get; set; }

		public BreachReward[] Rewards { get; set; }

		public CustomVar<int> Modifier { get; set; }

		public CustomVar<int> Prize { get; set; }


		public ExtendedBreachBranch() { }


		public ExtendedBreachBranch InitExtendedBreachBranch(byte _room, int _element, MonsterInGroupLightInformations[] _bosses, double _map, MonsterInGroupLightInformations[] _monsters, BreachReward[] _rewards, CustomVar<int> _modifier, CustomVar<int> _prize)
		{

			base.Room = _room;
			base.Element = _element;
			base.Bosses = _bosses;
			base.Map = _map;
			this.Monsters = _monsters;
			this.Rewards = _rewards;
			this.Modifier = _modifier;
			this.Prize = _prize;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Monsters.Length));
			var memory1 = new Memory<byte>[Monsters.Length];
			for(int i = 0; i < Monsters.Length; i++)
			{
				memory1[i] = this.Monsters[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Rewards.Length));
			var memory2 = new Memory<byte>[Rewards.Length];
			for(int i = 0; i < Rewards.Length; i++)
			{
				memory2[i] = this.Rewards[i].Serialize();
				size += memory2[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf(Modifier);
			size += DofusBinaryFactory.Sizing.SizeOf(Prize);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData((short)(this.Monsters.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData((short)(this.Rewards.Length));
			for(int i = 0; i < memory2.Length; i++)
			{
				writer.WriteDatas(memory2[i]);
			}
			writer.WriteData(this.Modifier);
			writer.WriteData(this.Prize);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			int Monsters_length = reader.Read<short>();
			this.Monsters = new MonsterInGroupLightInformations[Monsters_length];
			for(int i = 0; i < Monsters_length; i++)
			{
				this.Monsters[i] = new MonsterInGroupLightInformations();
				this.Monsters[i].Deserialize(reader);
			}
			int Rewards_length = reader.Read<short>();
			this.Rewards = new BreachReward[Rewards_length];
			for(int i = 0; i < Rewards_length; i++)
			{
				this.Rewards[i] = new BreachReward();
				this.Rewards[i].Deserialize(reader);
			}
			this.Modifier = reader.Read<CustomVar<int>>();
			this.Prize = reader.Read<CustomVar<int>>();

		}


	}
}
