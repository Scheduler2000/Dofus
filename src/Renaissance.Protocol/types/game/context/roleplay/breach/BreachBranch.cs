//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:01.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.roleplay;

namespace Renaissance.Protocol.types.game.context.roleplay.breach
{
	public class BreachBranch : IDofusType
	{
		public  const int NetworkId = 558;
		public  int ProtocolId { get { return NetworkId; } }

		public byte Room { get; set; }

		public int Element { get; set; }

		public MonsterInGroupLightInformations[] Bosses { get; set; }

		public double Map { get; set; }


		public BreachBranch() { }


		public BreachBranch InitBreachBranch(byte _room, int _element, MonsterInGroupLightInformations[] _bosses, double _map)
		{

			this.Room = _room;
			this.Element = _element;
			this.Bosses = _bosses;
			this.Map = _map;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(Room);
			size += DofusBinaryFactory.Sizing.SizeOf(Element);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Bosses.Length));
			var memory1 = new Memory<byte>[Bosses.Length];
			for(int i = 0; i < Bosses.Length; i++)
			{
				memory1[i] = this.Bosses[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf(Map);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.Room);
			writer.WriteData(this.Element);
			writer.WriteData((short)(this.Bosses.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData(this.Map);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.Room = reader.Read<byte>();
			this.Element = reader.Read<int>();
			int Bosses_length = reader.Read<short>();
			this.Bosses = new MonsterInGroupLightInformations[Bosses_length];
			for(int i = 0; i < Bosses_length; i++)
			{
				this.Bosses[i] = new MonsterInGroupLightInformations();
				this.Bosses[i].Deserialize(reader);
			}
			this.Map = reader.Read<double>();

		}


	}
}
