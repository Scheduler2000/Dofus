//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:00.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context;
using    Renaissance.Protocol.types.game.look;

namespace Renaissance.Protocol.types.game.context.roleplay
{
	public class GameRolePlayMerchantInformations : GameRolePlayNamedActorInformations, IDofusType
	{
		public new const int NetworkId = 129;
		public new int ProtocolId { get { return NetworkId; } }

		public byte SellType { get; set; }

		public HumanOption[] Options { get; set; }


		public GameRolePlayMerchantInformations() { }


		public GameRolePlayMerchantInformations InitGameRolePlayMerchantInformations(byte _selltype, HumanOption[] _options)
		{

			this.SellType = _selltype;
			this.Options = _options;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(SellType);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Options.Length));
			var memory1 = new Memory<byte>[Options.Length];
			for(int i = 0; i < Options.Length; i++)
			{
				size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Options[i].ProtocolId));
				memory1[i] = this.Options[i].Serialize();
				size += memory1[i].Length;
			}
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.SellType);
			writer.WriteData((short)(this.Options.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteData((short)(Options[i].ProtocolId));
				writer.WriteDatas(memory1[i]);
			}

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.SellType = reader.Read<byte>();
			int Options_length = reader.Read<short>();
			this.Options = new HumanOption[Options_length];
			for(int i = 0; i < Options_length; i++)
			{
			reader.Skip(2); // skip protocolManager.GetInstance(short)
				this.Options[i] = new HumanOption();
				this.Options[i].Deserialize(reader);
			}

		}


	}
}
