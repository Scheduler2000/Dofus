//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:00.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context;
using    Renaissance.Protocol.types.game.look;

namespace Renaissance.Protocol.types.game.context.roleplay
{
	public class GameRolePlayGroupMonsterWaveInformations : GameRolePlayGroupMonsterInformations, IDofusType
	{
		public new const int NetworkId = 464;
		public new int ProtocolId { get { return NetworkId; } }

		public byte NbWaves { get; set; }

		public GroupMonsterStaticInformations[] Alternatives { get; set; }


		public GameRolePlayGroupMonsterWaveInformations() { }


		public GameRolePlayGroupMonsterWaveInformations InitGameRolePlayGroupMonsterWaveInformations(GroupMonsterStaticInformations _staticinfos, byte _lootshare, byte _alignmentside, WrappedBool _keyringbonus, WrappedBool _hashardcoredrop, WrappedBool _hasavarewardtoken, EntityLook _look, double _contextualid, EntityDispositionInformations _disposition, byte _nbwaves, GroupMonsterStaticInformations[] _alternatives)
		{

			base.StaticInfos = _staticinfos;
			base.LootShare = _lootshare;
			base.AlignmentSide = _alignmentside;
			base.KeyRingBonus = _keyringbonus;
			base.HasHardcoreDrop = _hashardcoredrop;
			base.HasAVARewardToken = _hasavarewardtoken;
			base.Look = _look;
			base.ContextualId = _contextualid;
			base.Disposition = _disposition;
			this.NbWaves = _nbwaves;
			this.Alternatives = _alternatives;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(NbWaves);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Alternatives.Length));
			var memory1 = new Memory<byte>[Alternatives.Length];
			for(int i = 0; i < Alternatives.Length; i++)
			{
				size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Alternatives[i].ProtocolId));
				memory1[i] = this.Alternatives[i].Serialize();
				size += memory1[i].Length;
			}
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.NbWaves);
			writer.WriteData((short)(this.Alternatives.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteData((short)(Alternatives[i].ProtocolId));
				writer.WriteDatas(memory1[i]);
			}

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.NbWaves = reader.Read<byte>();
			int Alternatives_length = reader.Read<short>();
			this.Alternatives = new GroupMonsterStaticInformations[Alternatives_length];
			for(int i = 0; i < Alternatives_length; i++)
			{
			reader.Skip(2); // skip protocolManager.GetInstance(short)
				this.Alternatives[i] = new GroupMonsterStaticInformations();
				this.Alternatives[i].Deserialize(reader);
			}

		}


	}
}
