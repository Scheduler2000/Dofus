//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:00.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context;
using    Renaissance.Protocol.types.game.look;

namespace Renaissance.Protocol.types.game.context.roleplay
{
	public class GameRolePlayGroupMonsterInformations : GameRolePlayActorInformations, IDofusType
	{
		public new const int NetworkId = 160;
		public new int ProtocolId { get { return NetworkId; } }

		public GroupMonsterStaticInformations StaticInfos { get; set; }

		public byte LootShare { get; set; }

		public byte AlignmentSide { get; set; }

		public WrappedBool KeyRingBonus { get; set; }

		public WrappedBool HasHardcoreDrop { get; set; }

		public WrappedBool HasAVARewardToken { get; set; }


		public GameRolePlayGroupMonsterInformations() { }


		public GameRolePlayGroupMonsterInformations InitGameRolePlayGroupMonsterInformations(EntityLook _look, double _contextualid, EntityDispositionInformations _disposition, GroupMonsterStaticInformations _staticinfos, byte _lootshare, byte _alignmentside, WrappedBool _keyringbonus, WrappedBool _hashardcoredrop, WrappedBool _hasavarewardtoken)
		{

			base.Look = _look;
			base.ContextualId = _contextualid;
			base.Disposition = _disposition;
			this.StaticInfos = _staticinfos;
			this.LootShare = _lootshare;
			this.AlignmentSide = _alignmentside;
			this.KeyRingBonus = _keyringbonus;
			this.HasHardcoreDrop = _hashardcoredrop;
			this.HasAVARewardToken = _hasavarewardtoken;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += 2;
			var serialized1 = this.StaticInfos.Serialize();
			size += serialized1.Length;
			size += DofusBinaryFactory.Sizing.SizeOf(LootShare);
			size += DofusBinaryFactory.Sizing.SizeOf(AlignmentSide);
			size++;
			size++;
			size++;
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			byte box = 0;
			box = writer.SetFlag(box,0,this.KeyRingBonus);
			box = writer.SetFlag(box,1,this.HasHardcoreDrop);
			box = writer.SetFlag(box,2,this.HasAVARewardToken);
			writer.WriteData(box);
			writer.WriteData((short)(StaticInfos.ProtocolId));
			writer.WriteDatas(serialized1);
			writer.WriteData(this.LootShare);
			writer.WriteData(this.AlignmentSide);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			byte box = reader.Read<byte>();
			this.KeyRingBonus = reader.ReadFlag(box,0);
			this.HasHardcoreDrop = reader.ReadFlag(box,1);
			this.HasAVARewardToken = reader.ReadFlag(box,2);
			reader.Skip(2); // skip protocolManager.GetInstance(short)
			this.StaticInfos = new GroupMonsterStaticInformations();
			this.StaticInfos.Deserialize(reader);
			this.LootShare = reader.Read<byte>();
			this.AlignmentSide = reader.Read<byte>();

		}


	}
}
