//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:32.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.look;

namespace Renaissance.Protocol.types.game.context.roleplay.party.entity
{
	public class PartyEntityMemberInformation : PartyEntityBaseInformation, IDofusType
	{
		public new const int NetworkId = 550;
		public new int ProtocolId { get { return NetworkId; } }

		public CustomVar<short> Initiative { get; set; }

		public CustomVar<int> LifePoints { get; set; }

		public CustomVar<int> MaxLifePoints { get; set; }

		public CustomVar<short> Prospecting { get; set; }

		public byte RegenRate { get; set; }


		public PartyEntityMemberInformation() { }


		public PartyEntityMemberInformation InitPartyEntityMemberInformation(CustomVar<short> _initiative, CustomVar<int> _lifepoints, CustomVar<int> _maxlifepoints, CustomVar<short> _prospecting, byte _regenrate)
		{

			this.Initiative = _initiative;
			this.LifePoints = _lifepoints;
			this.MaxLifePoints = _maxlifepoints;
			this.Prospecting = _prospecting;
			this.RegenRate = _regenrate;

			return this;
		}

		public new byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(base.Serialize());
			writer.Write(this.Initiative);
			writer.Write(this.LifePoints);
			writer.Write(this.MaxLifePoints);
			writer.Write(this.Prospecting);
			writer.Write(this.RegenRate);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.Initiative = reader.Read<CustomVar<short>>();
			this.LifePoints = reader.Read<CustomVar<int>>();
			this.MaxLifePoints = reader.Read<CustomVar<int>>();
			this.Prospecting = reader.Read<CustomVar<short>>();
			this.RegenRate = reader.Read<byte>();

		}


	}
}
