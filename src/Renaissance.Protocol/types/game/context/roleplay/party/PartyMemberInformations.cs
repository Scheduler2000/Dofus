//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:02.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.character.choice;
using    Renaissance.Protocol.types.game.character.status;
using    Renaissance.Protocol.types.game.context.roleplay.party.entity;
using    Renaissance.Protocol.types.game.look;

namespace Renaissance.Protocol.types.game.context.roleplay.party
{
	public class PartyMemberInformations : CharacterBaseInformations, IDofusType
	{
		public new const int NetworkId = 90;
		public new int ProtocolId { get { return NetworkId; } }

		public CustomVar<int> LifePoints { get; set; }

		public CustomVar<int> MaxLifePoints { get; set; }

		public CustomVar<short> Prospecting { get; set; }

		public byte RegenRate { get; set; }

		public CustomVar<short> Initiative { get; set; }

		public byte AlignmentSide { get; set; }

		public short WorldX { get; set; }

		public short WorldY { get; set; }

		public double MapId { get; set; }

		public CustomVar<short> SubAreaId { get; set; }

		public PlayerStatus Status { get; set; }

		public PartyEntityBaseInformation[] Entities { get; set; }


		public PartyMemberInformations() { }


		public PartyMemberInformations InitPartyMemberInformations(bool _sex, EntityLook _entitylook, byte _breed, CustomVar<short> _level, string _name, CustomVar<long> _id, CustomVar<int> _lifepoints, CustomVar<int> _maxlifepoints, CustomVar<short> _prospecting, byte _regenrate, CustomVar<short> _initiative, byte _alignmentside, short _worldx, short _worldy, double _mapid, CustomVar<short> _subareaid, PlayerStatus _status, PartyEntityBaseInformation[] _entities)
		{

			base.Sex = _sex;
			base.EntityLook = _entitylook;
			base.Breed = _breed;
			base.Level = _level;
			base.Name = _name;
			base.Id = _id;
			this.LifePoints = _lifepoints;
			this.MaxLifePoints = _maxlifepoints;
			this.Prospecting = _prospecting;
			this.RegenRate = _regenrate;
			this.Initiative = _initiative;
			this.AlignmentSide = _alignmentside;
			this.WorldX = _worldx;
			this.WorldY = _worldy;
			this.MapId = _mapid;
			this.SubAreaId = _subareaid;
			this.Status = _status;
			this.Entities = _entities;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(LifePoints);
			size += DofusBinaryFactory.Sizing.SizeOf(MaxLifePoints);
			size += DofusBinaryFactory.Sizing.SizeOf(Prospecting);
			size += DofusBinaryFactory.Sizing.SizeOf(RegenRate);
			size += DofusBinaryFactory.Sizing.SizeOf(Initiative);
			size += DofusBinaryFactory.Sizing.SizeOf(AlignmentSide);
			size += DofusBinaryFactory.Sizing.SizeOf(WorldX);
			size += DofusBinaryFactory.Sizing.SizeOf(WorldY);
			size += DofusBinaryFactory.Sizing.SizeOf(MapId);
			size += DofusBinaryFactory.Sizing.SizeOf(SubAreaId);
			size += 2;
			var serialized1 = this.Status.Serialize();
			size += serialized1.Length;
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Entities.Length));
			var memory1 = new Memory<byte>[Entities.Length];
			for(int i = 0; i < Entities.Length; i++)
			{
				size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Entities[i].ProtocolId));
				memory1[i] = this.Entities[i].Serialize();
				size += memory1[i].Length;
			}
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.LifePoints);
			writer.WriteData(this.MaxLifePoints);
			writer.WriteData(this.Prospecting);
			writer.WriteData(this.RegenRate);
			writer.WriteData(this.Initiative);
			writer.WriteData(this.AlignmentSide);
			writer.WriteData(this.WorldX);
			writer.WriteData(this.WorldY);
			writer.WriteData(this.MapId);
			writer.WriteData(this.SubAreaId);
			writer.WriteData((short)(Status.ProtocolId));
			writer.WriteDatas(serialized1);
			writer.WriteData((short)(this.Entities.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteData((short)(Entities[i].ProtocolId));
				writer.WriteDatas(memory1[i]);
			}

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.LifePoints = reader.Read<CustomVar<int>>();
			this.MaxLifePoints = reader.Read<CustomVar<int>>();
			this.Prospecting = reader.Read<CustomVar<short>>();
			this.RegenRate = reader.Read<byte>();
			this.Initiative = reader.Read<CustomVar<short>>();
			this.AlignmentSide = reader.Read<byte>();
			this.WorldX = reader.Read<short>();
			this.WorldY = reader.Read<short>();
			this.MapId = reader.Read<double>();
			this.SubAreaId = reader.Read<CustomVar<short>>();
			reader.Skip(2); // skip protocolManager.GetInstance(short)
			this.Status = new PlayerStatus();
			this.Status.Deserialize(reader);
			int Entities_length = reader.Read<short>();
			this.Entities = new PartyEntityBaseInformation[Entities_length];
			for(int i = 0; i < Entities_length; i++)
			{
			reader.Skip(2); // skip protocolManager.GetInstance(short)
				this.Entities[i] = new PartyEntityBaseInformation();
				this.Entities[i].Deserialize(reader);
			}

		}


	}
}
