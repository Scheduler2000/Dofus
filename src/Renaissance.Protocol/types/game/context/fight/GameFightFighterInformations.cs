//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:30.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using Renaissance.Binary;
using Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.context.fight
{
    public class GameFightFighterInformations : GameContextActorInformations, IDofusType
	{
		public new const int NetworkId = 143;
		public new int ProtocolId { get { return NetworkId; } }

		public GameContextBasicSpawnInformation SpawnInfo { get; set; }

		public byte Wave { get; set; }

		public GameFightMinimalStats Stats { get; set; }

		public CustomVar<short>[] PreviousPositions { get; set; }


		public GameFightFighterInformations() { }


		public GameFightFighterInformations InitGameFightFighterInformations(GameContextBasicSpawnInformation _spawninfo, byte _wave, GameFightMinimalStats _stats, CustomVar<short>[] _previouspositions)
		{

			this.SpawnInfo = _spawninfo;
			this.Wave = _wave;
			this.Stats = _stats;
			this.PreviousPositions = _previouspositions;

			return this;
		}

		public new byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(base.Serialize());
			writer.Write(this.SpawnInfo.Serialize());
			writer.Write(this.Wave);
			writer.Write((short)(Stats.ProtocolId));
			writer.Write(this.Stats.Serialize());
			writer.Write((short)(this.PreviousPositions.Length));
			foreach(var item in PreviousPositions)
				writer.Write(item);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.SpawnInfo = new GameContextBasicSpawnInformation();
			this.SpawnInfo.Deserialize(reader);
			this.Wave = reader.Read<byte>();
reader.Skip(2); // skip read short
			this.Stats = new GameFightMinimalStats();
			this.Stats.Deserialize(reader);
			int PreviousPositions_length = reader.Read<short>();
			this.PreviousPositions = new CustomVar<short>[PreviousPositions_length];
			for(int i = 0; i < PreviousPositions_length; i++)
				this.PreviousPositions[i] = reader.Read<CustomVar<short>>();

		}


	}
}
