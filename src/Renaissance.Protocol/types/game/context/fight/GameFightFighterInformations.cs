//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:00.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context;
using    Renaissance.Protocol.types.game.context;
using    Renaissance.Protocol.types.game.look;

namespace Renaissance.Protocol.types.game.context.fight
{
	public class GameFightFighterInformations : GameContextActorInformations, IDofusType
	{
		public new const int NetworkId = 143;
		public new int ProtocolId { get { return NetworkId; } }

		public GameContextBasicSpawnInformation SpawnInfo { get; set; }

		public byte Wave { get; set; }

		public GameFightMinimalStats Stats { get; set; }

		public CustomVar<short>[] PreviousPositions { get; set; }


		public GameFightFighterInformations() { }


		public GameFightFighterInformations InitGameFightFighterInformations(EntityLook _look, double _contextualid, EntityDispositionInformations _disposition, GameContextBasicSpawnInformation _spawninfo, byte _wave, GameFightMinimalStats _stats, CustomVar<short>[] _previouspositions)
		{

			base.Look = _look;
			base.ContextualId = _contextualid;
			base.Disposition = _disposition;
			this.SpawnInfo = _spawninfo;
			this.Wave = _wave;
			this.Stats = _stats;
			this.PreviousPositions = _previouspositions;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			var serialized1 = this.SpawnInfo.Serialize();
			size += serialized1.Length;
			size += DofusBinaryFactory.Sizing.SizeOf(Wave);
			size += 2;
			var serialized2 = this.Stats.Serialize();
			size += serialized2.Length;
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.PreviousPositions.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(PreviousPositions);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteDatas(serialized1);
			writer.WriteData(this.Wave);
			writer.WriteData((short)(Stats.ProtocolId));
			writer.WriteDatas(serialized2);
			writer.WriteData((short)(this.PreviousPositions.Length));
			writer.WriteDatas(PreviousPositions);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.SpawnInfo = new GameContextBasicSpawnInformation();
			this.SpawnInfo.Deserialize(reader);
			this.Wave = reader.Read<byte>();
			reader.Skip(2); // skip protocolManager.GetInstance(short)
			this.Stats = new GameFightMinimalStats();
			this.Stats.Deserialize(reader);
			int PreviousPositions_length = reader.Read<short>();
			this.PreviousPositions = new CustomVar<short>[PreviousPositions_length];
			for(int i = 0; i < PreviousPositions_length; i++)
				this.PreviousPositions[i] = reader.Read<CustomVar<short>>();

		}


	}
}
