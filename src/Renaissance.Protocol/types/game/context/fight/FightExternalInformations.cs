//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:59.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using System;
using Renaissance.Binary;
using Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.context.fight
{
    public class FightExternalInformations : IDofusType
    {
        public const int NetworkId = 117;
        public int ProtocolId { get { return NetworkId; } }

        public CustomVar<short> FightId { get; set; }

        public byte FightType { get; set; }

        public int FightStart { get; set; }

        public bool FightSpectatorLocked { get; set; }

        public FightTeamLightInformations[] FightTeams { get; set; }

        public FightOptionsInformations[] FightTeamsOptions { get; set; }


        public FightExternalInformations() { }


        public FightExternalInformations InitFightExternalInformations(CustomVar<short> _fightid, byte _fighttype, int _fightstart, bool _fightspectatorlocked, FightTeamLightInformations[] _fightteams, FightOptionsInformations[] _fightteamsoptions)
        {

            this.FightId = _fightid;
            this.FightType = _fighttype;
            this.FightStart = _fightstart;
            this.FightSpectatorLocked = _fightspectatorlocked;
            this.FightTeams = _fightteams;
            this.FightTeamsOptions = _fightteamsoptions;

            return this;
        }

        public Memory<byte> Serialize()
        {

            int size = default;

            size += DofusBinaryFactory.Sizing.SizeOf(FightId);
            size += DofusBinaryFactory.Sizing.SizeOf(FightType);
            size += DofusBinaryFactory.Sizing.SizeOf(FightStart);
            size += DofusBinaryFactory.Sizing.SizeOf(FightSpectatorLocked);
            var memory1 = new Memory<byte>[FightTeams.Length];
            for (int i = 0; i < FightTeams.Length; i++)
            {
                memory1[i] = this.FightTeams[i].Serialize();
                size += memory1[i].Length;
            }
            var memory2 = new Memory<byte>[FightTeamsOptions.Length];
            for (int i = 0; i < FightTeamsOptions.Length; i++)
            {
                memory2[i] = this.FightTeamsOptions[i].Serialize();
                size += memory2[i].Length;
            }


            using DofusWriter writer = new DofusWriter(size);

            writer.WriteData(this.FightId);
            writer.WriteData(this.FightType);
            writer.WriteData(this.FightStart);
            writer.WriteData(this.FightSpectatorLocked);
            for (int i = 0; i < memory1.Length; i++)
            {
                writer.WriteDatas(memory1[i]);
            }
            for (int i = 0; i < memory2.Length; i++)
            {
                writer.WriteDatas(memory2[i]);
            }

            return writer.Data;
        }
        public void Deserialize(DofusReader reader)
        {

            this.FightId = reader.Read<CustomVar<short>>();
            this.FightType = reader.Read<byte>();
            this.FightStart = reader.Read<int>();
            this.FightSpectatorLocked = reader.Read<bool>();

            for (int i = 0; i < 2; i++)
            {
                this.FightTeams[i] = new FightTeamLightInformations();
                this.FightTeams[i].Deserialize(reader);
            }

            for (int i = 0; i < 2; i++)
            {
                this.FightTeamsOptions[i] = new FightOptionsInformations();
                this.FightTeamsOptions[i].Deserialize(reader);
            }
        }
    }
}
