//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:29.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.context.fight
{
	public class FightExternalInformations : IDofusType
	{
		public  const int NetworkId = 117;
		public  int ProtocolId { get { return NetworkId; } }

		public CustomVar<short> FightId { get; set; }

		public byte FightType { get; set; }

		public int FightStart { get; set; }

		public bool FightSpectatorLocked { get; set; }

		public FightTeamLightInformations[] FightTeams { get; set; }

		public FightOptionsInformations[] FightTeamsOptions { get; set; }


		public FightExternalInformations() { }


		public FightExternalInformations InitFightExternalInformations(CustomVar<short> _fightid, byte _fighttype, int _fightstart, bool _fightspectatorlocked, FightTeamLightInformations[] _fightteams, FightOptionsInformations[] _fightteamsoptions)
		{

			this.FightId = _fightid;
			this.FightType = _fighttype;
			this.FightStart = _fightstart;
			this.FightSpectatorLocked = _fightspectatorlocked;
			this.FightTeams = _fightteams;
			this.FightTeamsOptions = _fightteamsoptions;

			return this;
		}

		public  byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(this.FightId);
			writer.Write(this.FightType);
			writer.Write(this.FightStart);
			writer.Write(this.FightSpectatorLocked);
			foreach(var obj in FightTeams)
			{
				writer.Write(obj.Serialize());
			}
			foreach(var obj in FightTeamsOptions)
			{
				writer.Write(obj.Serialize());
			}

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.FightId = reader.Read<CustomVar<short>>();
			this.FightType = reader.Read<byte>();
			this.FightStart = reader.Read<int>();
			this.FightSpectatorLocked = reader.Read<bool>();
		   
            for(int i = 0; i < 2; i++)
            {
                this.FightTeams[i] = new FightTeamLightInformations();
                this.FightTeams[i].Deserialize(reader);
            }

            for (int i = 0; i < 2; i++)
            {
                this.FightTeamsOptions[i] = new FightOptionsInformations();
                this.FightTeamsOptions[i].Deserialize(reader);
            }
        }


	}
}
