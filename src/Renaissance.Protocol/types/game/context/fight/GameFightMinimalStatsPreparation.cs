//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:00.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.context.fight
{
	public class GameFightMinimalStatsPreparation : GameFightMinimalStats, IDofusType
	{
		public new const int NetworkId = 360;
		public new int ProtocolId { get { return NetworkId; } }

		public CustomVar<int> Initiative { get; set; }


		public GameFightMinimalStatsPreparation() { }


		public GameFightMinimalStatsPreparation InitGameFightMinimalStatsPreparation(CustomVar<int> _lifepoints, CustomVar<int> _maxlifepoints, CustomVar<int> _basemaxlifepoints, CustomVar<int> _permanentdamagepercent, CustomVar<int> _shieldpoints, CustomVar<short> _actionpoints, CustomVar<short> _maxactionpoints, CustomVar<short> _movementpoints, CustomVar<short> _maxmovementpoints, double _summoner, bool _summoned, CustomVar<short> _neutralelementresistpercent, CustomVar<short> _earthelementresistpercent, CustomVar<short> _waterelementresistpercent, CustomVar<short> _airelementresistpercent, CustomVar<short> _fireelementresistpercent, CustomVar<short> _neutralelementreduction, CustomVar<short> _earthelementreduction, CustomVar<short> _waterelementreduction, CustomVar<short> _airelementreduction, CustomVar<short> _fireelementreduction, CustomVar<short> _criticaldamagefixedresist, CustomVar<short> _pushdamagefixedresist, CustomVar<short> _pvpneutralelementresistpercent, CustomVar<short> _pvpearthelementresistpercent, CustomVar<short> _pvpwaterelementresistpercent, CustomVar<short> _pvpairelementresistpercent, CustomVar<short> _pvpfireelementresistpercent, CustomVar<short> _pvpneutralelementreduction, CustomVar<short> _pvpearthelementreduction, CustomVar<short> _pvpwaterelementreduction, CustomVar<short> _pvpairelementreduction, CustomVar<short> _pvpfireelementreduction, CustomVar<short> _dodgepalostprobability, CustomVar<short> _dodgepmlostprobability, CustomVar<short> _tackleblock, CustomVar<short> _tackleevade, CustomVar<short> _fixeddamagereflection, byte _invisibilitystate, CustomVar<short> _meleedamagereceivedpercent, CustomVar<short> _rangeddamagereceivedpercent, CustomVar<short> _weapondamagereceivedpercent, CustomVar<short> _spelldamagereceivedpercent, CustomVar<int> _initiative)
		{

			base.LifePoints = _lifepoints;
			base.MaxLifePoints = _maxlifepoints;
			base.BaseMaxLifePoints = _basemaxlifepoints;
			base.PermanentDamagePercent = _permanentdamagepercent;
			base.ShieldPoints = _shieldpoints;
			base.ActionPoints = _actionpoints;
			base.MaxActionPoints = _maxactionpoints;
			base.MovementPoints = _movementpoints;
			base.MaxMovementPoints = _maxmovementpoints;
			base.Summoner = _summoner;
			base.Summoned = _summoned;
			base.NeutralElementResistPercent = _neutralelementresistpercent;
			base.EarthElementResistPercent = _earthelementresistpercent;
			base.WaterElementResistPercent = _waterelementresistpercent;
			base.AirElementResistPercent = _airelementresistpercent;
			base.FireElementResistPercent = _fireelementresistpercent;
			base.NeutralElementReduction = _neutralelementreduction;
			base.EarthElementReduction = _earthelementreduction;
			base.WaterElementReduction = _waterelementreduction;
			base.AirElementReduction = _airelementreduction;
			base.FireElementReduction = _fireelementreduction;
			base.CriticalDamageFixedResist = _criticaldamagefixedresist;
			base.PushDamageFixedResist = _pushdamagefixedresist;
			base.PvpNeutralElementResistPercent = _pvpneutralelementresistpercent;
			base.PvpEarthElementResistPercent = _pvpearthelementresistpercent;
			base.PvpWaterElementResistPercent = _pvpwaterelementresistpercent;
			base.PvpAirElementResistPercent = _pvpairelementresistpercent;
			base.PvpFireElementResistPercent = _pvpfireelementresistpercent;
			base.PvpNeutralElementReduction = _pvpneutralelementreduction;
			base.PvpEarthElementReduction = _pvpearthelementreduction;
			base.PvpWaterElementReduction = _pvpwaterelementreduction;
			base.PvpAirElementReduction = _pvpairelementreduction;
			base.PvpFireElementReduction = _pvpfireelementreduction;
			base.DodgePALostProbability = _dodgepalostprobability;
			base.DodgePMLostProbability = _dodgepmlostprobability;
			base.TackleBlock = _tackleblock;
			base.TackleEvade = _tackleevade;
			base.FixedDamageReflection = _fixeddamagereflection;
			base.InvisibilityState = _invisibilitystate;
			base.MeleeDamageReceivedPercent = _meleedamagereceivedpercent;
			base.RangedDamageReceivedPercent = _rangeddamagereceivedpercent;
			base.WeaponDamageReceivedPercent = _weapondamagereceivedpercent;
			base.SpellDamageReceivedPercent = _spelldamagereceivedpercent;
			this.Initiative = _initiative;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(Initiative);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.Initiative);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.Initiative = reader.Read<CustomVar<int>>();

		}


	}
}
