//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:00.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.roleplay;

namespace Renaissance.Protocol.types.game.context.fight
{
	public class FightResultTaxCollectorListEntry : FightResultFighterListEntry, IDofusType
	{
		public new const int NetworkId = 84;
		public new int ProtocolId { get { return NetworkId; } }

		public byte Level { get; set; }

		public BasicGuildInformations GuildInfo { get; set; }

		public int ExperienceForGuild { get; set; }


		public FightResultTaxCollectorListEntry() { }


		public FightResultTaxCollectorListEntry InitFightResultTaxCollectorListEntry(double _id, bool _alive, CustomVar<short> _outcome, byte _wave, FightLoot _rewards, byte _level, BasicGuildInformations _guildinfo, int _experienceforguild)
		{

			base.Id = _id;
			base.Alive = _alive;
			base.Outcome = _outcome;
			base.Wave = _wave;
			base.Rewards = _rewards;
			this.Level = _level;
			this.GuildInfo = _guildinfo;
			this.ExperienceForGuild = _experienceforguild;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(Level);
			var serialized1 = this.GuildInfo.Serialize();
			size += serialized1.Length;
			size += DofusBinaryFactory.Sizing.SizeOf(ExperienceForGuild);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.Level);
			writer.WriteDatas(serialized1);
			writer.WriteData(this.ExperienceForGuild);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.Level = reader.Read<byte>();
			this.GuildInfo = new BasicGuildInformations();
			this.GuildInfo.Deserialize(reader);
			this.ExperienceForGuild = reader.Read<int>();

		}


	}
}
