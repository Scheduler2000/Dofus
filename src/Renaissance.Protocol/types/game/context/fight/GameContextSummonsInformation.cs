//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:30.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.look;

namespace Renaissance.Protocol.types.game.context.fight
{
	public class GameContextSummonsInformation : IDofusType
	{
		public  const int NetworkId = 567;
		public  int ProtocolId { get { return NetworkId; } }

		public SpawnInformation SpawnInformation { get; set; }

		public byte Wave { get; set; }

		public EntityLook Look { get; set; }

		public GameFightMinimalStats Stats { get; set; }

		public GameContextBasicSpawnInformation[] Summons { get; set; }


		public GameContextSummonsInformation() { }


		public GameContextSummonsInformation InitGameContextSummonsInformation(SpawnInformation _spawninformation, byte _wave, EntityLook _look, GameFightMinimalStats _stats, GameContextBasicSpawnInformation[] _summons)
		{

			this.SpawnInformation = _spawninformation;
			this.Wave = _wave;
			this.Look = _look;
			this.Stats = _stats;
			this.Summons = _summons;

			return this;
		}

		public  byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write((short)(SpawnInformation.ProtocolId));
			writer.Write(this.SpawnInformation.Serialize());
			writer.Write(this.Wave);
			writer.Write(this.Look.Serialize());
			writer.Write((short)(Stats.ProtocolId));
			writer.Write(this.Stats.Serialize());
			writer.Write((short)(this.Summons.Length));
			foreach(var obj in Summons)
			{
				writer.Write((short)(obj.ProtocolId));
				writer.Write(obj.Serialize());
			}

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

reader.Skip(2); // skip read short
			this.SpawnInformation = new SpawnInformation();
			this.SpawnInformation.Deserialize(reader);
			this.Wave = reader.Read<byte>();
			this.Look = new EntityLook();
			this.Look.Deserialize(reader);
reader.Skip(2); // skip read short
			this.Stats = new GameFightMinimalStats();
			this.Stats.Deserialize(reader);
			int Summons_length = reader.Read<short>();
			this.Summons = new GameContextBasicSpawnInformation[Summons_length];
			for(int i = 0; i < Summons_length; i++)
			{
reader.Skip(2); // skip read short for protocolManager.GetInstance(short)
				this.Summons[i] = new GameContextBasicSpawnInformation();
				this.Summons[i].Deserialize(reader);
			}

		}


	}
}
