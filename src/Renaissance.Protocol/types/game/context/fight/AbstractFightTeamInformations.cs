//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:59.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.context.fight
{
	public class AbstractFightTeamInformations : IDofusType
	{
		public  const int NetworkId = 116;
		public  int ProtocolId { get { return NetworkId; } }

		public byte TeamId { get; set; }

		public double LeaderId { get; set; }

		public byte TeamSide { get; set; }

		public byte TeamTypeId { get; set; }

		public byte NbWaves { get; set; }


		public AbstractFightTeamInformations() { }


		public AbstractFightTeamInformations InitAbstractFightTeamInformations(byte _teamid, double _leaderid, byte _teamside, byte _teamtypeid, byte _nbwaves)
		{

			this.TeamId = _teamid;
			this.LeaderId = _leaderid;
			this.TeamSide = _teamside;
			this.TeamTypeId = _teamtypeid;
			this.NbWaves = _nbwaves;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(TeamId);
			size += DofusBinaryFactory.Sizing.SizeOf(LeaderId);
			size += DofusBinaryFactory.Sizing.SizeOf(TeamSide);
			size += DofusBinaryFactory.Sizing.SizeOf(TeamTypeId);
			size += DofusBinaryFactory.Sizing.SizeOf(NbWaves);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.TeamId);
			writer.WriteData(this.LeaderId);
			writer.WriteData(this.TeamSide);
			writer.WriteData(this.TeamTypeId);
			writer.WriteData(this.NbWaves);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.TeamId = reader.Read<byte>();
			this.LeaderId = reader.Read<double>();
			this.TeamSide = reader.Read<byte>();
			this.TeamTypeId = reader.Read<byte>();
			this.NbWaves = reader.Read<byte>();

		}


	}
}
