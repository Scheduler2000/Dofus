//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:00.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.context.fight
{
	public class GameFightMinimalStats : IDofusType
	{
		public  const int NetworkId = 31;
		public  int ProtocolId { get { return NetworkId; } }

		public CustomVar<int> LifePoints { get; set; }

		public CustomVar<int> MaxLifePoints { get; set; }

		public CustomVar<int> BaseMaxLifePoints { get; set; }

		public CustomVar<int> PermanentDamagePercent { get; set; }

		public CustomVar<int> ShieldPoints { get; set; }

		public CustomVar<short> ActionPoints { get; set; }

		public CustomVar<short> MaxActionPoints { get; set; }

		public CustomVar<short> MovementPoints { get; set; }

		public CustomVar<short> MaxMovementPoints { get; set; }

		public double Summoner { get; set; }

		public bool Summoned { get; set; }

		public CustomVar<short> NeutralElementResistPercent { get; set; }

		public CustomVar<short> EarthElementResistPercent { get; set; }

		public CustomVar<short> WaterElementResistPercent { get; set; }

		public CustomVar<short> AirElementResistPercent { get; set; }

		public CustomVar<short> FireElementResistPercent { get; set; }

		public CustomVar<short> NeutralElementReduction { get; set; }

		public CustomVar<short> EarthElementReduction { get; set; }

		public CustomVar<short> WaterElementReduction { get; set; }

		public CustomVar<short> AirElementReduction { get; set; }

		public CustomVar<short> FireElementReduction { get; set; }

		public CustomVar<short> CriticalDamageFixedResist { get; set; }

		public CustomVar<short> PushDamageFixedResist { get; set; }

		public CustomVar<short> PvpNeutralElementResistPercent { get; set; }

		public CustomVar<short> PvpEarthElementResistPercent { get; set; }

		public CustomVar<short> PvpWaterElementResistPercent { get; set; }

		public CustomVar<short> PvpAirElementResistPercent { get; set; }

		public CustomVar<short> PvpFireElementResistPercent { get; set; }

		public CustomVar<short> PvpNeutralElementReduction { get; set; }

		public CustomVar<short> PvpEarthElementReduction { get; set; }

		public CustomVar<short> PvpWaterElementReduction { get; set; }

		public CustomVar<short> PvpAirElementReduction { get; set; }

		public CustomVar<short> PvpFireElementReduction { get; set; }

		public CustomVar<short> DodgePALostProbability { get; set; }

		public CustomVar<short> DodgePMLostProbability { get; set; }

		public CustomVar<short> TackleBlock { get; set; }

		public CustomVar<short> TackleEvade { get; set; }

		public CustomVar<short> FixedDamageReflection { get; set; }

		public byte InvisibilityState { get; set; }

		public CustomVar<short> MeleeDamageReceivedPercent { get; set; }

		public CustomVar<short> RangedDamageReceivedPercent { get; set; }

		public CustomVar<short> WeaponDamageReceivedPercent { get; set; }

		public CustomVar<short> SpellDamageReceivedPercent { get; set; }


		public GameFightMinimalStats() { }


		public GameFightMinimalStats InitGameFightMinimalStats(CustomVar<int> _lifepoints, CustomVar<int> _maxlifepoints, CustomVar<int> _basemaxlifepoints, CustomVar<int> _permanentdamagepercent, CustomVar<int> _shieldpoints, CustomVar<short> _actionpoints, CustomVar<short> _maxactionpoints, CustomVar<short> _movementpoints, CustomVar<short> _maxmovementpoints, double _summoner, bool _summoned, CustomVar<short> _neutralelementresistpercent, CustomVar<short> _earthelementresistpercent, CustomVar<short> _waterelementresistpercent, CustomVar<short> _airelementresistpercent, CustomVar<short> _fireelementresistpercent, CustomVar<short> _neutralelementreduction, CustomVar<short> _earthelementreduction, CustomVar<short> _waterelementreduction, CustomVar<short> _airelementreduction, CustomVar<short> _fireelementreduction, CustomVar<short> _criticaldamagefixedresist, CustomVar<short> _pushdamagefixedresist, CustomVar<short> _pvpneutralelementresistpercent, CustomVar<short> _pvpearthelementresistpercent, CustomVar<short> _pvpwaterelementresistpercent, CustomVar<short> _pvpairelementresistpercent, CustomVar<short> _pvpfireelementresistpercent, CustomVar<short> _pvpneutralelementreduction, CustomVar<short> _pvpearthelementreduction, CustomVar<short> _pvpwaterelementreduction, CustomVar<short> _pvpairelementreduction, CustomVar<short> _pvpfireelementreduction, CustomVar<short> _dodgepalostprobability, CustomVar<short> _dodgepmlostprobability, CustomVar<short> _tackleblock, CustomVar<short> _tackleevade, CustomVar<short> _fixeddamagereflection, byte _invisibilitystate, CustomVar<short> _meleedamagereceivedpercent, CustomVar<short> _rangeddamagereceivedpercent, CustomVar<short> _weapondamagereceivedpercent, CustomVar<short> _spelldamagereceivedpercent)
		{

			this.LifePoints = _lifepoints;
			this.MaxLifePoints = _maxlifepoints;
			this.BaseMaxLifePoints = _basemaxlifepoints;
			this.PermanentDamagePercent = _permanentdamagepercent;
			this.ShieldPoints = _shieldpoints;
			this.ActionPoints = _actionpoints;
			this.MaxActionPoints = _maxactionpoints;
			this.MovementPoints = _movementpoints;
			this.MaxMovementPoints = _maxmovementpoints;
			this.Summoner = _summoner;
			this.Summoned = _summoned;
			this.NeutralElementResistPercent = _neutralelementresistpercent;
			this.EarthElementResistPercent = _earthelementresistpercent;
			this.WaterElementResistPercent = _waterelementresistpercent;
			this.AirElementResistPercent = _airelementresistpercent;
			this.FireElementResistPercent = _fireelementresistpercent;
			this.NeutralElementReduction = _neutralelementreduction;
			this.EarthElementReduction = _earthelementreduction;
			this.WaterElementReduction = _waterelementreduction;
			this.AirElementReduction = _airelementreduction;
			this.FireElementReduction = _fireelementreduction;
			this.CriticalDamageFixedResist = _criticaldamagefixedresist;
			this.PushDamageFixedResist = _pushdamagefixedresist;
			this.PvpNeutralElementResistPercent = _pvpneutralelementresistpercent;
			this.PvpEarthElementResistPercent = _pvpearthelementresistpercent;
			this.PvpWaterElementResistPercent = _pvpwaterelementresistpercent;
			this.PvpAirElementResistPercent = _pvpairelementresistpercent;
			this.PvpFireElementResistPercent = _pvpfireelementresistpercent;
			this.PvpNeutralElementReduction = _pvpneutralelementreduction;
			this.PvpEarthElementReduction = _pvpearthelementreduction;
			this.PvpWaterElementReduction = _pvpwaterelementreduction;
			this.PvpAirElementReduction = _pvpairelementreduction;
			this.PvpFireElementReduction = _pvpfireelementreduction;
			this.DodgePALostProbability = _dodgepalostprobability;
			this.DodgePMLostProbability = _dodgepmlostprobability;
			this.TackleBlock = _tackleblock;
			this.TackleEvade = _tackleevade;
			this.FixedDamageReflection = _fixeddamagereflection;
			this.InvisibilityState = _invisibilitystate;
			this.MeleeDamageReceivedPercent = _meleedamagereceivedpercent;
			this.RangedDamageReceivedPercent = _rangeddamagereceivedpercent;
			this.WeaponDamageReceivedPercent = _weapondamagereceivedpercent;
			this.SpellDamageReceivedPercent = _spelldamagereceivedpercent;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(LifePoints);
			size += DofusBinaryFactory.Sizing.SizeOf(MaxLifePoints);
			size += DofusBinaryFactory.Sizing.SizeOf(BaseMaxLifePoints);
			size += DofusBinaryFactory.Sizing.SizeOf(PermanentDamagePercent);
			size += DofusBinaryFactory.Sizing.SizeOf(ShieldPoints);
			size += DofusBinaryFactory.Sizing.SizeOf(ActionPoints);
			size += DofusBinaryFactory.Sizing.SizeOf(MaxActionPoints);
			size += DofusBinaryFactory.Sizing.SizeOf(MovementPoints);
			size += DofusBinaryFactory.Sizing.SizeOf(MaxMovementPoints);
			size += DofusBinaryFactory.Sizing.SizeOf(Summoner);
			size += DofusBinaryFactory.Sizing.SizeOf(Summoned);
			size += DofusBinaryFactory.Sizing.SizeOf(NeutralElementResistPercent);
			size += DofusBinaryFactory.Sizing.SizeOf(EarthElementResistPercent);
			size += DofusBinaryFactory.Sizing.SizeOf(WaterElementResistPercent);
			size += DofusBinaryFactory.Sizing.SizeOf(AirElementResistPercent);
			size += DofusBinaryFactory.Sizing.SizeOf(FireElementResistPercent);
			size += DofusBinaryFactory.Sizing.SizeOf(NeutralElementReduction);
			size += DofusBinaryFactory.Sizing.SizeOf(EarthElementReduction);
			size += DofusBinaryFactory.Sizing.SizeOf(WaterElementReduction);
			size += DofusBinaryFactory.Sizing.SizeOf(AirElementReduction);
			size += DofusBinaryFactory.Sizing.SizeOf(FireElementReduction);
			size += DofusBinaryFactory.Sizing.SizeOf(CriticalDamageFixedResist);
			size += DofusBinaryFactory.Sizing.SizeOf(PushDamageFixedResist);
			size += DofusBinaryFactory.Sizing.SizeOf(PvpNeutralElementResistPercent);
			size += DofusBinaryFactory.Sizing.SizeOf(PvpEarthElementResistPercent);
			size += DofusBinaryFactory.Sizing.SizeOf(PvpWaterElementResistPercent);
			size += DofusBinaryFactory.Sizing.SizeOf(PvpAirElementResistPercent);
			size += DofusBinaryFactory.Sizing.SizeOf(PvpFireElementResistPercent);
			size += DofusBinaryFactory.Sizing.SizeOf(PvpNeutralElementReduction);
			size += DofusBinaryFactory.Sizing.SizeOf(PvpEarthElementReduction);
			size += DofusBinaryFactory.Sizing.SizeOf(PvpWaterElementReduction);
			size += DofusBinaryFactory.Sizing.SizeOf(PvpAirElementReduction);
			size += DofusBinaryFactory.Sizing.SizeOf(PvpFireElementReduction);
			size += DofusBinaryFactory.Sizing.SizeOf(DodgePALostProbability);
			size += DofusBinaryFactory.Sizing.SizeOf(DodgePMLostProbability);
			size += DofusBinaryFactory.Sizing.SizeOf(TackleBlock);
			size += DofusBinaryFactory.Sizing.SizeOf(TackleEvade);
			size += DofusBinaryFactory.Sizing.SizeOf(FixedDamageReflection);
			size += DofusBinaryFactory.Sizing.SizeOf(InvisibilityState);
			size += DofusBinaryFactory.Sizing.SizeOf(MeleeDamageReceivedPercent);
			size += DofusBinaryFactory.Sizing.SizeOf(RangedDamageReceivedPercent);
			size += DofusBinaryFactory.Sizing.SizeOf(WeaponDamageReceivedPercent);
			size += DofusBinaryFactory.Sizing.SizeOf(SpellDamageReceivedPercent);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.LifePoints);
			writer.WriteData(this.MaxLifePoints);
			writer.WriteData(this.BaseMaxLifePoints);
			writer.WriteData(this.PermanentDamagePercent);
			writer.WriteData(this.ShieldPoints);
			writer.WriteData(this.ActionPoints);
			writer.WriteData(this.MaxActionPoints);
			writer.WriteData(this.MovementPoints);
			writer.WriteData(this.MaxMovementPoints);
			writer.WriteData(this.Summoner);
			writer.WriteData(this.Summoned);
			writer.WriteData(this.NeutralElementResistPercent);
			writer.WriteData(this.EarthElementResistPercent);
			writer.WriteData(this.WaterElementResistPercent);
			writer.WriteData(this.AirElementResistPercent);
			writer.WriteData(this.FireElementResistPercent);
			writer.WriteData(this.NeutralElementReduction);
			writer.WriteData(this.EarthElementReduction);
			writer.WriteData(this.WaterElementReduction);
			writer.WriteData(this.AirElementReduction);
			writer.WriteData(this.FireElementReduction);
			writer.WriteData(this.CriticalDamageFixedResist);
			writer.WriteData(this.PushDamageFixedResist);
			writer.WriteData(this.PvpNeutralElementResistPercent);
			writer.WriteData(this.PvpEarthElementResistPercent);
			writer.WriteData(this.PvpWaterElementResistPercent);
			writer.WriteData(this.PvpAirElementResistPercent);
			writer.WriteData(this.PvpFireElementResistPercent);
			writer.WriteData(this.PvpNeutralElementReduction);
			writer.WriteData(this.PvpEarthElementReduction);
			writer.WriteData(this.PvpWaterElementReduction);
			writer.WriteData(this.PvpAirElementReduction);
			writer.WriteData(this.PvpFireElementReduction);
			writer.WriteData(this.DodgePALostProbability);
			writer.WriteData(this.DodgePMLostProbability);
			writer.WriteData(this.TackleBlock);
			writer.WriteData(this.TackleEvade);
			writer.WriteData(this.FixedDamageReflection);
			writer.WriteData(this.InvisibilityState);
			writer.WriteData(this.MeleeDamageReceivedPercent);
			writer.WriteData(this.RangedDamageReceivedPercent);
			writer.WriteData(this.WeaponDamageReceivedPercent);
			writer.WriteData(this.SpellDamageReceivedPercent);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.LifePoints = reader.Read<CustomVar<int>>();
			this.MaxLifePoints = reader.Read<CustomVar<int>>();
			this.BaseMaxLifePoints = reader.Read<CustomVar<int>>();
			this.PermanentDamagePercent = reader.Read<CustomVar<int>>();
			this.ShieldPoints = reader.Read<CustomVar<int>>();
			this.ActionPoints = reader.Read<CustomVar<short>>();
			this.MaxActionPoints = reader.Read<CustomVar<short>>();
			this.MovementPoints = reader.Read<CustomVar<short>>();
			this.MaxMovementPoints = reader.Read<CustomVar<short>>();
			this.Summoner = reader.Read<double>();
			this.Summoned = reader.Read<bool>();
			this.NeutralElementResistPercent = reader.Read<CustomVar<short>>();
			this.EarthElementResistPercent = reader.Read<CustomVar<short>>();
			this.WaterElementResistPercent = reader.Read<CustomVar<short>>();
			this.AirElementResistPercent = reader.Read<CustomVar<short>>();
			this.FireElementResistPercent = reader.Read<CustomVar<short>>();
			this.NeutralElementReduction = reader.Read<CustomVar<short>>();
			this.EarthElementReduction = reader.Read<CustomVar<short>>();
			this.WaterElementReduction = reader.Read<CustomVar<short>>();
			this.AirElementReduction = reader.Read<CustomVar<short>>();
			this.FireElementReduction = reader.Read<CustomVar<short>>();
			this.CriticalDamageFixedResist = reader.Read<CustomVar<short>>();
			this.PushDamageFixedResist = reader.Read<CustomVar<short>>();
			this.PvpNeutralElementResistPercent = reader.Read<CustomVar<short>>();
			this.PvpEarthElementResistPercent = reader.Read<CustomVar<short>>();
			this.PvpWaterElementResistPercent = reader.Read<CustomVar<short>>();
			this.PvpAirElementResistPercent = reader.Read<CustomVar<short>>();
			this.PvpFireElementResistPercent = reader.Read<CustomVar<short>>();
			this.PvpNeutralElementReduction = reader.Read<CustomVar<short>>();
			this.PvpEarthElementReduction = reader.Read<CustomVar<short>>();
			this.PvpWaterElementReduction = reader.Read<CustomVar<short>>();
			this.PvpAirElementReduction = reader.Read<CustomVar<short>>();
			this.PvpFireElementReduction = reader.Read<CustomVar<short>>();
			this.DodgePALostProbability = reader.Read<CustomVar<short>>();
			this.DodgePMLostProbability = reader.Read<CustomVar<short>>();
			this.TackleBlock = reader.Read<CustomVar<short>>();
			this.TackleEvade = reader.Read<CustomVar<short>>();
			this.FixedDamageReflection = reader.Read<CustomVar<short>>();
			this.InvisibilityState = reader.Read<byte>();
			this.MeleeDamageReceivedPercent = reader.Read<CustomVar<short>>();
			this.RangedDamageReceivedPercent = reader.Read<CustomVar<short>>();
			this.WeaponDamageReceivedPercent = reader.Read<CustomVar<short>>();
			this.SpellDamageReceivedPercent = reader.Read<CustomVar<short>>();

		}


	}
}
