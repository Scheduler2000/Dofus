//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:00.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.character.status;
using    Renaissance.Protocol.types.game.context;
using    Renaissance.Protocol.types.game.look;

namespace Renaissance.Protocol.types.game.context.fight
{
	public class GameFightFighterNamedInformations : GameFightFighterInformations, IDofusType
	{
		public new const int NetworkId = 158;
		public new int ProtocolId { get { return NetworkId; } }

		public string Name { get; set; }

		public PlayerStatus Status { get; set; }

		public CustomVar<short> LeagueId { get; set; }

		public int LadderPosition { get; set; }

		public bool HiddenInPrefight { get; set; }


		public GameFightFighterNamedInformations() { }


		public GameFightFighterNamedInformations InitGameFightFighterNamedInformations(GameContextBasicSpawnInformation _spawninfo, byte _wave, GameFightMinimalStats _stats, CustomVar<short>[] _previouspositions, EntityLook _look, double _contextualid, EntityDispositionInformations _disposition, string _name, PlayerStatus _status, CustomVar<short> _leagueid, int _ladderposition, bool _hiddeninprefight)
		{

			base.SpawnInfo = _spawninfo;
			base.Wave = _wave;
			base.Stats = _stats;
			base.PreviousPositions = _previouspositions;
			base.Look = _look;
			base.ContextualId = _contextualid;
			base.Disposition = _disposition;
			this.Name = _name;
			this.Status = _status;
			this.LeagueId = _leagueid;
			this.LadderPosition = _ladderposition;
			this.HiddenInPrefight = _hiddeninprefight;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(Name);
			var serialized1 = this.Status.Serialize();
			size += serialized1.Length;
			size += DofusBinaryFactory.Sizing.SizeOf(LeagueId);
			size += DofusBinaryFactory.Sizing.SizeOf(LadderPosition);
			size += DofusBinaryFactory.Sizing.SizeOf(HiddenInPrefight);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.Name);
			writer.WriteDatas(serialized1);
			writer.WriteData(this.LeagueId);
			writer.WriteData(this.LadderPosition);
			writer.WriteData(this.HiddenInPrefight);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.Name = reader.Read<string>();
			this.Status = new PlayerStatus();
			this.Status.Deserialize(reader);
			this.LeagueId = reader.Read<CustomVar<short>>();
			this.LadderPosition = reader.Read<int>();
			this.HiddenInPrefight = reader.Read<bool>();

		}


	}
}
