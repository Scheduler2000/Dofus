//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:00.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.context.fight
{
	public class GameFightResumeSlaveInfo : IDofusType
	{
		public  const int NetworkId = 364;
		public  int ProtocolId { get { return NetworkId; } }

		public double SlaveId { get; set; }

		public GameFightSpellCooldown[] SpellCooldowns { get; set; }

		public byte SummonCount { get; set; }

		public byte BombCount { get; set; }


		public GameFightResumeSlaveInfo() { }


		public GameFightResumeSlaveInfo InitGameFightResumeSlaveInfo(double _slaveid, GameFightSpellCooldown[] _spellcooldowns, byte _summoncount, byte _bombcount)
		{

			this.SlaveId = _slaveid;
			this.SpellCooldowns = _spellcooldowns;
			this.SummonCount = _summoncount;
			this.BombCount = _bombcount;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(SlaveId);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.SpellCooldowns.Length));
			var memory1 = new Memory<byte>[SpellCooldowns.Length];
			for(int i = 0; i < SpellCooldowns.Length; i++)
			{
				memory1[i] = this.SpellCooldowns[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf(SummonCount);
			size += DofusBinaryFactory.Sizing.SizeOf(BombCount);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.SlaveId);
			writer.WriteData((short)(this.SpellCooldowns.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData(this.SummonCount);
			writer.WriteData(this.BombCount);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.SlaveId = reader.Read<double>();
			int SpellCooldowns_length = reader.Read<short>();
			this.SpellCooldowns = new GameFightSpellCooldown[SpellCooldowns_length];
			for(int i = 0; i < SpellCooldowns_length; i++)
			{
				this.SpellCooldowns[i] = new GameFightSpellCooldown();
				this.SpellCooldowns[i].Deserialize(reader);
			}
			this.SummonCount = reader.Read<byte>();
			this.BombCount = reader.Read<byte>();

		}


	}
}
