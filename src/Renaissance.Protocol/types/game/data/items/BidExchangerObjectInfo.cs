//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:31.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.data.items.effects;

namespace Renaissance.Protocol.types.game.data.items
{
	public class BidExchangerObjectInfo : IDofusType
	{
		public  const int NetworkId = 122;
		public  int ProtocolId { get { return NetworkId; } }

		public CustomVar<int> ObjectUID { get; set; }

		public CustomVar<short> ObjectGID { get; set; }

		public int ObjectType { get; set; }

		public ObjectEffect[] Effects { get; set; }

		public CustomVar<long>[] Prices { get; set; }


		public BidExchangerObjectInfo() { }


		public BidExchangerObjectInfo InitBidExchangerObjectInfo(CustomVar<int> _objectuid, CustomVar<short> _objectgid, int _objecttype, ObjectEffect[] _effects, CustomVar<long>[] _prices)
		{

			this.ObjectUID = _objectuid;
			this.ObjectGID = _objectgid;
			this.ObjectType = _objecttype;
			this.Effects = _effects;
			this.Prices = _prices;

			return this;
		}

		public  byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(this.ObjectUID);
			writer.Write(this.ObjectGID);
			writer.Write(this.ObjectType);
			writer.Write((short)(this.Effects.Length));
			foreach(var obj in Effects)
			{
				writer.Write((short)(obj.ProtocolId));
				writer.Write(obj.Serialize());
			}
			writer.Write((short)(this.Prices.Length));
			foreach(var item in Prices)
				writer.Write(item);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.ObjectUID = reader.Read<CustomVar<int>>();
			this.ObjectGID = reader.Read<CustomVar<short>>();
			this.ObjectType = reader.Read<int>();
			int Effects_length = reader.Read<short>();
			this.Effects = new ObjectEffect[Effects_length];
			for(int i = 0; i < Effects_length; i++)
			{
reader.Skip(2); // skip read short for protocolManager.GetInstance(short)
				this.Effects[i] = new ObjectEffect();
				this.Effects[i].Deserialize(reader);
			}
			int Prices_length = reader.Read<short>();
			this.Prices = new CustomVar<long>[Prices_length];
			for(int i = 0; i < Prices_length; i++)
				this.Prices[i] = reader.Read<CustomVar<long>>();

		}


	}
}
