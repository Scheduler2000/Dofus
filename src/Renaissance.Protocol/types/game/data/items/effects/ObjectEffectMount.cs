//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:32.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.data.items.effects
{
	public class ObjectEffectMount : ObjectEffect, IDofusType
	{
		public new const int NetworkId = 179;
		public new int ProtocolId { get { return NetworkId; } }

		public CustomVar<long> Id { get; set; }

		public CustomVar<long> ExpirationDate { get; set; }

		public CustomVar<int> Model { get; set; }

		public string Name { get; set; }

		public string Owner { get; set; }

		public byte Level { get; set; }

		public WrappedBool Sex { get; set; }

		public WrappedBool IsRideable { get; set; }

		public WrappedBool IsFeconded { get; set; }

		public WrappedBool IsFecondationReady { get; set; }

		public CustomVar<int> ReproductionCount { get; set; }

		public CustomVar<int> ReproductionCountMax { get; set; }

		public ObjectEffectInteger[] Effects { get; set; }

		public CustomVar<int>[] Capacities { get; set; }


		public ObjectEffectMount() { }


		public ObjectEffectMount InitObjectEffectMount(CustomVar<long> _id, CustomVar<long> _expirationdate, CustomVar<int> _model, string _name, string _owner, byte _level, WrappedBool _sex, WrappedBool _isrideable, WrappedBool _isfeconded, WrappedBool _isfecondationready, CustomVar<int> _reproductioncount, CustomVar<int> _reproductioncountmax, ObjectEffectInteger[] _effects, CustomVar<int>[] _capacities)
		{

			this.Id = _id;
			this.ExpirationDate = _expirationdate;
			this.Model = _model;
			this.Name = _name;
			this.Owner = _owner;
			this.Level = _level;
			this.Sex = _sex;
			this.IsRideable = _isrideable;
			this.IsFeconded = _isfeconded;
			this.IsFecondationReady = _isfecondationready;
			this.ReproductionCount = _reproductioncount;
			this.ReproductionCountMax = _reproductioncountmax;
			this.Effects = _effects;
			this.Capacities = _capacities;

			return this;
		}

		public new byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(base.Serialize());
			byte box = 0;
			box = writer.SetFlag(box,0,this.Sex);
			box = writer.SetFlag(box,1,this.IsRideable);
			box = writer.SetFlag(box,2,this.IsFeconded);
			box = writer.SetFlag(box,3,this.IsFecondationReady);
			writer.Write(box);
			writer.Write(this.Id);
			writer.Write(this.ExpirationDate);
			writer.Write(this.Model);
			writer.Write(this.Name);
			writer.Write(this.Owner);
			writer.Write(this.Level);
			writer.Write(this.ReproductionCount);
			writer.Write(this.ReproductionCountMax);
			writer.Write((short)(this.Effects.Length));
			foreach(var obj in Effects)
			{
				writer.Write(obj.Serialize());
			}
			writer.Write((short)(this.Capacities.Length));
			foreach(var item in Capacities)
				writer.Write(item);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			byte box = reader.Read<byte>();
			this.Sex = reader.ReadFlag(box,0);
			this.IsRideable = reader.ReadFlag(box,1);
			this.IsFeconded = reader.ReadFlag(box,2);
			this.IsFecondationReady = reader.ReadFlag(box,3);
			this.Id = reader.Read<CustomVar<long>>();
			this.ExpirationDate = reader.Read<CustomVar<long>>();
			this.Model = reader.Read<CustomVar<int>>();
			this.Name = reader.Read<string>();
			this.Owner = reader.Read<string>();
			this.Level = reader.Read<byte>();
			this.ReproductionCount = reader.Read<CustomVar<int>>();
			this.ReproductionCountMax = reader.Read<CustomVar<int>>();
			int Effects_length = reader.Read<short>();
			this.Effects = new ObjectEffectInteger[Effects_length];
			for(int i = 0; i < Effects_length; i++)
			{
				this.Effects[i] = new ObjectEffectInteger();
				this.Effects[i].Deserialize(reader);
			}
			int Capacities_length = reader.Read<short>();
			this.Capacities = new CustomVar<int>[Capacities_length];
			for(int i = 0; i < Capacities_length; i++)
				this.Capacities[i] = reader.Read<CustomVar<int>>();

		}


	}
}
