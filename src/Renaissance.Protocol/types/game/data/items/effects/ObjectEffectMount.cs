//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:02.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.data.items.effects
{
	public class ObjectEffectMount : ObjectEffect, IDofusType
	{
		public new const int NetworkId = 179;
		public new int ProtocolId { get { return NetworkId; } }

		public CustomVar<long> Id { get; set; }

		public CustomVar<long> ExpirationDate { get; set; }

		public CustomVar<int> Model { get; set; }

		public string Name { get; set; }

		public string Owner { get; set; }

		public byte Level { get; set; }

		public WrappedBool Sex { get; set; }

		public WrappedBool IsRideable { get; set; }

		public WrappedBool IsFeconded { get; set; }

		public WrappedBool IsFecondationReady { get; set; }

		public CustomVar<int> ReproductionCount { get; set; }

		public CustomVar<int> ReproductionCountMax { get; set; }

		public ObjectEffectInteger[] Effects { get; set; }

		public CustomVar<int>[] Capacities { get; set; }


		public ObjectEffectMount() { }


		public ObjectEffectMount InitObjectEffectMount(CustomVar<short> _actionid, CustomVar<long> _id, CustomVar<long> _expirationdate, CustomVar<int> _model, string _name, string _owner, byte _level, WrappedBool _sex, WrappedBool _isrideable, WrappedBool _isfeconded, WrappedBool _isfecondationready, CustomVar<int> _reproductioncount, CustomVar<int> _reproductioncountmax, ObjectEffectInteger[] _effects, CustomVar<int>[] _capacities)
		{

			base.ActionId = _actionid;
			this.Id = _id;
			this.ExpirationDate = _expirationdate;
			this.Model = _model;
			this.Name = _name;
			this.Owner = _owner;
			this.Level = _level;
			this.Sex = _sex;
			this.IsRideable = _isrideable;
			this.IsFeconded = _isfeconded;
			this.IsFecondationReady = _isfecondationready;
			this.ReproductionCount = _reproductioncount;
			this.ReproductionCountMax = _reproductioncountmax;
			this.Effects = _effects;
			this.Capacities = _capacities;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(Id);
			size += DofusBinaryFactory.Sizing.SizeOf(ExpirationDate);
			size += DofusBinaryFactory.Sizing.SizeOf(Model);
			size += DofusBinaryFactory.Sizing.SizeOf(Name);
			size += DofusBinaryFactory.Sizing.SizeOf(Owner);
			size += DofusBinaryFactory.Sizing.SizeOf(Level);
			size++;
			size++;
			size++;
			size++;
			size += DofusBinaryFactory.Sizing.SizeOf(ReproductionCount);
			size += DofusBinaryFactory.Sizing.SizeOf(ReproductionCountMax);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Effects.Length));
			var memory1 = new Memory<byte>[Effects.Length];
			for(int i = 0; i < Effects.Length; i++)
			{
				memory1[i] = this.Effects[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Capacities.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(Capacities);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			byte box = 0;
			box = writer.SetFlag(box,0,this.Sex);
			box = writer.SetFlag(box,1,this.IsRideable);
			box = writer.SetFlag(box,2,this.IsFeconded);
			box = writer.SetFlag(box,3,this.IsFecondationReady);
			writer.WriteData(box);
			writer.WriteData(this.Id);
			writer.WriteData(this.ExpirationDate);
			writer.WriteData(this.Model);
			writer.WriteData(this.Name);
			writer.WriteData(this.Owner);
			writer.WriteData(this.Level);
			writer.WriteData(this.ReproductionCount);
			writer.WriteData(this.ReproductionCountMax);
			writer.WriteData((short)(this.Effects.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData((short)(this.Capacities.Length));
			writer.WriteDatas(Capacities);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			byte box = reader.Read<byte>();
			this.Sex = reader.ReadFlag(box,0);
			this.IsRideable = reader.ReadFlag(box,1);
			this.IsFeconded = reader.ReadFlag(box,2);
			this.IsFecondationReady = reader.ReadFlag(box,3);
			this.Id = reader.Read<CustomVar<long>>();
			this.ExpirationDate = reader.Read<CustomVar<long>>();
			this.Model = reader.Read<CustomVar<int>>();
			this.Name = reader.Read<string>();
			this.Owner = reader.Read<string>();
			this.Level = reader.Read<byte>();
			this.ReproductionCount = reader.Read<CustomVar<int>>();
			this.ReproductionCountMax = reader.Read<CustomVar<int>>();
			int Effects_length = reader.Read<short>();
			this.Effects = new ObjectEffectInteger[Effects_length];
			for(int i = 0; i < Effects_length; i++)
			{
				this.Effects[i] = new ObjectEffectInteger();
				this.Effects[i].Deserialize(reader);
			}
			int Capacities_length = reader.Read<short>();
			this.Capacities = new CustomVar<int>[Capacities_length];
			for(int i = 0; i < Capacities_length; i++)
				this.Capacities[i] = reader.Read<CustomVar<int>>();

		}


	}
}
