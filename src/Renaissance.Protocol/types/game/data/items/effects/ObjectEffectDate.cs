//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:51:02.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.data.items.effects
{
	public class ObjectEffectDate : ObjectEffect, IDofusType
	{
		public new const int NetworkId = 72;
		public new int ProtocolId { get { return NetworkId; } }

		public CustomVar<short> Year { get; set; }

		public byte Month { get; set; }

		public byte Day { get; set; }

		public byte Hour { get; set; }

		public byte Minute { get; set; }


		public ObjectEffectDate() { }


		public ObjectEffectDate InitObjectEffectDate(CustomVar<short> _actionid, CustomVar<short> _year, byte _month, byte _day, byte _hour, byte _minute)
		{

			base.ActionId = _actionid;
			this.Year = _year;
			this.Month = _month;
			this.Day = _day;
			this.Hour = _hour;
			this.Minute = _minute;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(Year);
			size += DofusBinaryFactory.Sizing.SizeOf(Month);
			size += DofusBinaryFactory.Sizing.SizeOf(Day);
			size += DofusBinaryFactory.Sizing.SizeOf(Hour);
			size += DofusBinaryFactory.Sizing.SizeOf(Minute);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.Year);
			writer.WriteData(this.Month);
			writer.WriteData(this.Day);
			writer.WriteData(this.Hour);
			writer.WriteData(this.Minute);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.Year = reader.Read<CustomVar<short>>();
			this.Month = reader.Read<byte>();
			this.Day = reader.Read<byte>();
			this.Hour = reader.Read<byte>();
			this.Minute = reader.Read<byte>();

		}


	}
}
