//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:58.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.house
{
	public class HouseInstanceInformations : IDofusType
	{
		public  const int NetworkId = 511;
		public  int ProtocolId { get { return NetworkId; } }

		public int InstanceId { get; set; }

		public WrappedBool SecondHand { get; set; }

		public WrappedBool IsLocked { get; set; }

		public string OwnerName { get; set; }

		public CustomVar<long> Price { get; set; }

		public WrappedBool IsSaleLocked { get; set; }


		public HouseInstanceInformations() { }


		public HouseInstanceInformations InitHouseInstanceInformations(int _instanceid, WrappedBool _secondhand, WrappedBool _islocked, string _ownername, CustomVar<long> _price, WrappedBool _issalelocked)
		{

			this.InstanceId = _instanceid;
			this.SecondHand = _secondhand;
			this.IsLocked = _islocked;
			this.OwnerName = _ownername;
			this.Price = _price;
			this.IsSaleLocked = _issalelocked;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(InstanceId);
			size++;
			size++;
			size += DofusBinaryFactory.Sizing.SizeOf(OwnerName);
			size += DofusBinaryFactory.Sizing.SizeOf(Price);
			size++;


			using DofusWriter writer = new DofusWriter(size);

			byte box = 0;
			box = writer.SetFlag(box,0,this.SecondHand);
			box = writer.SetFlag(box,1,this.IsLocked);
			box = writer.SetFlag(box,2,this.IsSaleLocked);
			writer.WriteData(box);
			writer.WriteData(this.InstanceId);
			writer.WriteData(this.OwnerName);
			writer.WriteData(this.Price);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			byte box = reader.Read<byte>();
			this.SecondHand = reader.ReadFlag(box,0);
			this.IsLocked = reader.ReadFlag(box,1);
			this.IsSaleLocked = reader.ReadFlag(box,2);
			this.InstanceId = reader.Read<int>();
			this.OwnerName = reader.Read<string>();
			this.Price = reader.Read<CustomVar<long>>();

		}


	}
}
