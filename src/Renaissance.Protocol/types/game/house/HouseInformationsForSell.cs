//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:58.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.house
{
	public class HouseInformationsForSell : IDofusType
	{
		public  const int NetworkId = 221;
		public  int ProtocolId { get { return NetworkId; } }

		public int InstanceId { get; set; }

		public bool SecondHand { get; set; }

		public CustomVar<int> ModelId { get; set; }

		public string OwnerName { get; set; }

		public bool OwnerConnected { get; set; }

		public short WorldX { get; set; }

		public short WorldY { get; set; }

		public CustomVar<short> SubAreaId { get; set; }

		public byte NbRoom { get; set; }

		public byte NbChest { get; set; }

		public int[] SkillListIds { get; set; }

		public bool IsLocked { get; set; }

		public CustomVar<long> Price { get; set; }


		public HouseInformationsForSell() { }


		public HouseInformationsForSell InitHouseInformationsForSell(int _instanceid, bool _secondhand, CustomVar<int> _modelid, string _ownername, bool _ownerconnected, short _worldx, short _worldy, CustomVar<short> _subareaid, byte _nbroom, byte _nbchest, int[] _skilllistids, bool _islocked, CustomVar<long> _price)
		{

			this.InstanceId = _instanceid;
			this.SecondHand = _secondhand;
			this.ModelId = _modelid;
			this.OwnerName = _ownername;
			this.OwnerConnected = _ownerconnected;
			this.WorldX = _worldx;
			this.WorldY = _worldy;
			this.SubAreaId = _subareaid;
			this.NbRoom = _nbroom;
			this.NbChest = _nbchest;
			this.SkillListIds = _skilllistids;
			this.IsLocked = _islocked;
			this.Price = _price;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(InstanceId);
			size += DofusBinaryFactory.Sizing.SizeOf(SecondHand);
			size += DofusBinaryFactory.Sizing.SizeOf(ModelId);
			size += DofusBinaryFactory.Sizing.SizeOf(OwnerName);
			size += DofusBinaryFactory.Sizing.SizeOf(OwnerConnected);
			size += DofusBinaryFactory.Sizing.SizeOf(WorldX);
			size += DofusBinaryFactory.Sizing.SizeOf(WorldY);
			size += DofusBinaryFactory.Sizing.SizeOf(SubAreaId);
			size += DofusBinaryFactory.Sizing.SizeOf(NbRoom);
			size += DofusBinaryFactory.Sizing.SizeOf(NbChest);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.SkillListIds.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(SkillListIds);
			size += DofusBinaryFactory.Sizing.SizeOf(IsLocked);
			size += DofusBinaryFactory.Sizing.SizeOf(Price);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.InstanceId);
			writer.WriteData(this.SecondHand);
			writer.WriteData(this.ModelId);
			writer.WriteData(this.OwnerName);
			writer.WriteData(this.OwnerConnected);
			writer.WriteData(this.WorldX);
			writer.WriteData(this.WorldY);
			writer.WriteData(this.SubAreaId);
			writer.WriteData(this.NbRoom);
			writer.WriteData(this.NbChest);
			writer.WriteData((short)(this.SkillListIds.Length));
			writer.WriteDatas(SkillListIds);
			writer.WriteData(this.IsLocked);
			writer.WriteData(this.Price);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.InstanceId = reader.Read<int>();
			this.SecondHand = reader.Read<bool>();
			this.ModelId = reader.Read<CustomVar<int>>();
			this.OwnerName = reader.Read<string>();
			this.OwnerConnected = reader.Read<bool>();
			this.WorldX = reader.Read<short>();
			this.WorldY = reader.Read<short>();
			this.SubAreaId = reader.Read<CustomVar<short>>();
			this.NbRoom = reader.Read<byte>();
			this.NbChest = reader.Read<byte>();
			int SkillListIds_length = reader.Read<short>();
			this.SkillListIds = new int[SkillListIds_length];
			for(int i = 0; i < SkillListIds_length; i++)
				this.SkillListIds[i] = reader.Read<int>();
			this.IsLocked = reader.Read<bool>();
			this.Price = reader.Read<CustomVar<long>>();

		}


	}
}
