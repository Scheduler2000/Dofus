//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:59.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.character.alignment;

namespace Renaissance.Protocol.types.game.character.characteristic
{
	public class CharacterCharacteristicsInformations : IDofusType
	{
		public  const int NetworkId = 8;
		public  int ProtocolId { get { return NetworkId; } }

		public CustomVar<long> Experience { get; set; }

		public CustomVar<long> ExperienceLevelFloor { get; set; }

		public CustomVar<long> ExperienceNextLevelFloor { get; set; }

		public CustomVar<long> ExperienceBonusLimit { get; set; }

		public CustomVar<long> Kamas { get; set; }

		public CustomVar<short> StatsPoints { get; set; }

		public CustomVar<short> AdditionnalPoints { get; set; }

		public CustomVar<short> SpellsPoints { get; set; }

		public ActorExtendedAlignmentInformations AlignmentInfos { get; set; }

		public CustomVar<int> LifePoints { get; set; }

		public CustomVar<int> MaxLifePoints { get; set; }

		public CustomVar<short> EnergyPoints { get; set; }

		public CustomVar<short> MaxEnergyPoints { get; set; }

		public CustomVar<short> ActionPointsCurrent { get; set; }

		public CustomVar<short> MovementPointsCurrent { get; set; }

		public CharacterBaseCharacteristic Initiative { get; set; }

		public CharacterBaseCharacteristic Prospecting { get; set; }

		public CharacterBaseCharacteristic ActionPoints { get; set; }

		public CharacterBaseCharacteristic MovementPoints { get; set; }

		public CharacterBaseCharacteristic Strength { get; set; }

		public CharacterBaseCharacteristic Vitality { get; set; }

		public CharacterBaseCharacteristic Wisdom { get; set; }

		public CharacterBaseCharacteristic Chance { get; set; }

		public CharacterBaseCharacteristic Agility { get; set; }

		public CharacterBaseCharacteristic Intelligence { get; set; }

		public CharacterBaseCharacteristic Range { get; set; }

		public CharacterBaseCharacteristic SummonableCreaturesBoost { get; set; }

		public CharacterBaseCharacteristic Reflect { get; set; }

		public CharacterBaseCharacteristic CriticalHit { get; set; }

		public CustomVar<short> CriticalHitWeapon { get; set; }

		public CharacterBaseCharacteristic CriticalMiss { get; set; }

		public CharacterBaseCharacteristic HealBonus { get; set; }

		public CharacterBaseCharacteristic AllDamagesBonus { get; set; }

		public CharacterBaseCharacteristic WeaponDamagesBonusPercent { get; set; }

		public CharacterBaseCharacteristic DamagesBonusPercent { get; set; }

		public CharacterBaseCharacteristic TrapBonus { get; set; }

		public CharacterBaseCharacteristic TrapBonusPercent { get; set; }

		public CharacterBaseCharacteristic GlyphBonusPercent { get; set; }

		public CharacterBaseCharacteristic RuneBonusPercent { get; set; }

		public CharacterBaseCharacteristic PermanentDamagePercent { get; set; }

		public CharacterBaseCharacteristic TackleBlock { get; set; }

		public CharacterBaseCharacteristic TackleEvade { get; set; }

		public CharacterBaseCharacteristic PAAttack { get; set; }

		public CharacterBaseCharacteristic PMAttack { get; set; }

		public CharacterBaseCharacteristic PushDamageBonus { get; set; }

		public CharacterBaseCharacteristic CriticalDamageBonus { get; set; }

		public CharacterBaseCharacteristic NeutralDamageBonus { get; set; }

		public CharacterBaseCharacteristic EarthDamageBonus { get; set; }

		public CharacterBaseCharacteristic WaterDamageBonus { get; set; }

		public CharacterBaseCharacteristic AirDamageBonus { get; set; }

		public CharacterBaseCharacteristic FireDamageBonus { get; set; }

		public CharacterBaseCharacteristic DodgePALostProbability { get; set; }

		public CharacterBaseCharacteristic DodgePMLostProbability { get; set; }

		public CharacterBaseCharacteristic NeutralElementResistPercent { get; set; }

		public CharacterBaseCharacteristic EarthElementResistPercent { get; set; }

		public CharacterBaseCharacteristic WaterElementResistPercent { get; set; }

		public CharacterBaseCharacteristic AirElementResistPercent { get; set; }

		public CharacterBaseCharacteristic FireElementResistPercent { get; set; }

		public CharacterBaseCharacteristic NeutralElementReduction { get; set; }

		public CharacterBaseCharacteristic EarthElementReduction { get; set; }

		public CharacterBaseCharacteristic WaterElementReduction { get; set; }

		public CharacterBaseCharacteristic AirElementReduction { get; set; }

		public CharacterBaseCharacteristic FireElementReduction { get; set; }

		public CharacterBaseCharacteristic PushDamageReduction { get; set; }

		public CharacterBaseCharacteristic CriticalDamageReduction { get; set; }

		public CharacterBaseCharacteristic PvpNeutralElementResistPercent { get; set; }

		public CharacterBaseCharacteristic PvpEarthElementResistPercent { get; set; }

		public CharacterBaseCharacteristic PvpWaterElementResistPercent { get; set; }

		public CharacterBaseCharacteristic PvpAirElementResistPercent { get; set; }

		public CharacterBaseCharacteristic PvpFireElementResistPercent { get; set; }

		public CharacterBaseCharacteristic PvpNeutralElementReduction { get; set; }

		public CharacterBaseCharacteristic PvpEarthElementReduction { get; set; }

		public CharacterBaseCharacteristic PvpWaterElementReduction { get; set; }

		public CharacterBaseCharacteristic PvpAirElementReduction { get; set; }

		public CharacterBaseCharacteristic PvpFireElementReduction { get; set; }

		public CharacterBaseCharacteristic MeleeDamageDonePercent { get; set; }

		public CharacterBaseCharacteristic MeleeDamageReceivedPercent { get; set; }

		public CharacterBaseCharacteristic RangedDamageDonePercent { get; set; }

		public CharacterBaseCharacteristic RangedDamageReceivedPercent { get; set; }

		public CharacterBaseCharacteristic WeaponDamageDonePercent { get; set; }

		public CharacterBaseCharacteristic WeaponDamageReceivedPercent { get; set; }

		public CharacterBaseCharacteristic SpellDamageDonePercent { get; set; }

		public CharacterBaseCharacteristic SpellDamageReceivedPercent { get; set; }

		public CharacterSpellModification[] SpellModifications { get; set; }

		public int ProbationTime { get; set; }


		public CharacterCharacteristicsInformations() { }


		public CharacterCharacteristicsInformations InitCharacterCharacteristicsInformations(CustomVar<long> _experience, CustomVar<long> _experiencelevelfloor, CustomVar<long> _experiencenextlevelfloor, CustomVar<long> _experiencebonuslimit, CustomVar<long> _kamas, CustomVar<short> _statspoints, CustomVar<short> _additionnalpoints, CustomVar<short> _spellspoints, ActorExtendedAlignmentInformations _alignmentinfos, CustomVar<int> _lifepoints, CustomVar<int> _maxlifepoints, CustomVar<short> _energypoints, CustomVar<short> _maxenergypoints, CustomVar<short> _actionpointscurrent, CustomVar<short> _movementpointscurrent, CharacterBaseCharacteristic _initiative, CharacterBaseCharacteristic _prospecting, CharacterBaseCharacteristic _actionpoints, CharacterBaseCharacteristic _movementpoints, CharacterBaseCharacteristic _strength, CharacterBaseCharacteristic _vitality, CharacterBaseCharacteristic _wisdom, CharacterBaseCharacteristic _chance, CharacterBaseCharacteristic _agility, CharacterBaseCharacteristic _intelligence, CharacterBaseCharacteristic _range, CharacterBaseCharacteristic _summonablecreaturesboost, CharacterBaseCharacteristic _reflect, CharacterBaseCharacteristic _criticalhit, CustomVar<short> _criticalhitweapon, CharacterBaseCharacteristic _criticalmiss, CharacterBaseCharacteristic _healbonus, CharacterBaseCharacteristic _alldamagesbonus, CharacterBaseCharacteristic _weapondamagesbonuspercent, CharacterBaseCharacteristic _damagesbonuspercent, CharacterBaseCharacteristic _trapbonus, CharacterBaseCharacteristic _trapbonuspercent, CharacterBaseCharacteristic _glyphbonuspercent, CharacterBaseCharacteristic _runebonuspercent, CharacterBaseCharacteristic _permanentdamagepercent, CharacterBaseCharacteristic _tackleblock, CharacterBaseCharacteristic _tackleevade, CharacterBaseCharacteristic _paattack, CharacterBaseCharacteristic _pmattack, CharacterBaseCharacteristic _pushdamagebonus, CharacterBaseCharacteristic _criticaldamagebonus, CharacterBaseCharacteristic _neutraldamagebonus, CharacterBaseCharacteristic _earthdamagebonus, CharacterBaseCharacteristic _waterdamagebonus, CharacterBaseCharacteristic _airdamagebonus, CharacterBaseCharacteristic _firedamagebonus, CharacterBaseCharacteristic _dodgepalostprobability, CharacterBaseCharacteristic _dodgepmlostprobability, CharacterBaseCharacteristic _neutralelementresistpercent, CharacterBaseCharacteristic _earthelementresistpercent, CharacterBaseCharacteristic _waterelementresistpercent, CharacterBaseCharacteristic _airelementresistpercent, CharacterBaseCharacteristic _fireelementresistpercent, CharacterBaseCharacteristic _neutralelementreduction, CharacterBaseCharacteristic _earthelementreduction, CharacterBaseCharacteristic _waterelementreduction, CharacterBaseCharacteristic _airelementreduction, CharacterBaseCharacteristic _fireelementreduction, CharacterBaseCharacteristic _pushdamagereduction, CharacterBaseCharacteristic _criticaldamagereduction, CharacterBaseCharacteristic _pvpneutralelementresistpercent, CharacterBaseCharacteristic _pvpearthelementresistpercent, CharacterBaseCharacteristic _pvpwaterelementresistpercent, CharacterBaseCharacteristic _pvpairelementresistpercent, CharacterBaseCharacteristic _pvpfireelementresistpercent, CharacterBaseCharacteristic _pvpneutralelementreduction, CharacterBaseCharacteristic _pvpearthelementreduction, CharacterBaseCharacteristic _pvpwaterelementreduction, CharacterBaseCharacteristic _pvpairelementreduction, CharacterBaseCharacteristic _pvpfireelementreduction, CharacterBaseCharacteristic _meleedamagedonepercent, CharacterBaseCharacteristic _meleedamagereceivedpercent, CharacterBaseCharacteristic _rangeddamagedonepercent, CharacterBaseCharacteristic _rangeddamagereceivedpercent, CharacterBaseCharacteristic _weapondamagedonepercent, CharacterBaseCharacteristic _weapondamagereceivedpercent, CharacterBaseCharacteristic _spelldamagedonepercent, CharacterBaseCharacteristic _spelldamagereceivedpercent, CharacterSpellModification[] _spellmodifications, int _probationtime)
		{

			this.Experience = _experience;
			this.ExperienceLevelFloor = _experiencelevelfloor;
			this.ExperienceNextLevelFloor = _experiencenextlevelfloor;
			this.ExperienceBonusLimit = _experiencebonuslimit;
			this.Kamas = _kamas;
			this.StatsPoints = _statspoints;
			this.AdditionnalPoints = _additionnalpoints;
			this.SpellsPoints = _spellspoints;
			this.AlignmentInfos = _alignmentinfos;
			this.LifePoints = _lifepoints;
			this.MaxLifePoints = _maxlifepoints;
			this.EnergyPoints = _energypoints;
			this.MaxEnergyPoints = _maxenergypoints;
			this.ActionPointsCurrent = _actionpointscurrent;
			this.MovementPointsCurrent = _movementpointscurrent;
			this.Initiative = _initiative;
			this.Prospecting = _prospecting;
			this.ActionPoints = _actionpoints;
			this.MovementPoints = _movementpoints;
			this.Strength = _strength;
			this.Vitality = _vitality;
			this.Wisdom = _wisdom;
			this.Chance = _chance;
			this.Agility = _agility;
			this.Intelligence = _intelligence;
			this.Range = _range;
			this.SummonableCreaturesBoost = _summonablecreaturesboost;
			this.Reflect = _reflect;
			this.CriticalHit = _criticalhit;
			this.CriticalHitWeapon = _criticalhitweapon;
			this.CriticalMiss = _criticalmiss;
			this.HealBonus = _healbonus;
			this.AllDamagesBonus = _alldamagesbonus;
			this.WeaponDamagesBonusPercent = _weapondamagesbonuspercent;
			this.DamagesBonusPercent = _damagesbonuspercent;
			this.TrapBonus = _trapbonus;
			this.TrapBonusPercent = _trapbonuspercent;
			this.GlyphBonusPercent = _glyphbonuspercent;
			this.RuneBonusPercent = _runebonuspercent;
			this.PermanentDamagePercent = _permanentdamagepercent;
			this.TackleBlock = _tackleblock;
			this.TackleEvade = _tackleevade;
			this.PAAttack = _paattack;
			this.PMAttack = _pmattack;
			this.PushDamageBonus = _pushdamagebonus;
			this.CriticalDamageBonus = _criticaldamagebonus;
			this.NeutralDamageBonus = _neutraldamagebonus;
			this.EarthDamageBonus = _earthdamagebonus;
			this.WaterDamageBonus = _waterdamagebonus;
			this.AirDamageBonus = _airdamagebonus;
			this.FireDamageBonus = _firedamagebonus;
			this.DodgePALostProbability = _dodgepalostprobability;
			this.DodgePMLostProbability = _dodgepmlostprobability;
			this.NeutralElementResistPercent = _neutralelementresistpercent;
			this.EarthElementResistPercent = _earthelementresistpercent;
			this.WaterElementResistPercent = _waterelementresistpercent;
			this.AirElementResistPercent = _airelementresistpercent;
			this.FireElementResistPercent = _fireelementresistpercent;
			this.NeutralElementReduction = _neutralelementreduction;
			this.EarthElementReduction = _earthelementreduction;
			this.WaterElementReduction = _waterelementreduction;
			this.AirElementReduction = _airelementreduction;
			this.FireElementReduction = _fireelementreduction;
			this.PushDamageReduction = _pushdamagereduction;
			this.CriticalDamageReduction = _criticaldamagereduction;
			this.PvpNeutralElementResistPercent = _pvpneutralelementresistpercent;
			this.PvpEarthElementResistPercent = _pvpearthelementresistpercent;
			this.PvpWaterElementResistPercent = _pvpwaterelementresistpercent;
			this.PvpAirElementResistPercent = _pvpairelementresistpercent;
			this.PvpFireElementResistPercent = _pvpfireelementresistpercent;
			this.PvpNeutralElementReduction = _pvpneutralelementreduction;
			this.PvpEarthElementReduction = _pvpearthelementreduction;
			this.PvpWaterElementReduction = _pvpwaterelementreduction;
			this.PvpAirElementReduction = _pvpairelementreduction;
			this.PvpFireElementReduction = _pvpfireelementreduction;
			this.MeleeDamageDonePercent = _meleedamagedonepercent;
			this.MeleeDamageReceivedPercent = _meleedamagereceivedpercent;
			this.RangedDamageDonePercent = _rangeddamagedonepercent;
			this.RangedDamageReceivedPercent = _rangeddamagereceivedpercent;
			this.WeaponDamageDonePercent = _weapondamagedonepercent;
			this.WeaponDamageReceivedPercent = _weapondamagereceivedpercent;
			this.SpellDamageDonePercent = _spelldamagedonepercent;
			this.SpellDamageReceivedPercent = _spelldamagereceivedpercent;
			this.SpellModifications = _spellmodifications;
			this.ProbationTime = _probationtime;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(Experience);
			size += DofusBinaryFactory.Sizing.SizeOf(ExperienceLevelFloor);
			size += DofusBinaryFactory.Sizing.SizeOf(ExperienceNextLevelFloor);
			size += DofusBinaryFactory.Sizing.SizeOf(ExperienceBonusLimit);
			size += DofusBinaryFactory.Sizing.SizeOf(Kamas);
			size += DofusBinaryFactory.Sizing.SizeOf(StatsPoints);
			size += DofusBinaryFactory.Sizing.SizeOf(AdditionnalPoints);
			size += DofusBinaryFactory.Sizing.SizeOf(SpellsPoints);
			var serialized1 = this.AlignmentInfos.Serialize();
			size += serialized1.Length;
			size += DofusBinaryFactory.Sizing.SizeOf(LifePoints);
			size += DofusBinaryFactory.Sizing.SizeOf(MaxLifePoints);
			size += DofusBinaryFactory.Sizing.SizeOf(EnergyPoints);
			size += DofusBinaryFactory.Sizing.SizeOf(MaxEnergyPoints);
			size += DofusBinaryFactory.Sizing.SizeOf(ActionPointsCurrent);
			size += DofusBinaryFactory.Sizing.SizeOf(MovementPointsCurrent);
			var serialized2 = this.Initiative.Serialize();
			size += serialized2.Length;
			var serialized3 = this.Prospecting.Serialize();
			size += serialized3.Length;
			var serialized4 = this.ActionPoints.Serialize();
			size += serialized4.Length;
			var serialized5 = this.MovementPoints.Serialize();
			size += serialized5.Length;
			var serialized6 = this.Strength.Serialize();
			size += serialized6.Length;
			var serialized7 = this.Vitality.Serialize();
			size += serialized7.Length;
			var serialized8 = this.Wisdom.Serialize();
			size += serialized8.Length;
			var serialized9 = this.Chance.Serialize();
			size += serialized9.Length;
			var serialized10 = this.Agility.Serialize();
			size += serialized10.Length;
			var serialized11 = this.Intelligence.Serialize();
			size += serialized11.Length;
			var serialized12 = this.Range.Serialize();
			size += serialized12.Length;
			var serialized13 = this.SummonableCreaturesBoost.Serialize();
			size += serialized13.Length;
			var serialized14 = this.Reflect.Serialize();
			size += serialized14.Length;
			var serialized15 = this.CriticalHit.Serialize();
			size += serialized15.Length;
			size += DofusBinaryFactory.Sizing.SizeOf(CriticalHitWeapon);
			var serialized16 = this.CriticalMiss.Serialize();
			size += serialized16.Length;
			var serialized17 = this.HealBonus.Serialize();
			size += serialized17.Length;
			var serialized18 = this.AllDamagesBonus.Serialize();
			size += serialized18.Length;
			var serialized19 = this.WeaponDamagesBonusPercent.Serialize();
			size += serialized19.Length;
			var serialized20 = this.DamagesBonusPercent.Serialize();
			size += serialized20.Length;
			var serialized21 = this.TrapBonus.Serialize();
			size += serialized21.Length;
			var serialized22 = this.TrapBonusPercent.Serialize();
			size += serialized22.Length;
			var serialized23 = this.GlyphBonusPercent.Serialize();
			size += serialized23.Length;
			var serialized24 = this.RuneBonusPercent.Serialize();
			size += serialized24.Length;
			var serialized25 = this.PermanentDamagePercent.Serialize();
			size += serialized25.Length;
			var serialized26 = this.TackleBlock.Serialize();
			size += serialized26.Length;
			var serialized27 = this.TackleEvade.Serialize();
			size += serialized27.Length;
			var serialized28 = this.PAAttack.Serialize();
			size += serialized28.Length;
			var serialized29 = this.PMAttack.Serialize();
			size += serialized29.Length;
			var serialized30 = this.PushDamageBonus.Serialize();
			size += serialized30.Length;
			var serialized31 = this.CriticalDamageBonus.Serialize();
			size += serialized31.Length;
			var serialized32 = this.NeutralDamageBonus.Serialize();
			size += serialized32.Length;
			var serialized33 = this.EarthDamageBonus.Serialize();
			size += serialized33.Length;
			var serialized34 = this.WaterDamageBonus.Serialize();
			size += serialized34.Length;
			var serialized35 = this.AirDamageBonus.Serialize();
			size += serialized35.Length;
			var serialized36 = this.FireDamageBonus.Serialize();
			size += serialized36.Length;
			var serialized37 = this.DodgePALostProbability.Serialize();
			size += serialized37.Length;
			var serialized38 = this.DodgePMLostProbability.Serialize();
			size += serialized38.Length;
			var serialized39 = this.NeutralElementResistPercent.Serialize();
			size += serialized39.Length;
			var serialized40 = this.EarthElementResistPercent.Serialize();
			size += serialized40.Length;
			var serialized41 = this.WaterElementResistPercent.Serialize();
			size += serialized41.Length;
			var serialized42 = this.AirElementResistPercent.Serialize();
			size += serialized42.Length;
			var serialized43 = this.FireElementResistPercent.Serialize();
			size += serialized43.Length;
			var serialized44 = this.NeutralElementReduction.Serialize();
			size += serialized44.Length;
			var serialized45 = this.EarthElementReduction.Serialize();
			size += serialized45.Length;
			var serialized46 = this.WaterElementReduction.Serialize();
			size += serialized46.Length;
			var serialized47 = this.AirElementReduction.Serialize();
			size += serialized47.Length;
			var serialized48 = this.FireElementReduction.Serialize();
			size += serialized48.Length;
			var serialized49 = this.PushDamageReduction.Serialize();
			size += serialized49.Length;
			var serialized50 = this.CriticalDamageReduction.Serialize();
			size += serialized50.Length;
			var serialized51 = this.PvpNeutralElementResistPercent.Serialize();
			size += serialized51.Length;
			var serialized52 = this.PvpEarthElementResistPercent.Serialize();
			size += serialized52.Length;
			var serialized53 = this.PvpWaterElementResistPercent.Serialize();
			size += serialized53.Length;
			var serialized54 = this.PvpAirElementResistPercent.Serialize();
			size += serialized54.Length;
			var serialized55 = this.PvpFireElementResistPercent.Serialize();
			size += serialized55.Length;
			var serialized56 = this.PvpNeutralElementReduction.Serialize();
			size += serialized56.Length;
			var serialized57 = this.PvpEarthElementReduction.Serialize();
			size += serialized57.Length;
			var serialized58 = this.PvpWaterElementReduction.Serialize();
			size += serialized58.Length;
			var serialized59 = this.PvpAirElementReduction.Serialize();
			size += serialized59.Length;
			var serialized60 = this.PvpFireElementReduction.Serialize();
			size += serialized60.Length;
			var serialized61 = this.MeleeDamageDonePercent.Serialize();
			size += serialized61.Length;
			var serialized62 = this.MeleeDamageReceivedPercent.Serialize();
			size += serialized62.Length;
			var serialized63 = this.RangedDamageDonePercent.Serialize();
			size += serialized63.Length;
			var serialized64 = this.RangedDamageReceivedPercent.Serialize();
			size += serialized64.Length;
			var serialized65 = this.WeaponDamageDonePercent.Serialize();
			size += serialized65.Length;
			var serialized66 = this.WeaponDamageReceivedPercent.Serialize();
			size += serialized66.Length;
			var serialized67 = this.SpellDamageDonePercent.Serialize();
			size += serialized67.Length;
			var serialized68 = this.SpellDamageReceivedPercent.Serialize();
			size += serialized68.Length;
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.SpellModifications.Length));
			var memory1 = new Memory<byte>[SpellModifications.Length];
			for(int i = 0; i < SpellModifications.Length; i++)
			{
				memory1[i] = this.SpellModifications[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf(ProbationTime);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.Experience);
			writer.WriteData(this.ExperienceLevelFloor);
			writer.WriteData(this.ExperienceNextLevelFloor);
			writer.WriteData(this.ExperienceBonusLimit);
			writer.WriteData(this.Kamas);
			writer.WriteData(this.StatsPoints);
			writer.WriteData(this.AdditionnalPoints);
			writer.WriteData(this.SpellsPoints);
			writer.WriteDatas(serialized1);
			writer.WriteData(this.LifePoints);
			writer.WriteData(this.MaxLifePoints);
			writer.WriteData(this.EnergyPoints);
			writer.WriteData(this.MaxEnergyPoints);
			writer.WriteData(this.ActionPointsCurrent);
			writer.WriteData(this.MovementPointsCurrent);
			writer.WriteDatas(serialized2);
			writer.WriteDatas(serialized3);
			writer.WriteDatas(serialized4);
			writer.WriteDatas(serialized5);
			writer.WriteDatas(serialized6);
			writer.WriteDatas(serialized7);
			writer.WriteDatas(serialized8);
			writer.WriteDatas(serialized9);
			writer.WriteDatas(serialized10);
			writer.WriteDatas(serialized11);
			writer.WriteDatas(serialized12);
			writer.WriteDatas(serialized13);
			writer.WriteDatas(serialized14);
			writer.WriteDatas(serialized15);
			writer.WriteData(this.CriticalHitWeapon);
			writer.WriteDatas(serialized16);
			writer.WriteDatas(serialized17);
			writer.WriteDatas(serialized18);
			writer.WriteDatas(serialized19);
			writer.WriteDatas(serialized20);
			writer.WriteDatas(serialized21);
			writer.WriteDatas(serialized22);
			writer.WriteDatas(serialized23);
			writer.WriteDatas(serialized24);
			writer.WriteDatas(serialized25);
			writer.WriteDatas(serialized26);
			writer.WriteDatas(serialized27);
			writer.WriteDatas(serialized28);
			writer.WriteDatas(serialized29);
			writer.WriteDatas(serialized30);
			writer.WriteDatas(serialized31);
			writer.WriteDatas(serialized32);
			writer.WriteDatas(serialized33);
			writer.WriteDatas(serialized34);
			writer.WriteDatas(serialized35);
			writer.WriteDatas(serialized36);
			writer.WriteDatas(serialized37);
			writer.WriteDatas(serialized38);
			writer.WriteDatas(serialized39);
			writer.WriteDatas(serialized40);
			writer.WriteDatas(serialized41);
			writer.WriteDatas(serialized42);
			writer.WriteDatas(serialized43);
			writer.WriteDatas(serialized44);
			writer.WriteDatas(serialized45);
			writer.WriteDatas(serialized46);
			writer.WriteDatas(serialized47);
			writer.WriteDatas(serialized48);
			writer.WriteDatas(serialized49);
			writer.WriteDatas(serialized50);
			writer.WriteDatas(serialized51);
			writer.WriteDatas(serialized52);
			writer.WriteDatas(serialized53);
			writer.WriteDatas(serialized54);
			writer.WriteDatas(serialized55);
			writer.WriteDatas(serialized56);
			writer.WriteDatas(serialized57);
			writer.WriteDatas(serialized58);
			writer.WriteDatas(serialized59);
			writer.WriteDatas(serialized60);
			writer.WriteDatas(serialized61);
			writer.WriteDatas(serialized62);
			writer.WriteDatas(serialized63);
			writer.WriteDatas(serialized64);
			writer.WriteDatas(serialized65);
			writer.WriteDatas(serialized66);
			writer.WriteDatas(serialized67);
			writer.WriteDatas(serialized68);
			writer.WriteData((short)(this.SpellModifications.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData(this.ProbationTime);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.Experience = reader.Read<CustomVar<long>>();
			this.ExperienceLevelFloor = reader.Read<CustomVar<long>>();
			this.ExperienceNextLevelFloor = reader.Read<CustomVar<long>>();
			this.ExperienceBonusLimit = reader.Read<CustomVar<long>>();
			this.Kamas = reader.Read<CustomVar<long>>();
			this.StatsPoints = reader.Read<CustomVar<short>>();
			this.AdditionnalPoints = reader.Read<CustomVar<short>>();
			this.SpellsPoints = reader.Read<CustomVar<short>>();
			this.AlignmentInfos = new ActorExtendedAlignmentInformations();
			this.AlignmentInfos.Deserialize(reader);
			this.LifePoints = reader.Read<CustomVar<int>>();
			this.MaxLifePoints = reader.Read<CustomVar<int>>();
			this.EnergyPoints = reader.Read<CustomVar<short>>();
			this.MaxEnergyPoints = reader.Read<CustomVar<short>>();
			this.ActionPointsCurrent = reader.Read<CustomVar<short>>();
			this.MovementPointsCurrent = reader.Read<CustomVar<short>>();
			this.Initiative = new CharacterBaseCharacteristic();
			this.Initiative.Deserialize(reader);
			this.Prospecting = new CharacterBaseCharacteristic();
			this.Prospecting.Deserialize(reader);
			this.ActionPoints = new CharacterBaseCharacteristic();
			this.ActionPoints.Deserialize(reader);
			this.MovementPoints = new CharacterBaseCharacteristic();
			this.MovementPoints.Deserialize(reader);
			this.Strength = new CharacterBaseCharacteristic();
			this.Strength.Deserialize(reader);
			this.Vitality = new CharacterBaseCharacteristic();
			this.Vitality.Deserialize(reader);
			this.Wisdom = new CharacterBaseCharacteristic();
			this.Wisdom.Deserialize(reader);
			this.Chance = new CharacterBaseCharacteristic();
			this.Chance.Deserialize(reader);
			this.Agility = new CharacterBaseCharacteristic();
			this.Agility.Deserialize(reader);
			this.Intelligence = new CharacterBaseCharacteristic();
			this.Intelligence.Deserialize(reader);
			this.Range = new CharacterBaseCharacteristic();
			this.Range.Deserialize(reader);
			this.SummonableCreaturesBoost = new CharacterBaseCharacteristic();
			this.SummonableCreaturesBoost.Deserialize(reader);
			this.Reflect = new CharacterBaseCharacteristic();
			this.Reflect.Deserialize(reader);
			this.CriticalHit = new CharacterBaseCharacteristic();
			this.CriticalHit.Deserialize(reader);
			this.CriticalHitWeapon = reader.Read<CustomVar<short>>();
			this.CriticalMiss = new CharacterBaseCharacteristic();
			this.CriticalMiss.Deserialize(reader);
			this.HealBonus = new CharacterBaseCharacteristic();
			this.HealBonus.Deserialize(reader);
			this.AllDamagesBonus = new CharacterBaseCharacteristic();
			this.AllDamagesBonus.Deserialize(reader);
			this.WeaponDamagesBonusPercent = new CharacterBaseCharacteristic();
			this.WeaponDamagesBonusPercent.Deserialize(reader);
			this.DamagesBonusPercent = new CharacterBaseCharacteristic();
			this.DamagesBonusPercent.Deserialize(reader);
			this.TrapBonus = new CharacterBaseCharacteristic();
			this.TrapBonus.Deserialize(reader);
			this.TrapBonusPercent = new CharacterBaseCharacteristic();
			this.TrapBonusPercent.Deserialize(reader);
			this.GlyphBonusPercent = new CharacterBaseCharacteristic();
			this.GlyphBonusPercent.Deserialize(reader);
			this.RuneBonusPercent = new CharacterBaseCharacteristic();
			this.RuneBonusPercent.Deserialize(reader);
			this.PermanentDamagePercent = new CharacterBaseCharacteristic();
			this.PermanentDamagePercent.Deserialize(reader);
			this.TackleBlock = new CharacterBaseCharacteristic();
			this.TackleBlock.Deserialize(reader);
			this.TackleEvade = new CharacterBaseCharacteristic();
			this.TackleEvade.Deserialize(reader);
			this.PAAttack = new CharacterBaseCharacteristic();
			this.PAAttack.Deserialize(reader);
			this.PMAttack = new CharacterBaseCharacteristic();
			this.PMAttack.Deserialize(reader);
			this.PushDamageBonus = new CharacterBaseCharacteristic();
			this.PushDamageBonus.Deserialize(reader);
			this.CriticalDamageBonus = new CharacterBaseCharacteristic();
			this.CriticalDamageBonus.Deserialize(reader);
			this.NeutralDamageBonus = new CharacterBaseCharacteristic();
			this.NeutralDamageBonus.Deserialize(reader);
			this.EarthDamageBonus = new CharacterBaseCharacteristic();
			this.EarthDamageBonus.Deserialize(reader);
			this.WaterDamageBonus = new CharacterBaseCharacteristic();
			this.WaterDamageBonus.Deserialize(reader);
			this.AirDamageBonus = new CharacterBaseCharacteristic();
			this.AirDamageBonus.Deserialize(reader);
			this.FireDamageBonus = new CharacterBaseCharacteristic();
			this.FireDamageBonus.Deserialize(reader);
			this.DodgePALostProbability = new CharacterBaseCharacteristic();
			this.DodgePALostProbability.Deserialize(reader);
			this.DodgePMLostProbability = new CharacterBaseCharacteristic();
			this.DodgePMLostProbability.Deserialize(reader);
			this.NeutralElementResistPercent = new CharacterBaseCharacteristic();
			this.NeutralElementResistPercent.Deserialize(reader);
			this.EarthElementResistPercent = new CharacterBaseCharacteristic();
			this.EarthElementResistPercent.Deserialize(reader);
			this.WaterElementResistPercent = new CharacterBaseCharacteristic();
			this.WaterElementResistPercent.Deserialize(reader);
			this.AirElementResistPercent = new CharacterBaseCharacteristic();
			this.AirElementResistPercent.Deserialize(reader);
			this.FireElementResistPercent = new CharacterBaseCharacteristic();
			this.FireElementResistPercent.Deserialize(reader);
			this.NeutralElementReduction = new CharacterBaseCharacteristic();
			this.NeutralElementReduction.Deserialize(reader);
			this.EarthElementReduction = new CharacterBaseCharacteristic();
			this.EarthElementReduction.Deserialize(reader);
			this.WaterElementReduction = new CharacterBaseCharacteristic();
			this.WaterElementReduction.Deserialize(reader);
			this.AirElementReduction = new CharacterBaseCharacteristic();
			this.AirElementReduction.Deserialize(reader);
			this.FireElementReduction = new CharacterBaseCharacteristic();
			this.FireElementReduction.Deserialize(reader);
			this.PushDamageReduction = new CharacterBaseCharacteristic();
			this.PushDamageReduction.Deserialize(reader);
			this.CriticalDamageReduction = new CharacterBaseCharacteristic();
			this.CriticalDamageReduction.Deserialize(reader);
			this.PvpNeutralElementResistPercent = new CharacterBaseCharacteristic();
			this.PvpNeutralElementResistPercent.Deserialize(reader);
			this.PvpEarthElementResistPercent = new CharacterBaseCharacteristic();
			this.PvpEarthElementResistPercent.Deserialize(reader);
			this.PvpWaterElementResistPercent = new CharacterBaseCharacteristic();
			this.PvpWaterElementResistPercent.Deserialize(reader);
			this.PvpAirElementResistPercent = new CharacterBaseCharacteristic();
			this.PvpAirElementResistPercent.Deserialize(reader);
			this.PvpFireElementResistPercent = new CharacterBaseCharacteristic();
			this.PvpFireElementResistPercent.Deserialize(reader);
			this.PvpNeutralElementReduction = new CharacterBaseCharacteristic();
			this.PvpNeutralElementReduction.Deserialize(reader);
			this.PvpEarthElementReduction = new CharacterBaseCharacteristic();
			this.PvpEarthElementReduction.Deserialize(reader);
			this.PvpWaterElementReduction = new CharacterBaseCharacteristic();
			this.PvpWaterElementReduction.Deserialize(reader);
			this.PvpAirElementReduction = new CharacterBaseCharacteristic();
			this.PvpAirElementReduction.Deserialize(reader);
			this.PvpFireElementReduction = new CharacterBaseCharacteristic();
			this.PvpFireElementReduction.Deserialize(reader);
			this.MeleeDamageDonePercent = new CharacterBaseCharacteristic();
			this.MeleeDamageDonePercent.Deserialize(reader);
			this.MeleeDamageReceivedPercent = new CharacterBaseCharacteristic();
			this.MeleeDamageReceivedPercent.Deserialize(reader);
			this.RangedDamageDonePercent = new CharacterBaseCharacteristic();
			this.RangedDamageDonePercent.Deserialize(reader);
			this.RangedDamageReceivedPercent = new CharacterBaseCharacteristic();
			this.RangedDamageReceivedPercent.Deserialize(reader);
			this.WeaponDamageDonePercent = new CharacterBaseCharacteristic();
			this.WeaponDamageDonePercent.Deserialize(reader);
			this.WeaponDamageReceivedPercent = new CharacterBaseCharacteristic();
			this.WeaponDamageReceivedPercent.Deserialize(reader);
			this.SpellDamageDonePercent = new CharacterBaseCharacteristic();
			this.SpellDamageDonePercent.Deserialize(reader);
			this.SpellDamageReceivedPercent = new CharacterBaseCharacteristic();
			this.SpellDamageReceivedPercent.Deserialize(reader);
			int SpellModifications_length = reader.Read<short>();
			this.SpellModifications = new CharacterSpellModification[SpellModifications_length];
			for(int i = 0; i < SpellModifications_length; i++)
			{
				this.SpellModifications[i] = new CharacterSpellModification();
				this.SpellModifications[i].Deserialize(reader);
			}
			this.ProbationTime = reader.Read<int>();

		}


	}
}
