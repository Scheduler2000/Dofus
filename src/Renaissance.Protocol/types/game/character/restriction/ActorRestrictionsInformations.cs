//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:59.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.types.game.character.restriction
{
	public class ActorRestrictionsInformations : IDofusType
	{
		public  const int NetworkId = 204;
		public  int ProtocolId { get { return NetworkId; } }

		public WrappedBool CantBeAggressed { get; set; }

		public WrappedBool CantBeChallenged { get; set; }

		public WrappedBool CantTrade { get; set; }

		public WrappedBool CantBeAttackedByMutant { get; set; }

		public WrappedBool CantRun { get; set; }

		public WrappedBool ForceSlowWalk { get; set; }

		public WrappedBool CantMinimize { get; set; }

		public WrappedBool CantMove { get; set; }

		public WrappedBool CantAggress { get; set; }

		public WrappedBool CantChallenge { get; set; }

		public WrappedBool CantExchange { get; set; }

		public WrappedBool CantAttack { get; set; }

		public WrappedBool CantChat { get; set; }

		public WrappedBool CantBeMerchant { get; set; }

		public WrappedBool CantUseObject { get; set; }

		public WrappedBool CantUseTaxCollector { get; set; }

		public WrappedBool CantUseInteractive { get; set; }

		public WrappedBool CantSpeakToNPC { get; set; }

		public WrappedBool CantChangeZone { get; set; }

		public WrappedBool CantAttackMonster { get; set; }


		public ActorRestrictionsInformations() { }


		public ActorRestrictionsInformations InitActorRestrictionsInformations(WrappedBool _cantbeaggressed, WrappedBool _cantbechallenged, WrappedBool _canttrade, WrappedBool _cantbeattackedbymutant, WrappedBool _cantrun, WrappedBool _forceslowwalk, WrappedBool _cantminimize, WrappedBool _cantmove, WrappedBool _cantaggress, WrappedBool _cantchallenge, WrappedBool _cantexchange, WrappedBool _cantattack, WrappedBool _cantchat, WrappedBool _cantbemerchant, WrappedBool _cantuseobject, WrappedBool _cantusetaxcollector, WrappedBool _cantuseinteractive, WrappedBool _cantspeaktonpc, WrappedBool _cantchangezone, WrappedBool _cantattackmonster)
		{

			this.CantBeAggressed = _cantbeaggressed;
			this.CantBeChallenged = _cantbechallenged;
			this.CantTrade = _canttrade;
			this.CantBeAttackedByMutant = _cantbeattackedbymutant;
			this.CantRun = _cantrun;
			this.ForceSlowWalk = _forceslowwalk;
			this.CantMinimize = _cantminimize;
			this.CantMove = _cantmove;
			this.CantAggress = _cantaggress;
			this.CantChallenge = _cantchallenge;
			this.CantExchange = _cantexchange;
			this.CantAttack = _cantattack;
			this.CantChat = _cantchat;
			this.CantBeMerchant = _cantbemerchant;
			this.CantUseObject = _cantuseobject;
			this.CantUseTaxCollector = _cantusetaxcollector;
			this.CantUseInteractive = _cantuseinteractive;
			this.CantSpeakToNPC = _cantspeaktonpc;
			this.CantChangeZone = _cantchangezone;
			this.CantAttackMonster = _cantattackmonster;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;
			size++;


			using DofusWriter writer = new DofusWriter(size);

			byte box = 0;
			box = writer.SetFlag(box,0,this.CantBeAggressed);
			box = writer.SetFlag(box,1,this.CantBeChallenged);
			box = writer.SetFlag(box,2,this.CantTrade);
			box = writer.SetFlag(box,3,this.CantBeAttackedByMutant);
			box = writer.SetFlag(box,4,this.CantRun);
			box = writer.SetFlag(box,5,this.ForceSlowWalk);
			box = writer.SetFlag(box,6,this.CantMinimize);
			box = writer.SetFlag(box,7,this.CantMove);
			box = writer.SetFlag(box,8,this.CantAggress);
			box = writer.SetFlag(box,9,this.CantChallenge);
			box = writer.SetFlag(box,10,this.CantExchange);
			box = writer.SetFlag(box,11,this.CantAttack);
			box = writer.SetFlag(box,12,this.CantChat);
			box = writer.SetFlag(box,13,this.CantBeMerchant);
			box = writer.SetFlag(box,14,this.CantUseObject);
			box = writer.SetFlag(box,15,this.CantUseTaxCollector);
			box = writer.SetFlag(box,16,this.CantUseInteractive);
			box = writer.SetFlag(box,17,this.CantSpeakToNPC);
			box = writer.SetFlag(box,18,this.CantChangeZone);
			box = writer.SetFlag(box,19,this.CantAttackMonster);
			writer.WriteData(box);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			byte box = reader.Read<byte>();
			this.CantBeAggressed = reader.ReadFlag(box,0);
			this.CantBeChallenged = reader.ReadFlag(box,1);
			this.CantTrade = reader.ReadFlag(box,2);
			this.CantBeAttackedByMutant = reader.ReadFlag(box,3);
			this.CantRun = reader.ReadFlag(box,4);
			this.ForceSlowWalk = reader.ReadFlag(box,5);
			this.CantMinimize = reader.ReadFlag(box,6);
			this.CantMove = reader.ReadFlag(box,7);
			this.CantAggress = reader.ReadFlag(box,8);
			this.CantChallenge = reader.ReadFlag(box,9);
			this.CantExchange = reader.ReadFlag(box,10);
			this.CantAttack = reader.ReadFlag(box,11);
			this.CantChat = reader.ReadFlag(box,12);
			this.CantBeMerchant = reader.ReadFlag(box,13);
			this.CantUseObject = reader.ReadFlag(box,14);
			this.CantUseTaxCollector = reader.ReadFlag(box,15);
			this.CantUseInteractive = reader.ReadFlag(box,16);
			this.CantSpeakToNPC = reader.ReadFlag(box,17);
			this.CantChangeZone = reader.ReadFlag(box,18);
			this.CantAttackMonster = reader.ReadFlag(box,19);

		}


	}
}
