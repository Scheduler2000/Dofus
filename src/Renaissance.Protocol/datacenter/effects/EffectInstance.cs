//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 27/12/2019 11:41:20.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Renaissance.Protocol.datacenter.geometry;
using Renaissance.Protocol.datacenter.alignments;
using Renaissance.Protocol.datacenter.appearance;
using Renaissance.Protocol.datacenter.communication;
using Renaissance.Protocol.datacenter.documents;
using Renaissance.Protocol.datacenter.effects.instances;
using Renaissance.Protocol.datacenter.items;
using Renaissance.Protocol.datacenter.jobs;
using Renaissance.Protocol.datacenter.misc;
using Renaissance.Protocol.datacenter.monsters;
using Renaissance.Protocol.datacenter.mounts;
using Renaissance.Protocol.datacenter.spells;

namespace Renaissance.Protocol.datacenter.effects
{
    [D2OClass("EffectInstance", "com.ankamagames.dofus.datacenter.effects")]
    [Serializable]
    public class EffectInstanceData : IDataCenter
    {

        protected uint m_effectUid;
        protected uint m_effectId;
        protected int m_order;
        protected int m_targetId;
        protected string m_targetMask;
        protected int m_duration;
        protected int m_delay;
        protected int m_random;
        protected int m_group;
        protected int m_modificator;
        protected bool m_trigger;
        protected string m_triggers;
        protected bool m_visibleInTooltip;
        protected bool m_visibleInBuffUi;
        protected bool m_visibleInFightLog;
        protected bool m_forClientOnly;
        protected int m_dispellable;
        protected int m_zoneSize;
        protected uint m_zoneShape;
        protected int m_zoneMinSize;
        protected int m_zoneEfficiencyPercent;
        protected int m_zoneMaxEfficiency;
        protected int m_zoneStopAtTarget;
        protected int m_effectElement;
        protected int m_spellId;
        protected string m_rawZone;


        public uint EffectUid
        {
            get => m_effectUid;
            set => m_effectUid = value;
        }

        public uint EffectId
        {
            get => m_effectId;
            set => m_effectId = value;
        }

        public int Order
        {
            get => m_order;
            set => m_order = value;
        }

        public int TargetId
        {
            get => m_targetId;
            set => m_targetId = value;
        }

        public String TargetMask
        {
            get => m_targetMask;
            set => m_targetMask = value;
        }

        public int Duration
        {
            get => m_duration;
            set => m_duration = value;
        }

        public int Delay
        {
            get => m_delay;
            set => m_delay = value;
        }

        public int Random
        {
            get => m_random;
            set => m_random = value;
        }

        public int Group
        {
            get => m_group;
            set => m_group = value;
        }

        public int Modificator
        {
            get => m_modificator;
            set => m_modificator = value;
        }

        public Boolean Trigger
        {
            get => m_trigger;
            set => m_trigger = value;
        }

        public String Triggers
        {
            get => m_triggers;
            set => m_triggers = value;
        }

        public Boolean VisibleInTooltip
        {
            get => m_visibleInTooltip;
            set => m_visibleInTooltip = value;
        }

        public Boolean VisibleInBuffUi
        {
            get => m_visibleInBuffUi;
            set => m_visibleInBuffUi = value;
        }

        public Boolean VisibleInFightLog
        {
            get => m_visibleInFightLog;
            set => m_visibleInFightLog = value;
        }

        public Boolean ForClientOnly
        {
            get => m_forClientOnly;
            set => m_forClientOnly = value;
        }

        public int Dispellable
        {
            get => m_dispellable;
            set => m_dispellable = value;
        }

        public int ZoneSize
        {
            get => m_zoneSize;
            set => m_zoneSize = value;
        }

        public uint ZoneShape
        {
            get => m_zoneShape;
            set => m_zoneShape = value;
        }

        public int ZoneMinSize
        {
            get => m_zoneMinSize;
            set => m_zoneMinSize = value;
        }

        public int ZoneEfficiencyPercent
        {
            get => m_zoneEfficiencyPercent;
            set => m_zoneEfficiencyPercent = value;
        }

        public int ZoneMaxEfficiency
        {
            get => m_zoneMaxEfficiency;
            set => m_zoneMaxEfficiency = value;
        }

        public int ZoneStopAtTarget
        {
            get => m_zoneStopAtTarget;
            set => m_zoneStopAtTarget = value;
        }

        public int EffectElement
        {
            get => m_effectElement;
            set => m_effectElement = value;
        }

        public int SpellId
        {
            get => m_spellId;
            set => m_spellId = value;
        }
        protected string RawZone { get => this.m_rawZone; set => this.m_rawZone = value; }
    }
}
