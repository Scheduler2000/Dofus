//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:07.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.messages.connection
{
	public class IdentificationSuccessMessage : IDofusMessage
	{
		public  const int NetworkId = 22;
		public  int ProtocolId { get { return NetworkId; } }

		public string Login { get; set; }

		public string Nickname { get; set; }

		public int AccountId { get; set; }

		public byte CommunityId { get; set; }

		public WrappedBool HasRights { get; set; }

		public string SecretQuestion { get; set; }

		public double AccountCreation { get; set; }

		public double SubscriptionElapsedDuration { get; set; }

		public double SubscriptionEndDate { get; set; }

		public WrappedBool WasAlreadyConnected { get; set; }

		public byte HavenbagAvailableRoom { get; set; }


		public IdentificationSuccessMessage() { }


		public IdentificationSuccessMessage InitIdentificationSuccessMessage(string _login, string _nickname, int _accountid, byte _communityid, WrappedBool _hasrights, string _secretquestion, double _accountcreation, double _subscriptionelapsedduration, double _subscriptionenddate, WrappedBool _wasalreadyconnected, byte _havenbagavailableroom)
		{

			this.Login = _login;
			this.Nickname = _nickname;
			this.AccountId = _accountid;
			this.CommunityId = _communityid;
			this.HasRights = _hasrights;
			this.SecretQuestion = _secretquestion;
			this.AccountCreation = _accountcreation;
			this.SubscriptionElapsedDuration = _subscriptionelapsedduration;
			this.SubscriptionEndDate = _subscriptionenddate;
			this.WasAlreadyConnected = _wasalreadyconnected;
			this.HavenbagAvailableRoom = _havenbagavailableroom;

			return this;
		}

		public  byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			byte box = 0;
			box = writer.SetFlag(box,0,this.HasRights);
			box = writer.SetFlag(box,1,this.WasAlreadyConnected);
			writer.Write(box);
			writer.Write(this.Login);
			writer.Write(this.Nickname);
			writer.Write(this.AccountId);
			writer.Write(this.CommunityId);
			writer.Write(this.SecretQuestion);
			writer.Write(this.AccountCreation);
			writer.Write(this.SubscriptionElapsedDuration);
			writer.Write(this.SubscriptionEndDate);
			writer.Write(this.HavenbagAvailableRoom);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			byte box = reader.Read<byte>();
			this.HasRights = reader.ReadFlag(box,0);
			this.WasAlreadyConnected = reader.ReadFlag(box,1);
			this.Login = reader.Read<string>();
			this.Nickname = reader.Read<string>();
			this.AccountId = reader.Read<int>();
			this.CommunityId = reader.Read<byte>();
			this.SecretQuestion = reader.Read<string>();
			this.AccountCreation = reader.Read<double>();
			this.SubscriptionElapsedDuration = reader.Read<double>();
			this.SubscriptionEndDate = reader.Read<double>();
			this.HavenbagAvailableRoom = reader.Read<byte>();

		}


	}
}
