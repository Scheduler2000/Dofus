//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:45.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.messages.game.guild
{
	public class GuildInfosUpgradeMessage : IDofusMessage
	{
		public  const int NetworkId = 5636;
		public  int ProtocolId { get { return NetworkId; } }

		public byte MaxTaxCollectorsCount { get; set; }

		public byte TaxCollectorsCount { get; set; }

		public CustomVar<short> TaxCollectorLifePoints { get; set; }

		public CustomVar<short> TaxCollectorDamagesBonuses { get; set; }

		public CustomVar<short> TaxCollectorPods { get; set; }

		public CustomVar<short> TaxCollectorProspecting { get; set; }

		public CustomVar<short> TaxCollectorWisdom { get; set; }

		public CustomVar<short> BoostPoints { get; set; }

		public CustomVar<short>[] SpellId { get; set; }

		public short[] SpellLevel { get; set; }


		public GuildInfosUpgradeMessage() { }


		public GuildInfosUpgradeMessage InitGuildInfosUpgradeMessage(byte _maxtaxcollectorscount, byte _taxcollectorscount, CustomVar<short> _taxcollectorlifepoints, CustomVar<short> _taxcollectordamagesbonuses, CustomVar<short> _taxcollectorpods, CustomVar<short> _taxcollectorprospecting, CustomVar<short> _taxcollectorwisdom, CustomVar<short> _boostpoints, CustomVar<short>[] _spellid, short[] _spelllevel)
		{

			this.MaxTaxCollectorsCount = _maxtaxcollectorscount;
			this.TaxCollectorsCount = _taxcollectorscount;
			this.TaxCollectorLifePoints = _taxcollectorlifepoints;
			this.TaxCollectorDamagesBonuses = _taxcollectordamagesbonuses;
			this.TaxCollectorPods = _taxcollectorpods;
			this.TaxCollectorProspecting = _taxcollectorprospecting;
			this.TaxCollectorWisdom = _taxcollectorwisdom;
			this.BoostPoints = _boostpoints;
			this.SpellId = _spellid;
			this.SpellLevel = _spelllevel;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(MaxTaxCollectorsCount);
			size += DofusBinaryFactory.Sizing.SizeOf(TaxCollectorsCount);
			size += DofusBinaryFactory.Sizing.SizeOf(TaxCollectorLifePoints);
			size += DofusBinaryFactory.Sizing.SizeOf(TaxCollectorDamagesBonuses);
			size += DofusBinaryFactory.Sizing.SizeOf(TaxCollectorPods);
			size += DofusBinaryFactory.Sizing.SizeOf(TaxCollectorProspecting);
			size += DofusBinaryFactory.Sizing.SizeOf(TaxCollectorWisdom);
			size += DofusBinaryFactory.Sizing.SizeOf(BoostPoints);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.SpellId.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(SpellId);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.SpellLevel.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(SpellLevel);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.MaxTaxCollectorsCount);
			writer.WriteData(this.TaxCollectorsCount);
			writer.WriteData(this.TaxCollectorLifePoints);
			writer.WriteData(this.TaxCollectorDamagesBonuses);
			writer.WriteData(this.TaxCollectorPods);
			writer.WriteData(this.TaxCollectorProspecting);
			writer.WriteData(this.TaxCollectorWisdom);
			writer.WriteData(this.BoostPoints);
			writer.WriteData((short)(this.SpellId.Length));
			writer.WriteDatas(SpellId);
			writer.WriteData((short)(this.SpellLevel.Length));
			writer.WriteDatas(SpellLevel);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.MaxTaxCollectorsCount = reader.Read<byte>();
			this.TaxCollectorsCount = reader.Read<byte>();
			this.TaxCollectorLifePoints = reader.Read<CustomVar<short>>();
			this.TaxCollectorDamagesBonuses = reader.Read<CustomVar<short>>();
			this.TaxCollectorPods = reader.Read<CustomVar<short>>();
			this.TaxCollectorProspecting = reader.Read<CustomVar<short>>();
			this.TaxCollectorWisdom = reader.Read<CustomVar<short>>();
			this.BoostPoints = reader.Read<CustomVar<short>>();
			int SpellId_length = reader.Read<short>();
			this.SpellId = new CustomVar<short>[SpellId_length];
			for(int i = 0; i < SpellId_length; i++)
				this.SpellId[i] = reader.Read<CustomVar<short>>();
			int SpellLevel_length = reader.Read<short>();
			this.SpellLevel = new short[SpellLevel_length];
			for(int i = 0; i < SpellLevel_length; i++)
				this.SpellLevel[i] = reader.Read<short>();

		}


	}
}
