//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:19.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using Renaissance.Binary;
using Renaissance.Protocol.types.game.guild.tax;

namespace Renaissance.Protocol.messages.game.guild.tax
{
    public class TaxCollectorListMessage : AbstractTaxCollectorListMessage, IDofusMessage
	{
		public new const int NetworkId = 5930;
		public new int ProtocolId { get { return NetworkId; } }

		public byte NbcollectorMax { get; set; }

		public TaxCollectorFightersInformation[] FightersInformations { get; set; }

		public byte InfoType { get; set; }


		public TaxCollectorListMessage() { }


		public TaxCollectorListMessage InitTaxCollectorListMessage(byte _nbcollectormax, TaxCollectorFightersInformation[] _fightersinformations, byte _infotype)
		{

			this.NbcollectorMax = _nbcollectormax;
			this.FightersInformations = _fightersinformations;
			this.InfoType = _infotype;

			return this;
		}

		public new byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(base.Serialize());
			writer.Write(this.NbcollectorMax);
			writer.Write((short)(this.FightersInformations.Length));
			foreach(var obj in FightersInformations)
			{
				writer.Write(obj.Serialize());
			}
			writer.Write(this.InfoType);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.NbcollectorMax = reader.Read<byte>();
			int FightersInformations_length = reader.Read<short>();
			this.FightersInformations = new TaxCollectorFightersInformation[FightersInformations_length];
			for(int i = 0; i < FightersInformations_length; i++)
			{
				this.FightersInformations[i] = new TaxCollectorFightersInformation();
				this.FightersInformations[i].Deserialize(reader);
			}
			this.InfoType = reader.Read<byte>();

		}


	}
}
