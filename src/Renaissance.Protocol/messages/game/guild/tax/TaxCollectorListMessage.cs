//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:50.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.guild.tax;
using    Renaissance.Protocol.types.game.guild.tax;

namespace Renaissance.Protocol.messages.game.guild.tax
{
	public class TaxCollectorListMessage : AbstractTaxCollectorListMessage, IDofusMessage
	{
		public new const int NetworkId = 5930;
		public new int ProtocolId { get { return NetworkId; } }

		public byte NbcollectorMax { get; set; }

		public TaxCollectorFightersInformation[] FightersInformations { get; set; }

		public byte InfoType { get; set; }


		public TaxCollectorListMessage() { }


		public TaxCollectorListMessage InitTaxCollectorListMessage(TaxCollectorInformations[] _informations, byte _nbcollectormax, TaxCollectorFightersInformation[] _fightersinformations, byte _infotype)
		{

			base.Informations = _informations;
			this.NbcollectorMax = _nbcollectormax;
			this.FightersInformations = _fightersinformations;
			this.InfoType = _infotype;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(NbcollectorMax);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.FightersInformations.Length));
			var memory1 = new Memory<byte>[FightersInformations.Length];
			for(int i = 0; i < FightersInformations.Length; i++)
			{
				memory1[i] = this.FightersInformations[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf(InfoType);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.NbcollectorMax);
			writer.WriteData((short)(this.FightersInformations.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData(this.InfoType);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.NbcollectorMax = reader.Read<byte>();
			int FightersInformations_length = reader.Read<short>();
			this.FightersInformations = new TaxCollectorFightersInformation[FightersInformations_length];
			for(int i = 0; i < FightersInformations_length; i++)
			{
				this.FightersInformations[i] = new TaxCollectorFightersInformation();
				this.FightersInformations[i].Deserialize(reader);
			}
			this.InfoType = reader.Read<byte>();

		}


	}
}
