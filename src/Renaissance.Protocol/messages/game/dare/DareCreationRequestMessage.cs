//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:10.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.dare;

namespace Renaissance.Protocol.messages.game.dare
{
	public class DareCreationRequestMessage : IDofusMessage
	{
		public  const int NetworkId = 6665;
		public  int ProtocolId { get { return NetworkId; } }

		public CustomVar<long> SubscriptionFee { get; set; }

		public CustomVar<long> Jackpot { get; set; }

		public short MaxCountWinners { get; set; }

		public uint DelayBeforeStart { get; set; }

		public uint Duration { get; set; }

		public WrappedBool IsPrivate { get; set; }

		public WrappedBool IsForGuild { get; set; }

		public WrappedBool IsForAlliance { get; set; }

		public WrappedBool NeedNotifications { get; set; }

		public DareCriteria[] Criterions { get; set; }


		public DareCreationRequestMessage() { }


		public DareCreationRequestMessage InitDareCreationRequestMessage(CustomVar<long> _subscriptionfee, CustomVar<long> _jackpot, short _maxcountwinners, uint _delaybeforestart, uint _duration, WrappedBool _isprivate, WrappedBool _isforguild, WrappedBool _isforalliance, WrappedBool _neednotifications, DareCriteria[] _criterions)
		{

			this.SubscriptionFee = _subscriptionfee;
			this.Jackpot = _jackpot;
			this.MaxCountWinners = _maxcountwinners;
			this.DelayBeforeStart = _delaybeforestart;
			this.Duration = _duration;
			this.IsPrivate = _isprivate;
			this.IsForGuild = _isforguild;
			this.IsForAlliance = _isforalliance;
			this.NeedNotifications = _neednotifications;
			this.Criterions = _criterions;

			return this;
		}

		public  byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			byte box = 0;
			box = writer.SetFlag(box,0,this.IsPrivate);
			box = writer.SetFlag(box,1,this.IsForGuild);
			box = writer.SetFlag(box,2,this.IsForAlliance);
			box = writer.SetFlag(box,3,this.NeedNotifications);
			writer.Write(box);
			writer.Write(this.SubscriptionFee);
			writer.Write(this.Jackpot);
			writer.Write(this.MaxCountWinners);
			writer.Write(this.DelayBeforeStart);
			writer.Write(this.Duration);
			writer.Write((short)(this.Criterions.Length));
			foreach(var obj in Criterions)
			{
				writer.Write(obj.Serialize());
			}

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			byte box = reader.Read<byte>();
			this.IsPrivate = reader.ReadFlag(box,0);
			this.IsForGuild = reader.ReadFlag(box,1);
			this.IsForAlliance = reader.ReadFlag(box,2);
			this.NeedNotifications = reader.ReadFlag(box,3);
			this.SubscriptionFee = reader.Read<CustomVar<long>>();
			this.Jackpot = reader.Read<CustomVar<long>>();
			this.MaxCountWinners = reader.Read<short>();
			this.DelayBeforeStart = reader.Read<uint>();
			this.Duration = reader.Read<uint>();
			int Criterions_length = reader.Read<short>();
			this.Criterions = new DareCriteria[Criterions_length];
			for(int i = 0; i < Criterions_length; i++)
			{
				this.Criterions[i] = new DareCriteria();
				this.Criterions[i].Deserialize(reader);
			}

		}


	}
}
