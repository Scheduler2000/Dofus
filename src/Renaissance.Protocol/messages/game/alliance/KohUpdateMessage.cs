//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:42.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.roleplay;
using    Renaissance.Protocol.types.game.context.roleplay;

namespace Renaissance.Protocol.messages.game.alliance
{
	public class KohUpdateMessage : IDofusMessage
	{
		public  const int NetworkId = 6439;
		public  int ProtocolId { get { return NetworkId; } }

		public AllianceInformations[] Alliances { get; set; }

		public CustomVar<short>[] AllianceNbMembers { get; set; }

		public CustomVar<int>[] AllianceRoundWeigth { get; set; }

		public byte[] AllianceMatchScore { get; set; }

		public BasicAllianceInformations[] AllianceMapWinners { get; set; }

		public CustomVar<int> AllianceMapWinnerScore { get; set; }

		public CustomVar<int> AllianceMapMyAllianceScore { get; set; }

		public double NextTickTime { get; set; }


		public KohUpdateMessage() { }


		public KohUpdateMessage InitKohUpdateMessage(AllianceInformations[] _alliances, CustomVar<short>[] _alliancenbmembers, CustomVar<int>[] _allianceroundweigth, byte[] _alliancematchscore, BasicAllianceInformations[] _alliancemapwinners, CustomVar<int> _alliancemapwinnerscore, CustomVar<int> _alliancemapmyalliancescore, double _nextticktime)
		{

			this.Alliances = _alliances;
			this.AllianceNbMembers = _alliancenbmembers;
			this.AllianceRoundWeigth = _allianceroundweigth;
			this.AllianceMatchScore = _alliancematchscore;
			this.AllianceMapWinners = _alliancemapwinners;
			this.AllianceMapWinnerScore = _alliancemapwinnerscore;
			this.AllianceMapMyAllianceScore = _alliancemapmyalliancescore;
			this.NextTickTime = _nextticktime;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Alliances.Length));
			var memory1 = new Memory<byte>[Alliances.Length];
			for(int i = 0; i < Alliances.Length; i++)
			{
				memory1[i] = this.Alliances[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.AllianceNbMembers.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(AllianceNbMembers);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.AllianceRoundWeigth.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(AllianceRoundWeigth);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.AllianceMatchScore.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(AllianceMatchScore);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.AllianceMapWinners.Length));
			var memory2 = new Memory<byte>[AllianceMapWinners.Length];
			for(int i = 0; i < AllianceMapWinners.Length; i++)
			{
				memory2[i] = this.AllianceMapWinners[i].Serialize();
				size += memory2[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf(AllianceMapWinnerScore);
			size += DofusBinaryFactory.Sizing.SizeOf(AllianceMapMyAllianceScore);
			size += DofusBinaryFactory.Sizing.SizeOf(NextTickTime);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData((short)(this.Alliances.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData((short)(this.AllianceNbMembers.Length));
			writer.WriteDatas(AllianceNbMembers);
			writer.WriteData((short)(this.AllianceRoundWeigth.Length));
			writer.WriteDatas(AllianceRoundWeigth);
			writer.WriteData((short)(this.AllianceMatchScore.Length));
			writer.WriteDatas(AllianceMatchScore);
			writer.WriteData((short)(this.AllianceMapWinners.Length));
			for(int i = 0; i < memory2.Length; i++)
			{
				writer.WriteDatas(memory2[i]);
			}
			writer.WriteData(this.AllianceMapWinnerScore);
			writer.WriteData(this.AllianceMapMyAllianceScore);
			writer.WriteData(this.NextTickTime);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			int Alliances_length = reader.Read<short>();
			this.Alliances = new AllianceInformations[Alliances_length];
			for(int i = 0; i < Alliances_length; i++)
			{
				this.Alliances[i] = new AllianceInformations();
				this.Alliances[i].Deserialize(reader);
			}
			int AllianceNbMembers_length = reader.Read<short>();
			this.AllianceNbMembers = new CustomVar<short>[AllianceNbMembers_length];
			for(int i = 0; i < AllianceNbMembers_length; i++)
				this.AllianceNbMembers[i] = reader.Read<CustomVar<short>>();
			int AllianceRoundWeigth_length = reader.Read<short>();
			this.AllianceRoundWeigth = new CustomVar<int>[AllianceRoundWeigth_length];
			for(int i = 0; i < AllianceRoundWeigth_length; i++)
				this.AllianceRoundWeigth[i] = reader.Read<CustomVar<int>>();
			int AllianceMatchScore_length = reader.Read<short>();
			this.AllianceMatchScore = new byte[AllianceMatchScore_length];
			for(int i = 0; i < AllianceMatchScore_length; i++)
				this.AllianceMatchScore[i] = reader.Read<byte>();
			int AllianceMapWinners_length = reader.Read<short>();
			this.AllianceMapWinners = new BasicAllianceInformations[AllianceMapWinners_length];
			for(int i = 0; i < AllianceMapWinners_length; i++)
			{
				this.AllianceMapWinners[i] = new BasicAllianceInformations();
				this.AllianceMapWinners[i].Deserialize(reader);
			}
			this.AllianceMapWinnerScore = reader.Read<CustomVar<int>>();
			this.AllianceMapMyAllianceScore = reader.Read<CustomVar<int>>();
			this.NextTickTime = reader.Read<double>();

		}


	}
}
