//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:47.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.messages.game.actions;
using    Renaissance.Protocol.types.game.context.fight;

namespace Renaissance.Protocol.messages.game.actions.fight
{
	public class GameActionFightMultipleSummonMessage : AbstractGameActionMessage, IDofusMessage
	{
		public new const int NetworkId = 6837;
		public new int ProtocolId { get { return NetworkId; } }

		public GameContextSummonsInformation[] Summons { get; set; }


		public GameActionFightMultipleSummonMessage() { }


		public GameActionFightMultipleSummonMessage InitGameActionFightMultipleSummonMessage(CustomVar<short> _actionid, double _sourceid, GameContextSummonsInformation[] _summons)
		{

			base.ActionId = _actionid;
			base.SourceId = _sourceid;
			this.Summons = _summons;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Summons.Length));
			var memory1 = new Memory<byte>[Summons.Length];
			for(int i = 0; i < Summons.Length; i++)
			{
				size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Summons[i].ProtocolId));
				memory1[i] = this.Summons[i].Serialize();
				size += memory1[i].Length;
			}
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData((short)(this.Summons.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteData((short)(Summons[i].ProtocolId));
				writer.WriteDatas(memory1[i]);
			}

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			int Summons_length = reader.Read<short>();
			this.Summons = new GameContextSummonsInformation[Summons_length];
			for(int i = 0; i < Summons_length; i++)
			{
			reader.Skip(2); // skip protocolManager.GetInstance(short)
				this.Summons[i] = new GameContextSummonsInformation();
				this.Summons[i].Deserialize(reader);
			}

		}


	}
}
