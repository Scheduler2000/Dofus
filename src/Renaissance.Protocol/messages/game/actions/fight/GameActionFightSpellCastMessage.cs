//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:48.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.messages.game.actions.fight
{
	public class GameActionFightSpellCastMessage : AbstractGameActionFightTargetedAbilityMessage, IDofusMessage
	{
		public new const int NetworkId = 1010;
		public new int ProtocolId { get { return NetworkId; } }

		public CustomVar<short> SpellId { get; set; }

		public short SpellLevel { get; set; }

		public short[] PortalsIds { get; set; }


		public GameActionFightSpellCastMessage() { }


		public GameActionFightSpellCastMessage InitGameActionFightSpellCastMessage(double _targetid, short _destinationcellid, byte _critical, WrappedBool _silentcast, WrappedBool _verbosecast, CustomVar<short> _actionid, double _sourceid, CustomVar<short> _spellid, short _spelllevel, short[] _portalsids)
		{

			base.TargetId = _targetid;
			base.DestinationCellId = _destinationcellid;
			base.Critical = _critical;
			base.SilentCast = _silentcast;
			base.VerboseCast = _verbosecast;
			base.ActionId = _actionid;
			base.SourceId = _sourceid;
			this.SpellId = _spellid;
			this.SpellLevel = _spelllevel;
			this.PortalsIds = _portalsids;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(SpellId);
			size += DofusBinaryFactory.Sizing.SizeOf(SpellLevel);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.PortalsIds.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(PortalsIds);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.SpellId);
			writer.WriteData(this.SpellLevel);
			writer.WriteData((short)(this.PortalsIds.Length));
			writer.WriteDatas(PortalsIds);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.SpellId = reader.Read<CustomVar<short>>();
			this.SpellLevel = reader.Read<short>();
			int PortalsIds_length = reader.Read<short>();
			this.PortalsIds = new short[PortalsIds_length];
			for(int i = 0; i < PortalsIds_length; i++)
				this.PortalsIds[i] = reader.Read<short>();

		}


	}
}
