//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:15.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.messages.game.actions;

namespace Renaissance.Protocol.messages.game.actions.fight
{
	public class AbstractGameActionFightTargetedAbilityMessage : AbstractGameActionMessage, IDofusMessage
	{
		public new const int NetworkId = 6118;
		public new int ProtocolId { get { return NetworkId; } }

		public double TargetId { get; set; }

		public short DestinationCellId { get; set; }

		public byte Critical { get; set; }

		public WrappedBool SilentCast { get; set; }

		public WrappedBool VerboseCast { get; set; }


		public AbstractGameActionFightTargetedAbilityMessage() { }


		public AbstractGameActionFightTargetedAbilityMessage InitAbstractGameActionFightTargetedAbilityMessage(double _targetid, short _destinationcellid, byte _critical, WrappedBool _silentcast, WrappedBool _verbosecast)
		{

			this.TargetId = _targetid;
			this.DestinationCellId = _destinationcellid;
			this.Critical = _critical;
			this.SilentCast = _silentcast;
			this.VerboseCast = _verbosecast;

			return this;
		}

		public new byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(base.Serialize());
			byte box = 0;
			box = writer.SetFlag(box,0,this.SilentCast);
			box = writer.SetFlag(box,1,this.VerboseCast);
			writer.Write(box);
			writer.Write(this.TargetId);
			writer.Write(this.DestinationCellId);
			writer.Write(this.Critical);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			byte box = reader.Read<byte>();
			this.SilentCast = reader.ReadFlag(box,0);
			this.VerboseCast = reader.ReadFlag(box,1);
			this.TargetId = reader.Read<double>();
			this.DestinationCellId = reader.Read<short>();
			this.Critical = reader.Read<byte>();

		}


	}
}
