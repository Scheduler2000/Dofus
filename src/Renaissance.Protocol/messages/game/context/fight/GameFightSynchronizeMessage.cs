//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:49.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.fight;

namespace Renaissance.Protocol.messages.game.context.fight
{
	public class GameFightSynchronizeMessage : IDofusMessage
	{
		public  const int NetworkId = 5921;
		public  int ProtocolId { get { return NetworkId; } }

		public GameFightFighterInformations[] Fighters { get; set; }


		public GameFightSynchronizeMessage() { }


		public GameFightSynchronizeMessage InitGameFightSynchronizeMessage(GameFightFighterInformations[] _fighters)
		{

			this.Fighters = _fighters;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Fighters.Length));
			var memory1 = new Memory<byte>[Fighters.Length];
			for(int i = 0; i < Fighters.Length; i++)
			{
				size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Fighters[i].ProtocolId));
				memory1[i] = this.Fighters[i].Serialize();
				size += memory1[i].Length;
			}


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData((short)(this.Fighters.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteData((short)(Fighters[i].ProtocolId));
				writer.WriteDatas(memory1[i]);
			}

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			int Fighters_length = reader.Read<short>();
			this.Fighters = new GameFightFighterInformations[Fighters_length];
			for(int i = 0; i < Fighters_length; i++)
			{
			reader.Skip(2); // skip protocolManager.GetInstance(short)
				this.Fighters[i] = new GameFightFighterInformations();
				this.Fighters[i].Deserialize(reader);
			}

		}


	}
}
