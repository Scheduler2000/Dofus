//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:49.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.messages.game.context.fight
{
	public class GameFightJoinMessage : IDofusMessage
	{
		public  const int NetworkId = 702;
		public  int ProtocolId { get { return NetworkId; } }

		public WrappedBool IsTeamPhase { get; set; }

		public WrappedBool CanBeCancelled { get; set; }

		public WrappedBool CanSayReady { get; set; }

		public WrappedBool IsFightStarted { get; set; }

		public short TimeMaxBeforeFightStart { get; set; }

		public byte FightType { get; set; }


		public GameFightJoinMessage() { }


		public GameFightJoinMessage InitGameFightJoinMessage(WrappedBool _isteamphase, WrappedBool _canbecancelled, WrappedBool _cansayready, WrappedBool _isfightstarted, short _timemaxbeforefightstart, byte _fighttype)
		{

			this.IsTeamPhase = _isteamphase;
			this.CanBeCancelled = _canbecancelled;
			this.CanSayReady = _cansayready;
			this.IsFightStarted = _isfightstarted;
			this.TimeMaxBeforeFightStart = _timemaxbeforefightstart;
			this.FightType = _fighttype;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size++;
			size++;
			size++;
			size++;
			size += DofusBinaryFactory.Sizing.SizeOf(TimeMaxBeforeFightStart);
			size += DofusBinaryFactory.Sizing.SizeOf(FightType);


			using DofusWriter writer = new DofusWriter(size);

			byte box = 0;
			box = writer.SetFlag(box,0,this.IsTeamPhase);
			box = writer.SetFlag(box,1,this.CanBeCancelled);
			box = writer.SetFlag(box,2,this.CanSayReady);
			box = writer.SetFlag(box,3,this.IsFightStarted);
			writer.WriteData(box);
			writer.WriteData(this.TimeMaxBeforeFightStart);
			writer.WriteData(this.FightType);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			byte box = reader.Read<byte>();
			this.IsTeamPhase = reader.ReadFlag(box,0);
			this.CanBeCancelled = reader.ReadFlag(box,1);
			this.CanSayReady = reader.ReadFlag(box,2);
			this.IsFightStarted = reader.ReadFlag(box,3);
			this.TimeMaxBeforeFightStart = reader.Read<short>();
			this.FightType = reader.Read<byte>();

		}


	}
}
