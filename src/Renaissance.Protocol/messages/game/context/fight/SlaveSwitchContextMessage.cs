//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:18.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.character.characteristic;
using    Renaissance.Protocol.types.game.data.items;
using    Renaissance.Protocol.types.game.shortcut;

namespace Renaissance.Protocol.messages.game.context.fight
{
	public class SlaveSwitchContextMessage : IDofusMessage
	{
		public  const int NetworkId = 6214;
		public  int ProtocolId { get { return NetworkId; } }

		public double MasterId { get; set; }

		public double SlaveId { get; set; }

		public SpellItem[] SlaveSpells { get; set; }

		public CharacterCharacteristicsInformations SlaveStats { get; set; }

		public Shortcut[] Shortcuts { get; set; }


		public SlaveSwitchContextMessage() { }


		public SlaveSwitchContextMessage InitSlaveSwitchContextMessage(double _masterid, double _slaveid, SpellItem[] _slavespells, CharacterCharacteristicsInformations _slavestats, Shortcut[] _shortcuts)
		{

			this.MasterId = _masterid;
			this.SlaveId = _slaveid;
			this.SlaveSpells = _slavespells;
			this.SlaveStats = _slavestats;
			this.Shortcuts = _shortcuts;

			return this;
		}

		public  byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(this.MasterId);
			writer.Write(this.SlaveId);
			writer.Write((short)(this.SlaveSpells.Length));
			foreach(var obj in SlaveSpells)
			{
				writer.Write(obj.Serialize());
			}
			writer.Write(this.SlaveStats.Serialize());
			writer.Write((short)(this.Shortcuts.Length));
			foreach(var obj in Shortcuts)
			{
				writer.Write((short)(obj.ProtocolId));
				writer.Write(obj.Serialize());
			}

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.MasterId = reader.Read<double>();
			this.SlaveId = reader.Read<double>();
			int SlaveSpells_length = reader.Read<short>();
			this.SlaveSpells = new SpellItem[SlaveSpells_length];
			for(int i = 0; i < SlaveSpells_length; i++)
			{
				this.SlaveSpells[i] = new SpellItem();
				this.SlaveSpells[i].Deserialize(reader);
			}
			this.SlaveStats = new CharacterCharacteristicsInformations();
			this.SlaveStats.Deserialize(reader);
			int Shortcuts_length = reader.Read<short>();
			this.Shortcuts = new Shortcut[Shortcuts_length];
			for(int i = 0; i < Shortcuts_length; i++)
			{
reader.Skip(2); // skip read short for protocolManager.GetInstance(short)
				this.Shortcuts[i] = new Shortcut();
				this.Shortcuts[i].Deserialize(reader);
			}

		}


	}
}
