//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:49.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.action.fight;
using    Renaissance.Protocol.types.game.actions.fight;
using    Renaissance.Protocol.types.game.context.fight;
using    Renaissance.Protocol.types.game.idol;

namespace Renaissance.Protocol.messages.game.context.fight
{
	public class GameFightSpectateMessage : IDofusMessage
	{
		public  const int NetworkId = 6069;
		public  int ProtocolId { get { return NetworkId; } }

		public FightDispellableEffectExtendedInformations[] Effects { get; set; }

		public GameActionMark[] Marks { get; set; }

		public CustomVar<short> GameTurn { get; set; }

		public int FightStart { get; set; }

		public Idol[] Idols { get; set; }

		public GameFightEffectTriggerCount[] FxTriggerCounts { get; set; }


		public GameFightSpectateMessage() { }


		public GameFightSpectateMessage InitGameFightSpectateMessage(FightDispellableEffectExtendedInformations[] _effects, GameActionMark[] _marks, CustomVar<short> _gameturn, int _fightstart, Idol[] _idols, GameFightEffectTriggerCount[] _fxtriggercounts)
		{

			this.Effects = _effects;
			this.Marks = _marks;
			this.GameTurn = _gameturn;
			this.FightStart = _fightstart;
			this.Idols = _idols;
			this.FxTriggerCounts = _fxtriggercounts;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Effects.Length));
			var memory1 = new Memory<byte>[Effects.Length];
			for(int i = 0; i < Effects.Length; i++)
			{
				memory1[i] = this.Effects[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Marks.Length));
			var memory2 = new Memory<byte>[Marks.Length];
			for(int i = 0; i < Marks.Length; i++)
			{
				memory2[i] = this.Marks[i].Serialize();
				size += memory2[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf(GameTurn);
			size += DofusBinaryFactory.Sizing.SizeOf(FightStart);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Idols.Length));
			var memory3 = new Memory<byte>[Idols.Length];
			for(int i = 0; i < Idols.Length; i++)
			{
				memory3[i] = this.Idols[i].Serialize();
				size += memory3[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.FxTriggerCounts.Length));
			var memory4 = new Memory<byte>[FxTriggerCounts.Length];
			for(int i = 0; i < FxTriggerCounts.Length; i++)
			{
				memory4[i] = this.FxTriggerCounts[i].Serialize();
				size += memory4[i].Length;
			}


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData((short)(this.Effects.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData((short)(this.Marks.Length));
			for(int i = 0; i < memory2.Length; i++)
			{
				writer.WriteDatas(memory2[i]);
			}
			writer.WriteData(this.GameTurn);
			writer.WriteData(this.FightStart);
			writer.WriteData((short)(this.Idols.Length));
			for(int i = 0; i < memory3.Length; i++)
			{
				writer.WriteDatas(memory3[i]);
			}
			writer.WriteData((short)(this.FxTriggerCounts.Length));
			for(int i = 0; i < memory4.Length; i++)
			{
				writer.WriteDatas(memory4[i]);
			}

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			int Effects_length = reader.Read<short>();
			this.Effects = new FightDispellableEffectExtendedInformations[Effects_length];
			for(int i = 0; i < Effects_length; i++)
			{
				this.Effects[i] = new FightDispellableEffectExtendedInformations();
				this.Effects[i].Deserialize(reader);
			}
			int Marks_length = reader.Read<short>();
			this.Marks = new GameActionMark[Marks_length];
			for(int i = 0; i < Marks_length; i++)
			{
				this.Marks[i] = new GameActionMark();
				this.Marks[i].Deserialize(reader);
			}
			this.GameTurn = reader.Read<CustomVar<short>>();
			this.FightStart = reader.Read<int>();
			int Idols_length = reader.Read<short>();
			this.Idols = new Idol[Idols_length];
			for(int i = 0; i < Idols_length; i++)
			{
				this.Idols[i] = new Idol();
				this.Idols[i].Deserialize(reader);
			}
			int FxTriggerCounts_length = reader.Read<short>();
			this.FxTriggerCounts = new GameFightEffectTriggerCount[FxTriggerCounts_length];
			for(int i = 0; i < FxTriggerCounts_length; i++)
			{
				this.FxTriggerCounts[i] = new GameFightEffectTriggerCount();
				this.FxTriggerCounts[i].Deserialize(reader);
			}

		}


	}
}
