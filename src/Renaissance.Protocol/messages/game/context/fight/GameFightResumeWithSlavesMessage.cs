//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:49.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.action.fight;
using    Renaissance.Protocol.types.game.actions.fight;
using    Renaissance.Protocol.types.game.context.fight;
using    Renaissance.Protocol.types.game.context.fight;
using    Renaissance.Protocol.types.game.context.fight;
using    Renaissance.Protocol.types.game.idol;

namespace Renaissance.Protocol.messages.game.context.fight
{
	public class GameFightResumeWithSlavesMessage : GameFightResumeMessage, IDofusMessage
	{
		public new const int NetworkId = 6215;
		public new int ProtocolId { get { return NetworkId; } }

		public GameFightResumeSlaveInfo[] SlavesInfo { get; set; }


		public GameFightResumeWithSlavesMessage() { }


		public GameFightResumeWithSlavesMessage InitGameFightResumeWithSlavesMessage(GameFightSpellCooldown[] _spellcooldowns, byte _summoncount, byte _bombcount, GameFightResumeSlaveInfo[] _slavesinfo)
		{

			base.SpellCooldowns = _spellcooldowns;
			base.SummonCount = _summoncount;
			base.BombCount = _bombcount;
			this.SlavesInfo = _slavesinfo;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.SlavesInfo.Length));
			var memory1 = new Memory<byte>[SlavesInfo.Length];
			for(int i = 0; i < SlavesInfo.Length; i++)
			{
				memory1[i] = this.SlavesInfo[i].Serialize();
				size += memory1[i].Length;
			}
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData((short)(this.SlavesInfo.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			int SlavesInfo_length = reader.Read<short>();
			this.SlavesInfo = new GameFightResumeSlaveInfo[SlavesInfo_length];
			for(int i = 0; i < SlavesInfo_length; i++)
			{
				this.SlavesInfo[i] = new GameFightResumeSlaveInfo();
				this.SlavesInfo[i].Deserialize(reader);
			}

		}


	}
}
