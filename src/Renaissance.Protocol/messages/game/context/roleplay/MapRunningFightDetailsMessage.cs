//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:19.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.fight;

namespace Renaissance.Protocol.messages.game.context.roleplay
{
	public class MapRunningFightDetailsMessage : IDofusMessage
	{
		public  const int NetworkId = 5751;
		public  int ProtocolId { get { return NetworkId; } }

		public CustomVar<short> FightId { get; set; }

		public GameFightFighterLightInformations[] Attackers { get; set; }

		public GameFightFighterLightInformations[] Defenders { get; set; }


		public MapRunningFightDetailsMessage() { }


		public MapRunningFightDetailsMessage InitMapRunningFightDetailsMessage(CustomVar<short> _fightid, GameFightFighterLightInformations[] _attackers, GameFightFighterLightInformations[] _defenders)
		{

			this.FightId = _fightid;
			this.Attackers = _attackers;
			this.Defenders = _defenders;

			return this;
		}

		public  byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(this.FightId);
			writer.Write((short)(this.Attackers.Length));
			foreach(var obj in Attackers)
			{
				writer.Write((short)(obj.ProtocolId));
				writer.Write(obj.Serialize());
			}
			writer.Write((short)(this.Defenders.Length));
			foreach(var obj in Defenders)
			{
				writer.Write((short)(obj.ProtocolId));
				writer.Write(obj.Serialize());
			}

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.FightId = reader.Read<CustomVar<short>>();
			int Attackers_length = reader.Read<short>();
			this.Attackers = new GameFightFighterLightInformations[Attackers_length];
			for(int i = 0; i < Attackers_length; i++)
			{
reader.Skip(2); // skip read short for protocolManager.GetInstance(short)
				this.Attackers[i] = new GameFightFighterLightInformations();
				this.Attackers[i].Deserialize(reader);
			}
			int Defenders_length = reader.Read<short>();
			this.Defenders = new GameFightFighterLightInformations[Defenders_length];
			for(int i = 0; i < Defenders_length; i++)
			{
reader.Skip(2); // skip read short for protocolManager.GetInstance(short)
				this.Defenders[i] = new GameFightFighterLightInformations();
				this.Defenders[i].Deserialize(reader);
			}

		}


	}
}
