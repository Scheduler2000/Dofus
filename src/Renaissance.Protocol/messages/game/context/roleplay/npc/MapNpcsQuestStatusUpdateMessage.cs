//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:55.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.roleplay.quest;

namespace Renaissance.Protocol.messages.game.context.roleplay.npc
{
	public class MapNpcsQuestStatusUpdateMessage : IDofusMessage
	{
		public  const int NetworkId = 5642;
		public  int ProtocolId { get { return NetworkId; } }

		public double MapId { get; set; }

		public int[] NpcsIdsWithQuest { get; set; }

		public GameRolePlayNpcQuestFlag[] QuestFlags { get; set; }

		public int[] NpcsIdsWithoutQuest { get; set; }


		public MapNpcsQuestStatusUpdateMessage() { }


		public MapNpcsQuestStatusUpdateMessage InitMapNpcsQuestStatusUpdateMessage(double _mapid, int[] _npcsidswithquest, GameRolePlayNpcQuestFlag[] _questflags, int[] _npcsidswithoutquest)
		{

			this.MapId = _mapid;
			this.NpcsIdsWithQuest = _npcsidswithquest;
			this.QuestFlags = _questflags;
			this.NpcsIdsWithoutQuest = _npcsidswithoutquest;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(MapId);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.NpcsIdsWithQuest.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(NpcsIdsWithQuest);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.QuestFlags.Length));
			var memory1 = new Memory<byte>[QuestFlags.Length];
			for(int i = 0; i < QuestFlags.Length; i++)
			{
				memory1[i] = this.QuestFlags[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.NpcsIdsWithoutQuest.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(NpcsIdsWithoutQuest);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.MapId);
			writer.WriteData((short)(this.NpcsIdsWithQuest.Length));
			writer.WriteDatas(NpcsIdsWithQuest);
			writer.WriteData((short)(this.QuestFlags.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData((short)(this.NpcsIdsWithoutQuest.Length));
			writer.WriteDatas(NpcsIdsWithoutQuest);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.MapId = reader.Read<double>();
			int NpcsIdsWithQuest_length = reader.Read<short>();
			this.NpcsIdsWithQuest = new int[NpcsIdsWithQuest_length];
			for(int i = 0; i < NpcsIdsWithQuest_length; i++)
				this.NpcsIdsWithQuest[i] = reader.Read<int>();
			int QuestFlags_length = reader.Read<short>();
			this.QuestFlags = new GameRolePlayNpcQuestFlag[QuestFlags_length];
			for(int i = 0; i < QuestFlags_length; i++)
			{
				this.QuestFlags[i] = new GameRolePlayNpcQuestFlag();
				this.QuestFlags[i].Deserialize(reader);
			}
			int NpcsIdsWithoutQuest_length = reader.Read<short>();
			this.NpcsIdsWithoutQuest = new int[NpcsIdsWithoutQuest_length];
			for(int i = 0; i < NpcsIdsWithoutQuest_length; i++)
				this.NpcsIdsWithoutQuest[i] = reader.Read<int>();

		}


	}
}
