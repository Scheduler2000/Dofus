//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:19.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using Renaissance.Binary;
using Renaissance.Binary.Definition;
using Renaissance.Protocol.types.game.context.fight;
using Renaissance.Protocol.types.game.context.roleplay;
using Renaissance.Protocol.types.game.house;
using Renaissance.Protocol.types.game.interactive;

namespace Renaissance.Protocol.messages.game.context.roleplay
{
    public class MapComplementaryInformationsDataMessage : IDofusMessage
	{
		public  const int NetworkId = 226;
		public  int ProtocolId { get { return NetworkId; } }

		public CustomVar<short> SubAreaId { get; set; }

		public double MapId { get; set; }

		public HouseInformations[] Houses { get; set; }

		public GameRolePlayActorInformations[] Actors { get; set; }

		public InteractiveElement[] InteractiveElements { get; set; }

		public StatedElement[] StatedElements { get; set; }

		public MapObstacle[] Obstacles { get; set; }

		public FightCommonInformations[] Fights { get; set; }

		public bool HasAggressiveMonsters { get; set; }

		public FightStartingPositions FightStartPositions { get; set; }


		public MapComplementaryInformationsDataMessage() { }


		public MapComplementaryInformationsDataMessage InitMapComplementaryInformationsDataMessage(CustomVar<short> _subareaid, double _mapid, HouseInformations[] _houses, GameRolePlayActorInformations[] _actors, InteractiveElement[] _interactiveelements, StatedElement[] _statedelements, MapObstacle[] _obstacles, FightCommonInformations[] _fights, bool _hasaggressivemonsters, FightStartingPositions _fightstartpositions)
		{

			this.SubAreaId = _subareaid;
			this.MapId = _mapid;
			this.Houses = _houses;
			this.Actors = _actors;
			this.InteractiveElements = _interactiveelements;
			this.StatedElements = _statedelements;
			this.Obstacles = _obstacles;
			this.Fights = _fights;
			this.HasAggressiveMonsters = _hasaggressivemonsters;
			this.FightStartPositions = _fightstartpositions;

			return this;
		}

		public  byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(this.SubAreaId);
			writer.Write(this.MapId);
			writer.Write((short)(this.Houses.Length));
			foreach(var obj in Houses)
			{
				writer.Write((short)(obj.ProtocolId));
				writer.Write(obj.Serialize());
			}
			writer.Write((short)(this.Actors.Length));
			foreach(var obj in Actors)
			{
				writer.Write((short)(obj.ProtocolId));
				writer.Write(obj.Serialize());
			}
			writer.Write((short)(this.InteractiveElements.Length));
			foreach(var obj in InteractiveElements)
			{
				writer.Write((short)(obj.ProtocolId));
				writer.Write(obj.Serialize());
			}
			writer.Write((short)(this.StatedElements.Length));
			foreach(var obj in StatedElements)
			{
				writer.Write(obj.Serialize());
			}
			writer.Write((short)(this.Obstacles.Length));
			foreach(var obj in Obstacles)
			{
				writer.Write(obj.Serialize());
			}
			writer.Write((short)(this.Fights.Length));
			foreach(var obj in Fights)
			{
				writer.Write(obj.Serialize());
			}
			writer.Write(this.HasAggressiveMonsters);
			writer.Write(this.FightStartPositions.Serialize());

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.SubAreaId = reader.Read<CustomVar<short>>();
			this.MapId = reader.Read<double>();
			int Houses_length = reader.Read<short>();
			this.Houses = new HouseInformations[Houses_length];
			for(int i = 0; i < Houses_length; i++)
			{
reader.Skip(2); // skip read short for protocolManager.GetInstance(short)
				this.Houses[i] = new HouseInformations();
				this.Houses[i].Deserialize(reader);
			}
			int Actors_length = reader.Read<short>();
			this.Actors = new GameRolePlayActorInformations[Actors_length];
			for(int i = 0; i < Actors_length; i++)
			{
reader.Skip(2); // skip read short for protocolManager.GetInstance(short)
				this.Actors[i] = new GameRolePlayActorInformations();
				this.Actors[i].Deserialize(reader);
			}
			int InteractiveElements_length = reader.Read<short>();
			this.InteractiveElements = new InteractiveElement[InteractiveElements_length];
			for(int i = 0; i < InteractiveElements_length; i++)
			{
reader.Skip(2); // skip read short for protocolManager.GetInstance(short)
				this.InteractiveElements[i] = new InteractiveElement();
				this.InteractiveElements[i].Deserialize(reader);
			}
			int StatedElements_length = reader.Read<short>();
			this.StatedElements = new StatedElement[StatedElements_length];
			for(int i = 0; i < StatedElements_length; i++)
			{
				this.StatedElements[i] = new StatedElement();
				this.StatedElements[i].Deserialize(reader);
			}
			int Obstacles_length = reader.Read<short>();
			this.Obstacles = new MapObstacle[Obstacles_length];
			for(int i = 0; i < Obstacles_length; i++)
			{
				this.Obstacles[i] = new MapObstacle();
				this.Obstacles[i].Deserialize(reader);
			}
			int Fights_length = reader.Read<short>();
			this.Fights = new FightCommonInformations[Fights_length];
			for(int i = 0; i < Fights_length; i++)
			{
				this.Fights[i] = new FightCommonInformations();
				this.Fights[i].Deserialize(reader);
			}
			this.HasAggressiveMonsters = reader.Read<bool>();
			this.FightStartPositions = new FightStartingPositions();
			this.FightStartPositions.Deserialize(reader);

		}


	}
}
