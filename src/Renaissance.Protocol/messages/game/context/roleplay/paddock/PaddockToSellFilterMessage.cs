//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:55.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.messages.game.context.roleplay.paddock
{
	public class PaddockToSellFilterMessage : IDofusMessage
	{
		public  const int NetworkId = 6161;
		public  int ProtocolId { get { return NetworkId; } }

		public int AreaId { get; set; }

		public byte AtLeastNbMount { get; set; }

		public byte AtLeastNbMachine { get; set; }

		public CustomVar<long> MaxPrice { get; set; }

		public byte OrderBy { get; set; }


		public PaddockToSellFilterMessage() { }


		public PaddockToSellFilterMessage InitPaddockToSellFilterMessage(int _areaid, byte _atleastnbmount, byte _atleastnbmachine, CustomVar<long> _maxprice, byte _orderby)
		{

			this.AreaId = _areaid;
			this.AtLeastNbMount = _atleastnbmount;
			this.AtLeastNbMachine = _atleastnbmachine;
			this.MaxPrice = _maxprice;
			this.OrderBy = _orderby;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(AreaId);
			size += DofusBinaryFactory.Sizing.SizeOf(AtLeastNbMount);
			size += DofusBinaryFactory.Sizing.SizeOf(AtLeastNbMachine);
			size += DofusBinaryFactory.Sizing.SizeOf(MaxPrice);
			size += DofusBinaryFactory.Sizing.SizeOf(OrderBy);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.AreaId);
			writer.WriteData(this.AtLeastNbMount);
			writer.WriteData(this.AtLeastNbMachine);
			writer.WriteData(this.MaxPrice);
			writer.WriteData(this.OrderBy);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.AreaId = reader.Read<int>();
			this.AtLeastNbMount = reader.Read<byte>();
			this.AtLeastNbMachine = reader.Read<byte>();
			this.MaxPrice = reader.Read<CustomVar<long>>();
			this.OrderBy = reader.Read<byte>();

		}


	}
}
