//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:57.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.messages.game.context.roleplay.fight.arena
{
	public class GameRolePlayArenaLeagueRewardsMessage : IDofusMessage
	{
		public  const int NetworkId = 6785;
		public  int ProtocolId { get { return NetworkId; } }

		public CustomVar<short> SeasonId { get; set; }

		public CustomVar<short> LeagueId { get; set; }

		public int LadderPosition { get; set; }

		public bool EndSeasonReward { get; set; }


		public GameRolePlayArenaLeagueRewardsMessage() { }


		public GameRolePlayArenaLeagueRewardsMessage InitGameRolePlayArenaLeagueRewardsMessage(CustomVar<short> _seasonid, CustomVar<short> _leagueid, int _ladderposition, bool _endseasonreward)
		{

			this.SeasonId = _seasonid;
			this.LeagueId = _leagueid;
			this.LadderPosition = _ladderposition;
			this.EndSeasonReward = _endseasonreward;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(SeasonId);
			size += DofusBinaryFactory.Sizing.SizeOf(LeagueId);
			size += DofusBinaryFactory.Sizing.SizeOf(LadderPosition);
			size += DofusBinaryFactory.Sizing.SizeOf(EndSeasonReward);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.SeasonId);
			writer.WriteData(this.LeagueId);
			writer.WriteData(this.LadderPosition);
			writer.WriteData(this.EndSeasonReward);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.SeasonId = reader.Read<CustomVar<short>>();
			this.LeagueId = reader.Read<CustomVar<short>>();
			this.LadderPosition = reader.Read<int>();
			this.EndSeasonReward = reader.Read<bool>();

		}


	}
}
