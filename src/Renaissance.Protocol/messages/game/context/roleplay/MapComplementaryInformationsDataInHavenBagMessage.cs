//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:50.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.character;
using    Renaissance.Protocol.types.game.context.fight;
using    Renaissance.Protocol.types.game.context.fight;
using    Renaissance.Protocol.types.game.context.roleplay;
using    Renaissance.Protocol.types.game.house;
using    Renaissance.Protocol.types.game.interactive;
using    Renaissance.Protocol.types.game.interactive;
using    Renaissance.Protocol.types.game.interactive;

namespace Renaissance.Protocol.messages.game.context.roleplay
{
	public class MapComplementaryInformationsDataInHavenBagMessage : MapComplementaryInformationsDataMessage, IDofusMessage
	{
		public new const int NetworkId = 6622;
		public new int ProtocolId { get { return NetworkId; } }

		public CharacterMinimalInformations OwnerInformations { get; set; }

		public byte Theme { get; set; }

		public byte RoomId { get; set; }

		public byte MaxRoomId { get; set; }


		public MapComplementaryInformationsDataInHavenBagMessage() { }


		public MapComplementaryInformationsDataInHavenBagMessage InitMapComplementaryInformationsDataInHavenBagMessage(CharacterMinimalInformations _ownerinformations, byte _theme, byte _roomid, byte _maxroomid)
		{

			this.OwnerInformations = _ownerinformations;
			this.Theme = _theme;
			this.RoomId = _roomid;
			this.MaxRoomId = _maxroomid;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			var serialized1 = this.OwnerInformations.Serialize();
			size += serialized1.Length;
			size += DofusBinaryFactory.Sizing.SizeOf(Theme);
			size += DofusBinaryFactory.Sizing.SizeOf(RoomId);
			size += DofusBinaryFactory.Sizing.SizeOf(MaxRoomId);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteDatas(serialized1);
			writer.WriteData(this.Theme);
			writer.WriteData(this.RoomId);
			writer.WriteData(this.MaxRoomId);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.OwnerInformations = new CharacterMinimalInformations();
			this.OwnerInformations.Deserialize(reader);
			this.Theme = reader.Read<byte>();
			this.RoomId = reader.Read<byte>();
			this.MaxRoomId = reader.Read<byte>();

		}


	}
}
