//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:54.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;

namespace Renaissance.Protocol.messages.game.context.roleplay.havenbag
{
	public class HavenBagFurnituresRequestMessage : IDofusMessage
	{
		public  const int NetworkId = 6637;
		public  int ProtocolId { get { return NetworkId; } }

		public CustomVar<short>[] CellIds { get; set; }

		public int[] FunitureIds { get; set; }

		public byte[] Orientations { get; set; }


		public HavenBagFurnituresRequestMessage() { }


		public HavenBagFurnituresRequestMessage InitHavenBagFurnituresRequestMessage(CustomVar<short>[] _cellids, int[] _funitureids, byte[] _orientations)
		{

			this.CellIds = _cellids;
			this.FunitureIds = _funitureids;
			this.Orientations = _orientations;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.CellIds.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(CellIds);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.FunitureIds.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(FunitureIds);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Orientations.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(Orientations);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData((short)(this.CellIds.Length));
			writer.WriteDatas(CellIds);
			writer.WriteData((short)(this.FunitureIds.Length));
			writer.WriteDatas(FunitureIds);
			writer.WriteData((short)(this.Orientations.Length));
			writer.WriteDatas(Orientations);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			int CellIds_length = reader.Read<short>();
			this.CellIds = new CustomVar<short>[CellIds_length];
			for(int i = 0; i < CellIds_length; i++)
				this.CellIds[i] = reader.Read<CustomVar<short>>();
			int FunitureIds_length = reader.Read<short>();
			this.FunitureIds = new int[FunitureIds_length];
			for(int i = 0; i < FunitureIds_length; i++)
				this.FunitureIds[i] = reader.Read<int>();
			int Orientations_length = reader.Read<short>();
			this.Orientations = new byte[Orientations_length];
			for(int i = 0; i < Orientations_length; i++)
				this.Orientations[i] = reader.Read<byte>();

		}


	}
}
