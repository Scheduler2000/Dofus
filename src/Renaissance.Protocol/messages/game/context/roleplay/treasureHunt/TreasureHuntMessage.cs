//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:56.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.roleplay.treasureHunt;
using    Renaissance.Protocol.types.game.context.roleplay.treasureHunt;

namespace Renaissance.Protocol.messages.game.context.roleplay.treasureHunt
{
	public class TreasureHuntMessage : IDofusMessage
	{
		public  const int NetworkId = 6486;
		public  int ProtocolId { get { return NetworkId; } }

		public byte QuestType { get; set; }

		public double StartMapId { get; set; }

		public TreasureHuntStep[] KnownStepsList { get; set; }

		public byte TotalStepCount { get; set; }

		public CustomVar<int> CheckPointCurrent { get; set; }

		public CustomVar<int> CheckPointTotal { get; set; }

		public int AvailableRetryCount { get; set; }

		public TreasureHuntFlag[] Flags { get; set; }


		public TreasureHuntMessage() { }


		public TreasureHuntMessage InitTreasureHuntMessage(byte _questtype, double _startmapid, TreasureHuntStep[] _knownstepslist, byte _totalstepcount, CustomVar<int> _checkpointcurrent, CustomVar<int> _checkpointtotal, int _availableretrycount, TreasureHuntFlag[] _flags)
		{

			this.QuestType = _questtype;
			this.StartMapId = _startmapid;
			this.KnownStepsList = _knownstepslist;
			this.TotalStepCount = _totalstepcount;
			this.CheckPointCurrent = _checkpointcurrent;
			this.CheckPointTotal = _checkpointtotal;
			this.AvailableRetryCount = _availableretrycount;
			this.Flags = _flags;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(QuestType);
			size += DofusBinaryFactory.Sizing.SizeOf(StartMapId);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.KnownStepsList.Length));
			var memory1 = new Memory<byte>[KnownStepsList.Length];
			for(int i = 0; i < KnownStepsList.Length; i++)
			{
				size += DofusBinaryFactory.Sizing.SizeOf((short)(this.KnownStepsList[i].ProtocolId));
				memory1[i] = this.KnownStepsList[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf(TotalStepCount);
			size += DofusBinaryFactory.Sizing.SizeOf(CheckPointCurrent);
			size += DofusBinaryFactory.Sizing.SizeOf(CheckPointTotal);
			size += DofusBinaryFactory.Sizing.SizeOf(AvailableRetryCount);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Flags.Length));
			var memory2 = new Memory<byte>[Flags.Length];
			for(int i = 0; i < Flags.Length; i++)
			{
				memory2[i] = this.Flags[i].Serialize();
				size += memory2[i].Length;
			}


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.QuestType);
			writer.WriteData(this.StartMapId);
			writer.WriteData((short)(this.KnownStepsList.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteData((short)(KnownStepsList[i].ProtocolId));
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData(this.TotalStepCount);
			writer.WriteData(this.CheckPointCurrent);
			writer.WriteData(this.CheckPointTotal);
			writer.WriteData(this.AvailableRetryCount);
			writer.WriteData((short)(this.Flags.Length));
			for(int i = 0; i < memory2.Length; i++)
			{
				writer.WriteDatas(memory2[i]);
			}

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.QuestType = reader.Read<byte>();
			this.StartMapId = reader.Read<double>();
			int KnownStepsList_length = reader.Read<short>();
			this.KnownStepsList = new TreasureHuntStep[KnownStepsList_length];
			for(int i = 0; i < KnownStepsList_length; i++)
			{
			reader.Skip(2); // skip protocolManager.GetInstance(short)
				this.KnownStepsList[i] = new TreasureHuntStep();
				this.KnownStepsList[i].Deserialize(reader);
			}
			this.TotalStepCount = reader.Read<byte>();
			this.CheckPointCurrent = reader.Read<CustomVar<int>>();
			this.CheckPointTotal = reader.Read<CustomVar<int>>();
			this.AvailableRetryCount = reader.Read<int>();
			int Flags_length = reader.Read<short>();
			this.Flags = new TreasureHuntFlag[Flags_length];
			for(int i = 0; i < Flags_length; i++)
			{
				this.Flags[i] = new TreasureHuntFlag();
				this.Flags[i].Deserialize(reader);
			}

		}


	}
}
