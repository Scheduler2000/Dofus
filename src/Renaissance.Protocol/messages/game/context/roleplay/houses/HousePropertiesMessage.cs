//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:54.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.house;

namespace Renaissance.Protocol.messages.game.context.roleplay.houses
{
	public class HousePropertiesMessage : IDofusMessage
	{
		public  const int NetworkId = 5734;
		public  int ProtocolId { get { return NetworkId; } }

		public CustomVar<int> HouseId { get; set; }

		public int[] DoorsOnMap { get; set; }

		public HouseInstanceInformations Properties { get; set; }


		public HousePropertiesMessage() { }


		public HousePropertiesMessage InitHousePropertiesMessage(CustomVar<int> _houseid, int[] _doorsonmap, HouseInstanceInformations _properties)
		{

			this.HouseId = _houseid;
			this.DoorsOnMap = _doorsonmap;
			this.Properties = _properties;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(HouseId);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.DoorsOnMap.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(DoorsOnMap);
			size += 2;
			var serialized1 = this.Properties.Serialize();
			size += serialized1.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData(this.HouseId);
			writer.WriteData((short)(this.DoorsOnMap.Length));
			writer.WriteDatas(DoorsOnMap);
			writer.WriteData((short)(Properties.ProtocolId));
			writer.WriteDatas(serialized1);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.HouseId = reader.Read<CustomVar<int>>();
			int DoorsOnMap_length = reader.Read<short>();
			this.DoorsOnMap = new int[DoorsOnMap_length];
			for(int i = 0; i < DoorsOnMap_length; i++)
				this.DoorsOnMap[i] = reader.Read<int>();
			reader.Skip(2); // skip protocolManager.GetInstance(short)
			this.Properties = new HouseInstanceInformations();
			this.Properties.Deserialize(reader);

		}


	}
}
