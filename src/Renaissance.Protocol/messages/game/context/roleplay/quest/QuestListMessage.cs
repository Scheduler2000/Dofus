//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:56.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.roleplay.quest;

namespace Renaissance.Protocol.messages.game.context.roleplay.quest
{
	public class QuestListMessage : IDofusMessage
	{
		public  const int NetworkId = 5626;
		public  int ProtocolId { get { return NetworkId; } }

		public CustomVar<short>[] FinishedQuestsIds { get; set; }

		public CustomVar<short>[] FinishedQuestsCounts { get; set; }

		public QuestActiveInformations[] ActiveQuests { get; set; }

		public CustomVar<short>[] ReinitDoneQuestsIds { get; set; }


		public QuestListMessage() { }


		public QuestListMessage InitQuestListMessage(CustomVar<short>[] _finishedquestsids, CustomVar<short>[] _finishedquestscounts, QuestActiveInformations[] _activequests, CustomVar<short>[] _reinitdonequestsids)
		{

			this.FinishedQuestsIds = _finishedquestsids;
			this.FinishedQuestsCounts = _finishedquestscounts;
			this.ActiveQuests = _activequests;
			this.ReinitDoneQuestsIds = _reinitdonequestsids;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.FinishedQuestsIds.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(FinishedQuestsIds);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.FinishedQuestsCounts.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(FinishedQuestsCounts);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.ActiveQuests.Length));
			var memory1 = new Memory<byte>[ActiveQuests.Length];
			for(int i = 0; i < ActiveQuests.Length; i++)
			{
				size += DofusBinaryFactory.Sizing.SizeOf((short)(this.ActiveQuests[i].ProtocolId));
				memory1[i] = this.ActiveQuests[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.ReinitDoneQuestsIds.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(ReinitDoneQuestsIds);


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData((short)(this.FinishedQuestsIds.Length));
			writer.WriteDatas(FinishedQuestsIds);
			writer.WriteData((short)(this.FinishedQuestsCounts.Length));
			writer.WriteDatas(FinishedQuestsCounts);
			writer.WriteData((short)(this.ActiveQuests.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteData((short)(ActiveQuests[i].ProtocolId));
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData((short)(this.ReinitDoneQuestsIds.Length));
			writer.WriteDatas(ReinitDoneQuestsIds);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			int FinishedQuestsIds_length = reader.Read<short>();
			this.FinishedQuestsIds = new CustomVar<short>[FinishedQuestsIds_length];
			for(int i = 0; i < FinishedQuestsIds_length; i++)
				this.FinishedQuestsIds[i] = reader.Read<CustomVar<short>>();
			int FinishedQuestsCounts_length = reader.Read<short>();
			this.FinishedQuestsCounts = new CustomVar<short>[FinishedQuestsCounts_length];
			for(int i = 0; i < FinishedQuestsCounts_length; i++)
				this.FinishedQuestsCounts[i] = reader.Read<CustomVar<short>>();
			int ActiveQuests_length = reader.Read<short>();
			this.ActiveQuests = new QuestActiveInformations[ActiveQuests_length];
			for(int i = 0; i < ActiveQuests_length; i++)
			{
			reader.Skip(2); // skip protocolManager.GetInstance(short)
				this.ActiveQuests[i] = new QuestActiveInformations();
				this.ActiveQuests[i].Deserialize(reader);
			}
			int ReinitDoneQuestsIds_length = reader.Read<short>();
			this.ReinitDoneQuestsIds = new CustomVar<short>[ReinitDoneQuestsIds_length];
			for(int i = 0; i < ReinitDoneQuestsIds_length; i++)
				this.ReinitDoneQuestsIds[i] = reader.Read<CustomVar<short>>();

		}


	}
}
