//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:55.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.roleplay.party;
using    Renaissance.Protocol.types.game.context.roleplay.party;

namespace Renaissance.Protocol.messages.game.context.roleplay.party
{
	public class PartyJoinMessage : AbstractPartyMessage, IDofusMessage
	{
		public new const int NetworkId = 5576;
		public new int ProtocolId { get { return NetworkId; } }

		public byte PartyType { get; set; }

		public CustomVar<long> PartyLeaderId { get; set; }

		public byte MaxParticipants { get; set; }

		public PartyMemberInformations[] Members { get; set; }

		public PartyGuestInformations[] Guests { get; set; }

		public bool Restricted { get; set; }

		public string PartyName { get; set; }


		public PartyJoinMessage() { }


		public PartyJoinMessage InitPartyJoinMessage(CustomVar<int> _partyid, byte _partytype, CustomVar<long> _partyleaderid, byte _maxparticipants, PartyMemberInformations[] _members, PartyGuestInformations[] _guests, bool _restricted, string _partyname)
		{

			base.PartyId = _partyid;
			this.PartyType = _partytype;
			this.PartyLeaderId = _partyleaderid;
			this.MaxParticipants = _maxparticipants;
			this.Members = _members;
			this.Guests = _guests;
			this.Restricted = _restricted;
			this.PartyName = _partyname;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(PartyType);
			size += DofusBinaryFactory.Sizing.SizeOf(PartyLeaderId);
			size += DofusBinaryFactory.Sizing.SizeOf(MaxParticipants);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Members.Length));
			var memory1 = new Memory<byte>[Members.Length];
			for(int i = 0; i < Members.Length; i++)
			{
				size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Members[i].ProtocolId));
				memory1[i] = this.Members[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Guests.Length));
			var memory2 = new Memory<byte>[Guests.Length];
			for(int i = 0; i < Guests.Length; i++)
			{
				memory2[i] = this.Guests[i].Serialize();
				size += memory2[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf(Restricted);
			size += DofusBinaryFactory.Sizing.SizeOf(PartyName);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.PartyType);
			writer.WriteData(this.PartyLeaderId);
			writer.WriteData(this.MaxParticipants);
			writer.WriteData((short)(this.Members.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteData((short)(Members[i].ProtocolId));
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData((short)(this.Guests.Length));
			for(int i = 0; i < memory2.Length; i++)
			{
				writer.WriteDatas(memory2[i]);
			}
			writer.WriteData(this.Restricted);
			writer.WriteData(this.PartyName);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.PartyType = reader.Read<byte>();
			this.PartyLeaderId = reader.Read<CustomVar<long>>();
			this.MaxParticipants = reader.Read<byte>();
			int Members_length = reader.Read<short>();
			this.Members = new PartyMemberInformations[Members_length];
			for(int i = 0; i < Members_length; i++)
			{
			reader.Skip(2); // skip protocolManager.GetInstance(short)
				this.Members[i] = new PartyMemberInformations();
				this.Members[i].Deserialize(reader);
			}
			int Guests_length = reader.Read<short>();
			this.Guests = new PartyGuestInformations[Guests_length];
			for(int i = 0; i < Guests_length; i++)
			{
				this.Guests[i] = new PartyGuestInformations();
				this.Guests[i].Deserialize(reader);
			}
			this.Restricted = reader.Read<bool>();
			this.PartyName = reader.Read<string>();

		}


	}
}
