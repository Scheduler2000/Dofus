//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:55.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.roleplay.party;
using    Renaissance.Protocol.types.game.context.roleplay.party;

namespace Renaissance.Protocol.messages.game.context.roleplay.party
{
	public class PartyInvitationDungeonDetailsMessage : PartyInvitationDetailsMessage, IDofusMessage
	{
		public new const int NetworkId = 6262;
		public new int ProtocolId { get { return NetworkId; } }

		public CustomVar<short> DungeonId { get; set; }

		public bool[] PlayersDungeonReady { get; set; }


		public PartyInvitationDungeonDetailsMessage() { }


		public PartyInvitationDungeonDetailsMessage InitPartyInvitationDungeonDetailsMessage(byte _partytype, string _partyname, CustomVar<long> _fromid, string _fromname, CustomVar<long> _leaderid, PartyInvitationMemberInformations[] _members, PartyGuestInformations[] _guests, CustomVar<int> _partyid, CustomVar<short> _dungeonid, bool[] _playersdungeonready)
		{

			base.PartyType = _partytype;
			base.PartyName = _partyname;
			base.FromId = _fromid;
			base.FromName = _fromname;
			base.LeaderId = _leaderid;
			base.Members = _members;
			base.Guests = _guests;
			base.PartyId = _partyid;
			this.DungeonId = _dungeonid;
			this.PlayersDungeonReady = _playersdungeonready;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(DungeonId);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.PlayersDungeonReady.Length));
			size += DofusBinaryFactory.Sizing.SizeOf(PlayersDungeonReady);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.DungeonId);
			writer.WriteData((short)(this.PlayersDungeonReady.Length));
			writer.WriteDatas(PlayersDungeonReady);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.DungeonId = reader.Read<CustomVar<short>>();
			int PlayersDungeonReady_length = reader.Read<short>();
			this.PlayersDungeonReady = new bool[PlayersDungeonReady_length];
			for(int i = 0; i < PlayersDungeonReady_length; i++)
				this.PlayersDungeonReady[i] = reader.Read<bool>();

		}


	}
}
