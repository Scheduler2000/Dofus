//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:25.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.roleplay.party;

namespace Renaissance.Protocol.messages.game.context.roleplay.party
{
	public class DungeonPartyFinderRoomContentUpdateMessage : IDofusMessage
	{
		public  const int NetworkId = 6250;
		public  int ProtocolId { get { return NetworkId; } }

		public CustomVar<short> DungeonId { get; set; }

		public DungeonPartyFinderPlayer[] AddedPlayers { get; set; }

		public CustomVar<long>[] RemovedPlayersIds { get; set; }


		public DungeonPartyFinderRoomContentUpdateMessage() { }


		public DungeonPartyFinderRoomContentUpdateMessage InitDungeonPartyFinderRoomContentUpdateMessage(CustomVar<short> _dungeonid, DungeonPartyFinderPlayer[] _addedplayers, CustomVar<long>[] _removedplayersids)
		{

			this.DungeonId = _dungeonid;
			this.AddedPlayers = _addedplayers;
			this.RemovedPlayersIds = _removedplayersids;

			return this;
		}

		public  byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(this.DungeonId);
			writer.Write((short)(this.AddedPlayers.Length));
			foreach(var obj in AddedPlayers)
			{
				writer.Write(obj.Serialize());
			}
			writer.Write((short)(this.RemovedPlayersIds.Length));
			foreach(var item in RemovedPlayersIds)
				writer.Write(item);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.DungeonId = reader.Read<CustomVar<short>>();
			int AddedPlayers_length = reader.Read<short>();
			this.AddedPlayers = new DungeonPartyFinderPlayer[AddedPlayers_length];
			for(int i = 0; i < AddedPlayers_length; i++)
			{
				this.AddedPlayers[i] = new DungeonPartyFinderPlayer();
				this.AddedPlayers[i].Deserialize(reader);
			}
			int RemovedPlayersIds_length = reader.Read<short>();
			this.RemovedPlayersIds = new CustomVar<long>[RemovedPlayersIds_length];
			for(int i = 0; i < RemovedPlayersIds_length; i++)
				this.RemovedPlayersIds[i] = reader.Read<CustomVar<long>>();

		}


	}
}
