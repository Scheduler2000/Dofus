//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:55.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.roleplay.party;
using    Renaissance.Protocol.types.game.context.roleplay.party;

namespace Renaissance.Protocol.messages.game.context.roleplay.party
{
	public class PartyInvitationDetailsMessage : AbstractPartyMessage, IDofusMessage
	{
		public new const int NetworkId = 6263;
		public new int ProtocolId { get { return NetworkId; } }

		public byte PartyType { get; set; }

		public string PartyName { get; set; }

		public CustomVar<long> FromId { get; set; }

		public string FromName { get; set; }

		public CustomVar<long> LeaderId { get; set; }

		public PartyInvitationMemberInformations[] Members { get; set; }

		public PartyGuestInformations[] Guests { get; set; }


		public PartyInvitationDetailsMessage() { }


		public PartyInvitationDetailsMessage InitPartyInvitationDetailsMessage(CustomVar<int> _partyid, byte _partytype, string _partyname, CustomVar<long> _fromid, string _fromname, CustomVar<long> _leaderid, PartyInvitationMemberInformations[] _members, PartyGuestInformations[] _guests)
		{

			base.PartyId = _partyid;
			this.PartyType = _partytype;
			this.PartyName = _partyname;
			this.FromId = _fromid;
			this.FromName = _fromname;
			this.LeaderId = _leaderid;
			this.Members = _members;
			this.Guests = _guests;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(PartyType);
			size += DofusBinaryFactory.Sizing.SizeOf(PartyName);
			size += DofusBinaryFactory.Sizing.SizeOf(FromId);
			size += DofusBinaryFactory.Sizing.SizeOf(FromName);
			size += DofusBinaryFactory.Sizing.SizeOf(LeaderId);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Members.Length));
			var memory1 = new Memory<byte>[Members.Length];
			for(int i = 0; i < Members.Length; i++)
			{
				size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Members[i].ProtocolId));
				memory1[i] = this.Members[i].Serialize();
				size += memory1[i].Length;
			}
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Guests.Length));
			var memory2 = new Memory<byte>[Guests.Length];
			for(int i = 0; i < Guests.Length; i++)
			{
				memory2[i] = this.Guests[i].Serialize();
				size += memory2[i].Length;
			}
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.PartyType);
			writer.WriteData(this.PartyName);
			writer.WriteData(this.FromId);
			writer.WriteData(this.FromName);
			writer.WriteData(this.LeaderId);
			writer.WriteData((short)(this.Members.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteData((short)(Members[i].ProtocolId));
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteData((short)(this.Guests.Length));
			for(int i = 0; i < memory2.Length; i++)
			{
				writer.WriteDatas(memory2[i]);
			}

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.PartyType = reader.Read<byte>();
			this.PartyName = reader.Read<string>();
			this.FromId = reader.Read<CustomVar<long>>();
			this.FromName = reader.Read<string>();
			this.LeaderId = reader.Read<CustomVar<long>>();
			int Members_length = reader.Read<short>();
			this.Members = new PartyInvitationMemberInformations[Members_length];
			for(int i = 0; i < Members_length; i++)
			{
			reader.Skip(2); // skip protocolManager.GetInstance(short)
				this.Members[i] = new PartyInvitationMemberInformations();
				this.Members[i].Deserialize(reader);
			}
			int Guests_length = reader.Read<short>();
			this.Guests = new PartyGuestInformations[Guests_length];
			for(int i = 0; i < Guests_length; i++)
			{
				this.Guests[i] = new PartyGuestInformations();
				this.Guests[i].Deserialize(reader);
			}

		}


	}
}
