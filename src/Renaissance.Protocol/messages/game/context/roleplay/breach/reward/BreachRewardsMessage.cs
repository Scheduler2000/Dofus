//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:57.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.roleplay.breach;

namespace Renaissance.Protocol.messages.game.context.roleplay.breach.reward
{
	public class BreachRewardsMessage : IDofusMessage
	{
		public  const int NetworkId = 6813;
		public  int ProtocolId { get { return NetworkId; } }

		public BreachReward[] Rewards { get; set; }

		public BreachReward Save { get; set; }


		public BreachRewardsMessage() { }


		public BreachRewardsMessage InitBreachRewardsMessage(BreachReward[] _rewards, BreachReward _save)
		{

			this.Rewards = _rewards;
			this.Save = _save;

			return this;
		}

		public  Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Rewards.Length));
			var memory1 = new Memory<byte>[Rewards.Length];
			for(int i = 0; i < Rewards.Length; i++)
			{
				memory1[i] = this.Rewards[i].Serialize();
				size += memory1[i].Length;
			}
			var serialized1 = this.Save.Serialize();
			size += serialized1.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteData((short)(this.Rewards.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}
			writer.WriteDatas(serialized1);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			int Rewards_length = reader.Read<short>();
			this.Rewards = new BreachReward[Rewards_length];
			for(int i = 0; i < Rewards_length; i++)
			{
				this.Rewards[i] = new BreachReward();
				this.Rewards[i].Deserialize(reader);
			}
			this.Save = new BreachReward();
			this.Save.Deserialize(reader);

		}


	}
}
