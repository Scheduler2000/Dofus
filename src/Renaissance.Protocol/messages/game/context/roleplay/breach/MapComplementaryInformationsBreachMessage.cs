//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:54.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.messages.game.context.roleplay;
using    Renaissance.Protocol.types.game.context.fight;
using    Renaissance.Protocol.types.game.context.fight;
using    Renaissance.Protocol.types.game.context.roleplay;
using    Renaissance.Protocol.types.game.context.roleplay.breach;
using    Renaissance.Protocol.types.game.house;
using    Renaissance.Protocol.types.game.interactive;
using    Renaissance.Protocol.types.game.interactive;
using    Renaissance.Protocol.types.game.interactive;

namespace Renaissance.Protocol.messages.game.context.roleplay.breach
{
	public class MapComplementaryInformationsBreachMessage : MapComplementaryInformationsDataMessage, IDofusMessage
	{
		public new const int NetworkId = 6791;
		public new int ProtocolId { get { return NetworkId; } }

		public CustomVar<int> Floor { get; set; }

		public byte Room { get; set; }

		public BreachBranch[] Branches { get; set; }


		public MapComplementaryInformationsBreachMessage() { }


		public MapComplementaryInformationsBreachMessage InitMapComplementaryInformationsBreachMessage(CustomVar<short> _subareaid, double _mapid, HouseInformations[] _houses, GameRolePlayActorInformations[] _actors, InteractiveElement[] _interactiveelements, StatedElement[] _statedelements, MapObstacle[] _obstacles, FightCommonInformations[] _fights, bool _hasaggressivemonsters, FightStartingPositions _fightstartpositions, CustomVar<int> _floor, byte _room, BreachBranch[] _branches)
		{

			base.SubAreaId = _subareaid;
			base.MapId = _mapid;
			base.Houses = _houses;
			base.Actors = _actors;
			base.InteractiveElements = _interactiveelements;
			base.StatedElements = _statedelements;
			base.Obstacles = _obstacles;
			base.Fights = _fights;
			base.HasAggressiveMonsters = _hasaggressivemonsters;
			base.FightStartPositions = _fightstartpositions;
			this.Floor = _floor;
			this.Room = _room;
			this.Branches = _branches;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(Floor);
			size += DofusBinaryFactory.Sizing.SizeOf(Room);
			size += DofusBinaryFactory.Sizing.SizeOf((short)(this.Branches.Length));
			var memory1 = new Memory<byte>[Branches.Length];
			for(int i = 0; i < Branches.Length; i++)
			{
				memory1[i] = this.Branches[i].Serialize();
				size += memory1[i].Length;
			}
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.Floor);
			writer.WriteData(this.Room);
			writer.WriteData((short)(this.Branches.Length));
			for(int i = 0; i < memory1.Length; i++)
			{
				writer.WriteDatas(memory1[i]);
			}

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.Floor = reader.Read<CustomVar<int>>();
			this.Room = reader.Read<byte>();
			int Branches_length = reader.Read<short>();
			this.Branches = new BreachBranch[Branches_length];
			for(int i = 0; i < Branches_length; i++)
			{
				this.Branches[i] = new BreachBranch();
				this.Branches[i].Deserialize(reader);
			}

		}


	}
}
