//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 07/11/2019 23:09:23.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.character;
using    Renaissance.Protocol.types.game.data.items.effects;

namespace Renaissance.Protocol.messages.game.context.roleplay.breach
{
	public class BreachStateMessage : IDofusMessage
	{
		public  const int NetworkId = 6799;
		public  int ProtocolId { get { return NetworkId; } }

		public CharacterMinimalInformations Owner { get; set; }

		public ObjectEffectInteger[] Bonuses { get; set; }

		public CustomVar<int> Bugdet { get; set; }

		public bool Saved { get; set; }


		public BreachStateMessage() { }


		public BreachStateMessage InitBreachStateMessage(CharacterMinimalInformations _owner, ObjectEffectInteger[] _bonuses, CustomVar<int> _bugdet, bool _saved)
		{

			this.Owner = _owner;
			this.Bonuses = _bonuses;
			this.Bugdet = _bugdet;
			this.Saved = _saved;

			return this;
		}

		public  byte[] Serialize()
		{

			using DofusWriter writer = new DofusWriter();

			writer.Write(this.Owner.Serialize());
			writer.Write((short)(this.Bonuses.Length));
			foreach(var obj in Bonuses)
			{
				writer.Write(obj.Serialize());
			}
			writer.Write(this.Bugdet);
			writer.Write(this.Saved);

			return writer.Data;
		}

		public  void Deserialize(DofusReader reader)
		{

			this.Owner = new CharacterMinimalInformations();
			this.Owner.Deserialize(reader);
			int Bonuses_length = reader.Read<short>();
			this.Bonuses = new ObjectEffectInteger[Bonuses_length];
			for(int i = 0; i < Bonuses_length; i++)
			{
				this.Bonuses[i] = new ObjectEffectInteger();
				this.Bonuses[i].Deserialize(reader);
			}
			this.Bugdet = reader.Read<CustomVar<int>>();
			this.Saved = reader.Read<bool>();

		}


	}
}
