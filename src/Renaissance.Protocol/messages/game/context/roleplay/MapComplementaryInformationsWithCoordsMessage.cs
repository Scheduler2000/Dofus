//-------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by a tool.
//  Generated on 08/12/2019 12:50:50.
//	Changes to this file may cause incorrect behavior !
//  Author : Scheduler.
// </auto-generated>
//-------------------------------------------------------------------------------

using    System;
using    Renaissance.Binary;
using    Renaissance.Binary.Definition;
using    Renaissance.Protocol.types.game.context.fight;
using    Renaissance.Protocol.types.game.context.fight;
using    Renaissance.Protocol.types.game.context.roleplay;
using    Renaissance.Protocol.types.game.house;
using    Renaissance.Protocol.types.game.interactive;
using    Renaissance.Protocol.types.game.interactive;
using    Renaissance.Protocol.types.game.interactive;

namespace Renaissance.Protocol.messages.game.context.roleplay
{
	public class MapComplementaryInformationsWithCoordsMessage : MapComplementaryInformationsDataMessage, IDofusMessage
	{
		public new const int NetworkId = 6268;
		public new int ProtocolId { get { return NetworkId; } }

		public short WorldX { get; set; }

		public short WorldY { get; set; }


		public MapComplementaryInformationsWithCoordsMessage() { }


		public MapComplementaryInformationsWithCoordsMessage InitMapComplementaryInformationsWithCoordsMessage(CustomVar<short> _subareaid, double _mapid, HouseInformations[] _houses, GameRolePlayActorInformations[] _actors, InteractiveElement[] _interactiveelements, StatedElement[] _statedelements, MapObstacle[] _obstacles, FightCommonInformations[] _fights, bool _hasaggressivemonsters, FightStartingPositions _fightstartpositions, short _worldx, short _worldy)
		{

			base.SubAreaId = _subareaid;
			base.MapId = _mapid;
			base.Houses = _houses;
			base.Actors = _actors;
			base.InteractiveElements = _interactiveelements;
			base.StatedElements = _statedelements;
			base.Obstacles = _obstacles;
			base.Fights = _fights;
			base.HasAggressiveMonsters = _hasaggressivemonsters;
			base.FightStartPositions = _fightstartpositions;
			this.WorldX = _worldx;
			this.WorldY = _worldy;

			return this;
		}

		public new Memory<byte> Serialize()
		{

			int size = default;

			size += DofusBinaryFactory.Sizing.SizeOf(WorldX);
			size += DofusBinaryFactory.Sizing.SizeOf(WorldY);
			var parent = base.Serialize();
			size += parent.Length;


			using DofusWriter writer = new DofusWriter(size);

			writer.WriteDatas(parent);
			writer.WriteData(this.WorldX);
			writer.WriteData(this.WorldY);

			return writer.Data;
		}

		public new void Deserialize(DofusReader reader)
		{

			base.Deserialize(reader);
			this.WorldX = reader.Read<short>();
			this.WorldY = reader.Read<short>();

		}


	}
}
