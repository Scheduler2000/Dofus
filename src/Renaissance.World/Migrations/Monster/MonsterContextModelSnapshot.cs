// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Renaissance.World.Database.Monsters;

namespace Renaissance.World.Migrations.Monster
{
    [DbContext(typeof(MonsterContext))]
    partial class MonsterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Renaissance.World.Database.Monsters.Drop.Coefficient.MonsterDropCoefficient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Criteria")
                        .HasColumnType("text");

                    b.Property<double>("DropCoefficient")
                        .HasColumnType("double precision");

                    b.Property<int?>("MonsterDropId")
                        .HasColumnType("integer");

                    b.Property<int>("MonsterGrade")
                        .HasColumnType("integer");

                    b.Property<int>("MonsterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MonsterDropId");

                    b.ToTable("MonstersDropCoefficients");
                });

            modelBuilder.Entity("Renaissance.World.Database.Monsters.Drop.MonsterDrop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Criteria")
                        .HasColumnType("text");

                    b.Property<int>("DropId")
                        .HasColumnType("integer");

                    b.Property<bool>("HasCriteria")
                        .HasColumnType("boolean");

                    b.Property<int>("MonsterId")
                        .HasColumnType("integer");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.Property<double>("PercentDropForGrade1")
                        .HasColumnType("double precision");

                    b.Property<double>("PercentDropForGrade2")
                        .HasColumnType("double precision");

                    b.Property<double>("PercentDropForGrade3")
                        .HasColumnType("double precision");

                    b.Property<double>("PercentDropForGrade4")
                        .HasColumnType("double precision");

                    b.Property<double>("PercentDropForGrade5")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MonsterId");

                    b.ToTable("MonstersDrops");
                });

            modelBuilder.Entity("Renaissance.World.Database.Monsters.Grade.MonsterGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ActionPoints")
                        .HasColumnType("integer");

                    b.Property<int>("Agility")
                        .HasColumnType("integer");

                    b.Property<int>("AirResistance")
                        .HasColumnType("integer");

                    b.Property<int>("Chance")
                        .HasColumnType("integer");

                    b.Property<int>("DamageReflect")
                        .HasColumnType("integer");

                    b.Property<int>("EarthResistance")
                        .HasColumnType("integer");

                    b.Property<int>("FireResistance")
                        .HasColumnType("integer");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<int>("GradeXp")
                        .HasColumnType("integer");

                    b.Property<int>("HiddenLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Intelligence")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("LifePoints")
                        .HasColumnType("integer");

                    b.Property<int>("MonsterId")
                        .HasColumnType("integer");

                    b.Property<int>("MovementPoints")
                        .HasColumnType("integer");

                    b.Property<int>("NeutralResistance")
                        .HasColumnType("integer");

                    b.Property<int>("PaDodge")
                        .HasColumnType("integer");

                    b.Property<int>("PmDodge")
                        .HasColumnType("integer");

                    b.Property<int>("StartingSpellId")
                        .HasColumnType("integer");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<int>("Vitality")
                        .HasColumnType("integer");

                    b.Property<int>("WaterResistance")
                        .HasColumnType("integer");

                    b.Property<int>("Wisdom")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MonsterId");

                    b.ToTable("MonstersGrades");
                });

            modelBuilder.Entity("Renaissance.World.Database.Monsters.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AggressiveAttackDelay")
                        .HasColumnType("integer");

                    b.Property<string>("AggressiveImmunityCriterion")
                        .HasColumnType("text");

                    b.Property<int>("AggressiveLevelDiff")
                        .HasColumnType("integer");

                    b.Property<int>("AggressiveZoneSize")
                        .HasColumnType("integer");

                    b.Property<bool>("AllIdolsDisabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanBeCarried")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanBePushed")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanPlay")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanSwitchPos")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanTackle")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanUsePortal")
                        .HasColumnType("boolean");

                    b.Property<int>("CorrespondingMiniBossId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatureBoneId")
                        .HasColumnType("integer");

                    b.Property<bool>("DareAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("FavoriteSubareaId")
                        .HasColumnType("integer");

                    b.Property<int>("GfxId")
                        .HasColumnType("integer");

                    b.Property<List<int>>("IncompatibleChallenges")
                        .HasColumnType("integer[]");

                    b.Property<List<int>>("IncompatibleIdols")
                        .HasColumnType("integer[]");

                    b.Property<bool>("IsBoss")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMiniBoss")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuestMonster")
                        .HasColumnType("boolean");

                    b.Property<string>("Look")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Race")
                        .HasColumnType("integer");

                    b.Property<double>("SpeedAdjust")
                        .HasColumnType("double precision");

                    b.Property<List<int>>("Spells")
                        .HasColumnType("integer[]");

                    b.Property<List<int>>("Subareas")
                        .HasColumnType("integer[]");

                    b.Property<bool>("UseBombSlot")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseRaceValues")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseSummonSlot")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("Renaissance.World.Database.Monsters.Drop.Coefficient.MonsterDropCoefficient", b =>
                {
                    b.HasOne("Renaissance.World.Database.Monsters.Drop.MonsterDrop", null)
                        .WithMany("SpecificDropCoefficient")
                        .HasForeignKey("MonsterDropId");
                });

            modelBuilder.Entity("Renaissance.World.Database.Monsters.Drop.MonsterDrop", b =>
                {
                    b.HasOne("Renaissance.World.Database.Monsters.Monster", null)
                        .WithMany("Drops")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Renaissance.World.Database.Monsters.Grade.MonsterGrade", b =>
                {
                    b.HasOne("Renaissance.World.Database.Monsters.Monster", null)
                        .WithMany("Grades")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
