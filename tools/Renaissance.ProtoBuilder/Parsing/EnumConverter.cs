using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace Renaissance.Tools.ProtoBuilder.Parsing
{
    /// <summary>
    /// <see cref="EnumConverter"/> converts com.ankamagames.dofus.network.enums files to C#.
    /// </summary>
    public class EnumConverter : IConverter
    {
        private readonly string m_pattern = "(public static const\\.? |:uint\\.? |:int\\.? )";

        public ConverterType ConverterType { get; } = ConverterType.Enum;


        public EnumConverter() { }


        public StringBuilder Convert(string filePath)
        {
            var data = this.Parse(filePath);
            var strBuilder = this.CleanParsing(data);

            return strBuilder;
        }

        private string[] Parse(string filePath)
        {
            string[] data = File.ReadAllLines(filePath);

            data[0] = "namespace Renaissance.Protocol.enums";

            for (int i = 0; i < data.Length; i++)
            {
                if (Regex.IsMatch(data[i], m_pattern))
                    data[i] = Regex.Replace(data[i], m_pattern, " ");

                if (data[i].Contains("class"))
                    data[i] = data[i].Replace("class", "enum");

                if (data[i].Contains(';'))
                    data[i] = data[i].Replace(';', ',');

                if (data[i].Contains($"public function {Path.GetFileNameWithoutExtension(filePath)}()"))
                {
                    data[i - 3] = data[i - 3].Remove(data[i - 3].Length - 1);
                    for (int y = 0; y < 4; y++)
                        data[i + y] = string.Empty;
                }
            }
            return data;
        }


        private StringBuilder CleanParsing(string[] data)
        {
            StringBuilder writer = new StringBuilder();

            writer.AppendLine("//-------------------------------------------------------------------------------")
                  .AppendLine("// <auto-generated>")
                  .AppendLine("//	This code was generated by a tool.")
                  .AppendLine($"//  Generated on {DateTime.Now}.")
                  .AppendLine("//	Changes to this file may cause incorrect behavior !")
                  .AppendLine("//  Author : Scheduler.")
                  .AppendLine("// </auto-generated>")
                  .AppendLine("//-------------------------------------------------------------------------------\n");

            foreach (var str in data)
                if (str != string.Empty)
                    writer.AppendLine(str);

            return writer;
        }
    }
}
